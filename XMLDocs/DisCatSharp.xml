<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DisCatSharp</name>
    </assembly>
    <members>
        <member name="T:DisCatSharp.AsyncManualResetEvent">
            <summary>
            Implements an async version of a <see cref="T:System.Threading.ManualResetEvent"/>
            This class does currently not support Timeouts or the use of CancellationTokens
            </summary>
        </member>
        <member name="P:DisCatSharp.AsyncManualResetEvent.IsSet">
            <summary>
            Gets a value indicating whether this is set.
            </summary>
        </member>
        <member name="M:DisCatSharp.AsyncManualResetEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.AsyncManualResetEvent"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.AsyncManualResetEvent.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.AsyncManualResetEvent"/> class.
            </summary>
            <param name="initialState">If true, initial state.</param>
        </member>
        <member name="M:DisCatSharp.AsyncManualResetEvent.WaitAsync">
            <summary>
            Waits the async waiter.
            </summary>
        </member>
        <member name="M:DisCatSharp.AsyncManualResetEvent.SetAsync">
            <summary>
            Sets the async task.
            </summary>
        </member>
        <member name="M:DisCatSharp.AsyncManualResetEvent.Reset">
            <summary>
            Resets the async waiter.
            </summary>
        </member>
        <member name="T:DisCatSharp.BaseExtension">
            <summary>
            Represents base for all DisCatSharp extensions. To implement your own extension, extend this class, and implement its abstract members.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseExtension.Client">
            <summary>
            Gets the instance of <see cref="T:DisCatSharp.DiscordClient"/> this extension is attached to.
            </summary>
        </member>
        <member name="M:DisCatSharp.BaseExtension.Setup(DisCatSharp.DiscordClient)">
            <summary>
            Initializes this extension for given <see cref="T:DisCatSharp.DiscordClient"/> instance.
            </summary>
            <param name="client">Discord client to initialize for.</param>
        </member>
        <member name="T:DisCatSharp.BaseDiscordClient">
            <summary>
            Represents a common base for various Discord Client implementations.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.ApiClient">
            <summary>
            Gets the api client.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.Logger">
            <summary>
            Gets the instance of the logger for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.VersionString">
            <summary>
            Gets the string representing the version of bot lib.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.BotLibrary">
            <summary>
            Gets the bot library name.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.CurrentApplication">
            <summary>
            Gets the current application.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.RestClient">
            <summary>
            Exposes a <see cref="T:System.Net.Http.HttpClient">Http Client</see> for custom operations.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.Guilds">
            <summary>
            Gets the cached guilds for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.UserCache">
            <summary>
            Gets the cached users for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.ServiceProvider">
            <summary>
            <para>Gets the service provider.</para>
            <para>This allows passing data around without resorting to static members.</para>
            <para>Defaults to null.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.VoiceRegions">
            <summary>
            Gets the list of available voice regions. Note that this property will not contain VIP voice regions.
            </summary>
        </member>
        <member name="P:DisCatSharp.BaseDiscordClient.InternalVoiceRegions">
            <summary>
            Gets the list of available voice regions. This property is meant as a way to modify <see cref="P:DisCatSharp.BaseDiscordClient.VoiceRegions"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.BaseDiscordClient.#ctor(DisCatSharp.DiscordConfiguration)">
            <summary>
            Initializes this Discord API client.
            </summary>
            <param name="config">Configuration for this client.</param>
        </member>
        <member name="M:DisCatSharp.BaseDiscordClient.GetCurrentApplicationAsync">
            <summary>
            Gets the current API application.
            </summary>
        </member>
        <member name="M:DisCatSharp.BaseDiscordClient.ListVoiceRegionsAsync">
            <summary>
            Gets a list of voice regions.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.BaseDiscordClient.InitializeAsync">
            <summary>
            Initializes this client. This method fetches information about current user, application, and voice regions.
            </summary>
        </member>
        <member name="M:DisCatSharp.BaseDiscordClient.GetGatewayInfoAsync(System.String)">
            <summary>
            Gets the current gateway info for the provided token.
            <para>If no value is provided, the configuration value will be used instead.</para>
            </summary>
            <returns>A gateway info object.</returns>
        </member>
        <member name="M:DisCatSharp.BaseDiscordClient.GetLibraryDevelopmentTeamAsync">
            <summary>
            Gets some information about the development team behind DisCatSharp.
            Can be used for crediting etc.
            <para>Note: This call contacts servers managed by the DCS team, no information is collected.</para>
            <returns>The team, or null with errors being logged on failure.</returns>
            </summary>
        </member>
        <member name="M:DisCatSharp.BaseDiscordClient.GetCachedOrEmptyUserInternal(System.UInt64)">
            <summary>
            Gets a cached user.
            </summary>
            <param name="userId">The user id.</param>
        </member>
        <member name="M:DisCatSharp.BaseDiscordClient.TryGetCachedUserInternal(System.UInt64,DisCatSharp.Entities.DiscordUser@)">
            <summary>
            Tries the get a cached user.
            </summary>
            <param name="userId">The user id.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:DisCatSharp.BaseDiscordClient.Dispose">
            <summary>
            Disposes this client.
            </summary>
        </member>
        <member name="T:DisCatSharp.DiscordClient">
            <summary>
            A Discord API wrapper.
            </summary>
            <summary>
            Represents a discord client.
            </summary>
            <summary>
            A Discord API wrapper.
            </summary>
            <summary>
            Represents a discord client.
            </summary>
            <summary>
            Represents a discord websocket client.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.MessageCache">
            <summary>
            Gets the message cache.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordClient._connectionLock">
            <summary>
            Gets the connection lock.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.GatewayVersion">
            <summary>
            Gets the gateway protocol version.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.GatewayInfo">
            <summary>
            Gets the gateway session information for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.GatewayUri">
            <summary>
            Gets the gateway URL.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.ShardCount">
            <summary>
            Gets the total number of shards the bot is connected to.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.ShardId">
            <summary>
            Gets the currently connected shard ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.Intents">
            <summary>
            Gets the intents configured for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.Guilds">
            <summary>
            Gets a dictionary of guilds that this client is in. The dictionary's key is the guild ID. Note that the
            guild objects in this dictionary will not be filled in if the specific guilds aren't available (the
            <see cref="E:DisCatSharp.DiscordClient.GuildAvailable"/> or <see cref="E:DisCatSharp.DiscordClient.GuildDownloadCompleted"/> events haven't been fired yet)
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.Ping">
            <summary>
            Gets the websocket latency for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.Presences">
            <summary>
            Gets the collection of presences held by this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordClient.EmbeddedActivities">
            <summary>
            Gets the collection of presences held by this client.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.#ctor(DisCatSharp.DiscordConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:DisCatSharp.DiscordClient"/>.
            </summary>
            <param name="config">Specifies configuration parameters.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.InternalSetup">
            <summary>
            Internal setup of the Client.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.AddExtension(DisCatSharp.BaseExtension)">
            <summary>
            Registers an extension with this client.
            </summary>
            <param name="ext">Extension to register.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetExtension``1">
            <summary>
            Retrieves a previously registered extension from this client.
            </summary>
            <typeparam name="T">The type of extension to retrieve.</typeparam>
            <returns>The requested extension.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.ConnectAsync(DisCatSharp.Entities.DiscordActivity,System.Nullable{DisCatSharp.Entities.UserStatus},System.Nullable{System.DateTimeOffset})">
            <summary>
            Connects to the gateway.
            </summary>
            <param name="activity">The activity to set. Defaults to null.</param>
            <param name="status">The optional status to set. Defaults to null.</param>
            <param name="idlesince">Since when is the client performing the specified activity. Defaults to null.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when an invalid token was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.ReconnectAsync(System.Boolean)">
            <summary>
            Reconnects to the gateway.
            </summary>
            <param name="startNewSession">Whether to start a new session.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.DisconnectAsync">
            <summary>
            Disconnects from the gateway.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetUserAsync(System.UInt64,System.Boolean)">
            <summary>
            Gets a user.
            </summary>
            <param name="userId">Id of the user</param>
            <param name="fetch">Whether to fetch the user again. Defaults to true.</param>
            <returns>The requested user.</returns>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetChannelAsync(System.UInt64)">
            <summary>
            Gets a channel.
            </summary>
            <param name="id">The id of the channel to get.</param>
            <returns>The requested channel.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetThreadAsync(System.UInt64)">
            <summary>
            Gets a thread.
            </summary>
            <param name="id">The id of the thread to get.</param>
            <returns>The requested thread.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.SendMessageAsync(DisCatSharp.Entities.DiscordChannel,System.String)">
            <summary>
            Sends a normal message.
            </summary>
            <param name="channel">The channel to send to.</param>
            <param name="content">The message content to send.</param>
            <returns>The message that was sent.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.SendMessageAsync(DisCatSharp.Entities.DiscordChannel,DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Sends a message with an embed.
            </summary>
            <param name="channel">The channel to send to.</param>
            <param name="embed">The embed to attach to the message.</param>
            <returns>The message that was sent.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.SendMessageAsync(DisCatSharp.Entities.DiscordChannel,System.String,DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Sends a message with content and an embed.
            </summary>
            <param name="channel">Channel to send to.</param>
            <param name="content">The message content to send.</param>
            <param name="embed">The embed to attach to the message.</param>
            <returns>The message that was sent.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.SendMessageAsync(DisCatSharp.Entities.DiscordChannel,DisCatSharp.Entities.DiscordMessageBuilder)">
            <summary>
            Sends a message with the <see cref="T:DisCatSharp.Entities.DiscordMessageBuilder"/>.
            </summary>
            <param name="channel">The channel to send the message to.</param>
            <param name="builder">The message builder.</param>
            <returns>The message that was sent.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission if TTS is false and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.SendMessageAsync(DisCatSharp.Entities.DiscordChannel,System.Action{DisCatSharp.Entities.DiscordMessageBuilder})">
            <summary>
            Sends a message with an <see cref="T:System.Action`1"/>.
            </summary>
            <param name="channel">The channel to send the message to.</param>
            <param name="action">The message builder.</param>
            <returns>The message that was sent.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission if TTS is false and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.CreateGuildAsync(System.String,System.String,DisCatSharp.Entities.Optional{System.IO.Stream},System.Nullable{DisCatSharp.Entities.VerificationLevel},System.Nullable{DisCatSharp.Entities.DefaultMessageNotifications},System.Nullable{DisCatSharp.SystemChannelFlags})">
            <summary>
            Creates a guild. This requires the bot to be in less than 10 guilds total.
            </summary>
            <param name="name">Name of the guild.</param>
            <param name="region">Voice region of the guild.</param>
            <param name="icon">Stream containing the icon for the guild.</param>
            <param name="verificationLevel">Verification level for the guild.</param>
            <param name="defaultMessageNotifications">Default message notification settings for the guild.</param>
            <param name="systemChannelFlags">System channel flags fopr the guild.</param>
            <returns>The created guild.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.CreateGuildFromTemplateAsync(System.String,System.String,DisCatSharp.Entities.Optional{System.IO.Stream})">
            <summary>
            Creates a guild from a template. This requires the bot to be in less than 10 guilds total.
            </summary>
            <param name="code">The template code.</param>
            <param name="name">Name of the guild.</param>
            <param name="icon">Stream containing the icon for the guild.</param>
            <returns>The created guild.</returns>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.ExecuteRawRequestAsync(DisCatSharp.Net.RestRequestMethod,System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Double})">
            <summary>
            Executes a raw request.
            </summary>
            <example>
            <c>
            var request = await Client.ExecuteRawRequestAsync(RestRequestMethod.GET, $"{Endpoints.CHANNELS}/243184972190742178964/{Endpoints.INVITES}");
            List&lt;DiscordInvite&gt; invites = DiscordJson.ToDiscordObject&lt;List&lt;DiscordInvite&gt;&gt;(request.Response);
            </c>
            </example>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <param name="routeParams">The route parameters.</param>
            <param name="jsonBody">The json body.</param>
            <param name="additionalHeaders">The addditional headers.</param>
            <param name="ratelimitWaitOverride">The ratelimit wait override.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the ressource does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <returns>A awaitable RestResponse</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetGuildAsync(System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Gets a guild.
            <para>Setting <paramref name="withCounts"/> to true will make a REST request.</para>
            </summary>
            <param name="id">The guild ID to search for.</param>
            <param name="withCounts">Whether to include approximate presence and member counts in the returned guild.</param>
            <returns>The requested Guild.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetGuildPreviewAsync(System.UInt64)">
            <summary>
            Gets a guild preview.
            </summary>
            <param name="id">The guild ID.</param>
            <returns></returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetInviteByCodeAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Gets an invite.
            </summary>
            <param name="code">The invite code.</param>
            <param name="withCounts">Whether to include presence and total member counts in the returned invite.</param>
            <param name="withExpiration">Whether to include the expiration date in the returned invite.</param>
            <param name="scheduledEventId">The scheduled event id.</param>
            <returns>The requested Invite.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the invite does not exists.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetConnectionsAsync">
            <summary>
            Gets a list of user connections.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetStickerAsync(System.UInt64)">
            <summary>
            Gets a sticker.
            </summary>
            <returns>The requested sticker.</returns>
            <param name="id">The id of the sticker.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the sticker does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetStickerPacksAsync">
            <summary>
            Gets all nitro sticker packs.
            </summary>
            <returns>List of sticker packs.</returns>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetInAppOAuth(DisCatSharp.Permissions,DisCatSharp.Enums.OAuthScopes,System.String)">
            <summary>
            Gets the In-App OAuth Url.
            </summary>
            <param name="scopes">Defaults to <see cref="F:DisCatSharp.Enums.OAuthScopes.BOT_DEFAULT"/>.</param>
            <param name="redir">Redirect Uri.</param>
            <param name="permissions">Defaults to <see cref="F:DisCatSharp.Permissions.None"/>.</param>
            <returns>The OAuth Url</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetWebhookAsync(System.UInt64)">
            <summary>
            Gets a webhook.
            </summary>
            <param name="id">The target webhook id.</param>
            <returns>The requested webhook.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetWebhookWithTokenAsync(System.UInt64,System.String)">
            <summary>
            Gets a webhook.
            </summary>
            <param name="id">The target webhook id.</param>
            <param name="token">The target webhook token.</param>
            <returns>The requested webhook.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UpdateStatusAsync(DisCatSharp.Entities.DiscordActivity,System.Nullable{DisCatSharp.Entities.UserStatus},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates current user's activity and status.
            </summary>
            <param name="activity">Activity to set.</param>
            <param name="userStatus">Status of the user.</param>
            <param name="idleSince">Since when is the client performing the specified activity.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UpdateCurrentUserAsync(System.String,DisCatSharp.Entities.Optional{System.IO.Stream})">
            <summary>
            Edits current user.
            </summary>
            <param name="username">New username.</param>
            <param name="avatar">New avatar.</param>
            <returns>The modified user.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the user does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetTemplateAsync(System.String)">
            <summary>
            Gets a guild template by the code.
            </summary>
            <param name="code">The code of the template.</param>
            <returns>The guild template for the code.</returns>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetGlobalApplicationCommandsAsync(System.Boolean)">
            <summary>
            Gets all the global application commands for this application.
            </summary>
            <param name="withLocalizations">Whether to get the full localization dict.</param>
            <returns>A list of global application commands.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.BulkOverwriteGlobalApplicationCommandsAsync(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommand})">
            <summary>
            Overwrites the existing global application commands. New commands are automatically created and missing commands are automatically deleted.
            </summary>
            <param name="commands">The list of commands to overwrite with.</param>
            <returns>The list of global commands.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.CreateGlobalApplicationCommandAsync(DisCatSharp.Entities.DiscordApplicationCommand)">
            <summary>
            Creates or overwrites a global application command.
            </summary>
            <param name="command">The command to create.</param>
            <returns>The created command.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetGlobalApplicationCommandAsync(System.UInt64)">
            <summary>
            Gets a global application command by its id.
            </summary>
            <param name="commandId">The id of the command to get.</param>
            <returns>The command with the id.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.EditGlobalApplicationCommandAsync(System.UInt64,System.Action{DisCatSharp.Net.Models.ApplicationCommandEditModel})">
            <summary>
            Edits a global application command.
            </summary>
            <param name="commandId">The id of the command to edit.</param>
            <param name="action">Action to perform.</param>
            <returns>The edited command.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.DeleteGlobalApplicationCommandAsync(System.UInt64)">
            <summary>
            Deletes a global application command.
            </summary>
            <param name="commandId">The id of the command to delete.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetGuildApplicationCommandsAsync(System.UInt64,System.Boolean)">
            <summary>
            Gets all the application commands for a guild.
            </summary>
            <param name="guildId">The id of the guild to get application commands for.</param>
            <param name="withLocalizations">Whether to get the full localization dict.</param>
            <returns>A list of application commands in the guild.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.BulkOverwriteGuildApplicationCommandsAsync(System.UInt64,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommand})">
            <summary>
            Overwrites the existing application commands in a guild. New commands are automatically created and missing commands are automatically deleted.
            </summary>
            <param name="guildId">The id of the guild.</param>
            <param name="commands">The list of commands to overwrite with.</param>
            <returns>The list of guild commands.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.CreateGuildApplicationCommandAsync(System.UInt64,DisCatSharp.Entities.DiscordApplicationCommand)">
            <summary>
            Creates or overwrites a guild application command.
            </summary>
            <param name="guildId">The id of the guild to create the application command in.</param>
            <param name="command">The command to create.</param>
            <returns>The created command.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetGuildApplicationCommandAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a application command in a guild by its id.
            </summary>
            <param name="guildId">The id of the guild the application command is in.</param>
            <param name="commandId">The id of the command to get.</param>
            <returns>The command with the id.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.EditGuildApplicationCommandAsync(System.UInt64,System.UInt64,System.Action{DisCatSharp.Net.Models.ApplicationCommandEditModel})">
            <summary>
            Edits a application command in a guild.
            </summary>
            <param name="guildId">The id of the guild the application command is in.</param>
            <param name="commandId">The id of the command to edit.</param>
            <param name="action">Action to perform.</param>
            <returns>The edited command.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.DeleteGuildApplicationCommandAsync(System.UInt64,System.UInt64)">
            <summary>
            Deletes a application command in a guild.
            </summary>
            <param name="guildId">The id of the guild to delete the application command in.</param>
            <param name="commandId">The id of the command.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetGuildApplicationCommandPermissionsAsync(System.UInt64)">
            <summary>
            Gets all command permissions for a guild.
            </summary>
            <param name="guildId">The target guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetApplicationCommandPermissionAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets the permissions for a guild command.
            </summary>
            <param name="guildId">The target guild.</param>
            <param name="commandId">The target command id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.InternalGetCachedThread(System.UInt64)">
            <summary>
            Gets the internal chached threads.
            </summary>
            <param name="threadId">The target thread id.</param>
            <returns>The requested thread.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.InternalGetCachedScheduledEvent(System.UInt64)">
            <summary>
            Gets the internal cached scheduled event.
            </summary>
            <param name="scheduledEventId">The target scheduled event id.</param>
            <returns>The requested scheduled event.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.InternalGetCachedChannel(System.UInt64)">
            <summary>
            Gets the internal cached channel.
            </summary>
            <param name="channelId">The target channel id.</param>
            <returns>The requested channel.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.InternalGetCachedGuild(System.Nullable{System.UInt64})">
            <summary>
            Gets the internal chached guild.
            </summary>
            <param name="guildId">The target guild id.</param>
            <returns>The requested guild.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UpdateMessage(DisCatSharp.Entities.DiscordMessage,DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Entities.DiscordGuild,DisCatSharp.Net.Abstractions.TransportMember)">
            <summary>
            Updates a message.
            </summary>
            <param name="message">The message to update.</param>
            <param name="author">The author to update.</param>
            <param name="guild">The guild to update.</param>
            <param name="member">The member to update.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UpdateScheduledEvent(DisCatSharp.Entities.DiscordScheduledEvent,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Updates a scheduled event.
            </summary>
            <param name="scheduledEvent">The scheduled event to update.</param>
            <param name="guild">The guild to update.</param>
            <returns>The updated scheduled event.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UpdateUser(DisCatSharp.Entities.DiscordUser,System.Nullable{System.UInt64},DisCatSharp.Entities.DiscordGuild,DisCatSharp.Net.Abstractions.TransportMember)">
            <summary>
            Updates a user.
            </summary>
            <param name="usr">The user to update.</param>
            <param name="guildId">The guild id to update.</param>
            <param name="guild">The guild to update.</param>
            <param name="mbr">The member to update.</param>
            <returns>The updated user.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UpdateCachedScheduledEvent(DisCatSharp.Entities.DiscordGuild,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Updates the cached scheduled events in a guild.
            </summary>
            <param name="guild">The guild.</param>
            <param name="rawEvents">The raw events.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UpdateCachedGuild(DisCatSharp.Entities.DiscordGuild,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Updates the cached guild.
            </summary>
            <param name="newGuild">The new guild.</param>
            <param name="rawMembers">The raw members.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.PopulateMessageReactionsAndCache(DisCatSharp.Entities.DiscordMessage,DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Net.Abstractions.TransportMember)">
            <summary>
            Populates the message reactions and cache.
            </summary>
            <param name="message">The message.</param>
            <param name="author">The author.</param>
            <param name="member">The member.</param>
        </member>
        <member name="F:DisCatSharp.DiscordClient._disposed">
            <summary>
            Whether the client is disposed.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.Dispose">
            <summary>
            Disposes the client.
            </summary>
        </member>
        <member name="T:DisCatSharp.DiscordClient.TimeoutHandler">
            <summary>
            Represents a timeout handler.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordClient.TimeoutHandler.Member">
            <summary>
            Gets the member.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordClient.TimeoutHandler.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordClient.TimeoutHandler.TimeoutUntilOld">
            <summary>
            Gets the old timeout value.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordClient.TimeoutHandler.TimeoutUntilNew">
            <summary>
            Gets the new timeout value.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.TimeoutHandler.#ctor(DisCatSharp.Entities.DiscordMember,DisCatSharp.Entities.DiscordGuild,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Constructs a new <see cref="T:DisCatSharp.DiscordClient.TimeoutHandler"/>.
            </summary>
            <param name="mbr">The affected member.</param>
            <param name="guild">The affected guild.</param>
            <param name="too">The old timeout value.</param>
            <param name="ton">The new timeout value.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.HandleDispatchAsync(DisCatSharp.Net.Abstractions.GatewayPayload)">
            <summary>
            Handles the dispatch payloads.
            </summary>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnReadyEventAsync(DisCatSharp.Net.Abstractions.ReadyPayload,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Handles the ready event.
            </summary>
            <param name="ready">The ready payload.</param>
            <param name="rawGuilds">The raw guilds.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnResumedAsync">
            <summary>
            Handles the resumed event.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnChannelCreateEventAsync(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Handles the channel create event.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnChannelUpdateEventAsync(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Handles the channel update event.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnChannelDeleteEventAsync(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Handles the channel delete event.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.RefreshChannelsAsync(System.UInt64)">
            <summary>
            Refreshes the channels.
            </summary>
            <param name="guildId">The guild id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnChannelPinsUpdateAsync(System.Nullable{System.UInt64},System.UInt64,System.Nullable{System.DateTimeOffset})">
            <summary>
            Handles the channel pins update event.
            </summary>
            <param name="guildId">The optional guild id.</param>
            <param name="channelId">The channel id.</param>
            <param name="lastPinTimestamp">The optional last pin timestamp.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildCreateEventAsync(DisCatSharp.Entities.DiscordGuild,Newtonsoft.Json.Linq.JArray,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordPresence})">
            <summary>
            Handles the guild create event.
            </summary>
            <param name="guild">The guild.</param>
            <param name="rawMembers">The raw members.</param>
            <param name="presences">The presences.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildUpdateEventAsync(DisCatSharp.Entities.DiscordGuild,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Handles the guild update event.
            </summary>
            <param name="guild">The guild.</param>
            <param name="rawMembers">The raw members.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildDeleteEventAsync(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the guild delete event.
            </summary>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildSyncEventAsync(DisCatSharp.Entities.DiscordGuild,System.Boolean,Newtonsoft.Json.Linq.JArray,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordPresence})">
            <summary>
            Handles the guild sync event.
            </summary>
            <param name="guild">The guild.</param>
            <param name="isLarge">Whether the guild is a large guild..</param>
            <param name="rawMembers">The raw members.</param>
            <param name="presences">The presences.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildEmojisUpdateEventAsync(DisCatSharp.Entities.DiscordGuild,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmoji})">
            <summary>
            Handles the guild emojis update event.
            </summary>
            <param name="guild">The guild.</param>
            <param name="newEmojis">The new emojis.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnStickersUpdatedAsync(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordSticker},System.UInt64)">
            <summary>
            Handles the stickers updated.
            </summary>
            <param name="newStickers">The new stickers.</param>
            <param name="guildId">The guild id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildBanAddEventAsync(DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the guild ban add event.
            </summary>
            <param name="user">The transport user.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildBanRemoveEventAsync(DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the guild ban remove event.
            </summary>
            <param name="user">The transport user.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildScheduledEventCreateEventAsync(DisCatSharp.Entities.DiscordScheduledEvent,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the scheduled event create event.
            </summary>
            <param name="scheduledEvent">The created event.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildScheduledEventUpdateEventAsync(DisCatSharp.Entities.DiscordScheduledEvent,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the scheduled event update event.
            </summary>
            <param name="scheduledEvent">The updated event.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildScheduledEventDeleteEventAsync(DisCatSharp.Entities.DiscordScheduledEvent,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the scheduled event delete event.
            </summary>
            <param name="scheduledEvent">The deleted event.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildScheduledEventUserAddedEventAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the scheduled event user add event.
            <param name="guildScheduledEventId">The event.</param>
            <param name="userId">The added user id.</param>
            <param name="guild">The guild.</param>
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildScheduledEventUserRemovedEventAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the scheduled event user remove event.
            <param name="guildScheduledEventId">The event.</param>
            <param name="userId">The removed user id.</param>
            <param name="guild">The guild.</param>
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildIntegrationCreateEventAsync(DisCatSharp.Entities.DiscordGuild,DisCatSharp.Entities.DiscordIntegration)">
            <summary>
            Handles the guild integration create event.
            </summary>
            <param name="guild">The guild.</param>
            <param name="integration">The integration.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildIntegrationUpdateEventAsync(DisCatSharp.Entities.DiscordGuild,DisCatSharp.Entities.DiscordIntegration)">
            <summary>
            Handles the guild integration update event.
            </summary>
            <param name="guild">The guild.</param>
            <param name="integration">The integration.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildIntegrationsUpdateEventAsync(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the guild integrations update event.
            </summary>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildIntegrationDeleteEventAsync(DisCatSharp.Entities.DiscordGuild,System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Handles the guild integration delete event.
            </summary>
            <param name="guild">The guild.</param>
            <param name="integrationId">The integration id.</param>
            <param name="applicationId">The optional application id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildMemberAddEventAsync(DisCatSharp.Net.Abstractions.TransportMember,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the guild member add event.
            </summary>
            <param name="member">The transport member.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildMemberRemoveEventAsync(DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the guild member remove event.
            </summary>
            <param name="user">The transport user.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildMemberUpdateEventAsync(DisCatSharp.Net.Abstractions.TransportMember,DisCatSharp.Entities.DiscordGuild,System.Collections.Generic.IEnumerable{System.UInt64},System.String,System.Nullable{System.Boolean})">
            <summary>
            Handles the guild member update event.
            </summary>
            <param name="member">The transport member.</param>
            <param name="guild">The guild.</param>
            <param name="roles">The roles.</param>
            <param name="nick">The nick.</param>
            <param name="pending">Whether the member is pending.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.TimeoutTimer(System.Object)">
            <summary>
            Handles timeout events.
            </summary>
            <param name="state">Internally used as uid for the timer data.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildMembersChunkEventAsync(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Handles the guild members chunk event.
            </summary>
            <param name="dat">The raw chunk data.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildRoleCreateEventAsync(DisCatSharp.Entities.DiscordRole,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the guild role create event.
            </summary>
            <param name="role">The role.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildRoleUpdateEventAsync(DisCatSharp.Entities.DiscordRole,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the guild role update event.
            </summary>
            <param name="role">The role.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildRoleDeleteEventAsync(System.UInt64,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the guild role delete event.
            </summary>
            <param name="roleId">The role id.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnInviteCreateEventAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.DiscordInvite)">
            <summary>
            Handles the invite create event.
            </summary>
            <param name="channelId">The channel id.</param>
            <param name="guildId">The guild id.</param>
            <param name="invite">The invite.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnInviteDeleteEventAsync(System.UInt64,System.UInt64,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Handles the invite delete event.
            </summary>
            <param name="channelId">The channel id.</param>
            <param name="guildId">The guild id.</param>
            <param name="dat">The raw invite.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnMessageAckEventAsync(DisCatSharp.Entities.DiscordChannel,System.UInt64)">
            <summary>
            Handles the message acknowledge event.
            </summary>
            <param name="chn">The channel.</param>
            <param name="messageId">The message id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnMessageCreateEventAsync(DisCatSharp.Entities.DiscordMessage,DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Net.Abstractions.TransportMember,DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Net.Abstractions.TransportMember)">
            <summary>
            Handles the message create event.
            </summary>
            <param name="message">The message.</param>
            <param name="author">The transport user (author).</param>
            <param name="member">The transport member.</param>
            <param name="referenceAuthor">The reference transport user (author).</param>
            <param name="referenceMember">The reference transport member.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnMessageUpdateEventAsync(DisCatSharp.Entities.DiscordMessage,DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Net.Abstractions.TransportMember,DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Net.Abstractions.TransportMember)">
            <summary>
            Handles the message update event.
            </summary>
            <param name="message">The message.</param>
            <param name="author">The transport user (author).</param>
            <param name="member">The transport member.</param>
            <param name="referenceAuthor">The reference transport user (author).</param>
            <param name="referenceMember">The reference transport member.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnMessageDeleteEventAsync(System.UInt64,System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Handles the message delete event.
            </summary>
            <param name="messageId">The message id.</param>
            <param name="channelId">The channel id.</param>
            <param name="guildId">The optional guild id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnMessageBulkDeleteEventAsync(System.UInt64[],System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Handles the message bulk delete event.
            </summary>
            <param name="messageIds">The message ids.</param>
            <param name="channelId">The channel id.</param>
            <param name="guildId">The optional guild id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnMessageReactionAddAsync(System.UInt64,System.UInt64,System.UInt64,System.Nullable{System.UInt64},DisCatSharp.Net.Abstractions.TransportMember,DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Handles the message reaction add event.
            </summary>
            <param name="userId">The user id.</param>
            <param name="messageId">The message id.</param>
            <param name="channelId">The channel id.</param>
            <param name="guildId">The optional guild id.</param>
            <param name="mbr">The transport member.</param>
            <param name="emoji">The emoji.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnMessageReactionRemoveAsync(System.UInt64,System.UInt64,System.UInt64,System.Nullable{System.UInt64},DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Handles the message reaction remove event.
            </summary>
            <param name="userId">The user id.</param>
            <param name="messageId">The message id.</param>
            <param name="channelId">The channel id.</param>
            <param name="guildId">The guild id.</param>
            <param name="emoji">The emoji.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnMessageReactionRemoveAllAsync(System.UInt64,System.UInt64,System.Nullable{System.UInt64})">
            <summary>
            Handles the message reaction remove event.
            Fired when all message reactions were removed.
            </summary>
            <param name="messageId">The message id.</param>
            <param name="channelId">The channel id.</param>
            <param name="guildId">The optional guild id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnMessageReactionRemoveEmojiAsync(System.UInt64,System.UInt64,System.UInt64,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Handles the message reaction remove event.
            Fired when a emoji got removed.
            </summary>
            <param name="messageId">The message id.</param>
            <param name="channelId">The channel id.</param>
            <param name="guildId">The guild id.</param>
            <param name="dat">The raw discord emoji.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnStageInstanceCreateEventAsync(DisCatSharp.Entities.DiscordStageInstance)">
            <summary>
            Handles the stage instance create event.
            </summary>
            <param name="stage">The created stage instance.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnStageInstanceUpdateEventAsync(DisCatSharp.Entities.DiscordStageInstance)">
            <summary>
            Handles the stage instance update event.
            </summary>
            <param name="stage">The updated stage instance.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnStageInstanceDeleteEventAsync(DisCatSharp.Entities.DiscordStageInstance)">
            <summary>
            Handles the stage instance delete event.
            </summary>
            <param name="stage">The deleted stage instance.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnThreadCreateEventAsync(DisCatSharp.Entities.DiscordThreadChannel)">
            <summary>
            Handles the thread create event.
            </summary>
            <param name="thread">The created thread.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnThreadUpdateEventAsync(DisCatSharp.Entities.DiscordThreadChannel)">
            <summary>
            Handles the thread update event.
            </summary>
            <param name="thread">The updated thread.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnThreadDeleteEventAsync(DisCatSharp.Entities.DiscordThreadChannel)">
            <summary>
            Handles the thread delete event.
            </summary>
            <param name="thread">The deleted thread.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnThreadListSyncEventAsync(DisCatSharp.Entities.DiscordGuild,System.Collections.Generic.IReadOnlyList{System.Nullable{System.UInt64}},System.Collections.Generic.IReadOnlyList{DisCatSharp.Entities.DiscordThreadChannel},System.Collections.Generic.IReadOnlyList{DisCatSharp.Entities.DiscordThreadChannelMember})">
            <summary>
            Handles the thread list sync event.
            </summary>
            <param name="guild">The synced guild.</param>
            <param name="channelIds">The synced channel ids.</param>
            <param name="threads">The synced threads.</param>
            <param name="members">The synced thread members.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnThreadMemberUpdateEventAsync(DisCatSharp.Entities.DiscordThreadChannelMember)">
            <summary>
            Handles the thread member update event.
            </summary>
            <param name="member">The updated member.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnThreadMembersUpdateEventAsync(DisCatSharp.Entities.DiscordGuild,System.UInt64,Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Handles the thread members update event.
            </summary>
            <param name="guild">The target guild.</param>
            <param name="threadId">The thread id of the target thread this update belongs to.</param>
            <param name="membersAdded">The added members.</param>
            <param name="membersRemoved">The ids of the removed members.</param>
            <param name="memberCount">The new member count.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnEmbeddedActivityUpdateAsync(Newtonsoft.Json.Linq.JObject,DisCatSharp.Entities.DiscordGuild,System.UInt64,Newtonsoft.Json.Linq.JArray,System.UInt64)">
            <summary>
            Dispatches the <see cref="E:DisCatSharp.DiscordClient.EmbeddedActivityUpdated"/> event.
            </summary>
            <param name="trActivity">The transport activity.</param>
            <param name="guild">The guild.</param>
            <param name="channelId">The channel id.</param>
            <param name="jUsers">The users in the activity.</param>
            <param name="appId">The application id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnPresenceUpdateEventAsync(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Handles the presence update event.
            </summary>
            <param name="rawPresence">The raw presence.</param>
            <param name="rawUser">The raw user.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnUserSettingsUpdateEventAsync(DisCatSharp.Net.Abstractions.TransportUser)">
            <summary>
            Handles the user settings update event.
            </summary>
            <param name="user">The transport user.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnUserUpdateEventAsync(DisCatSharp.Net.Abstractions.TransportUser)">
            <summary>
            Handles the user update event.
            </summary>
            <param name="user">The transport user.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnVoiceStateUpdateEventAsync(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Handles the voice state update event.
            </summary>
            <param name="raw">The raw voice state update object.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnVoiceServerUpdateEventAsync(System.String,System.String,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the voice server update event.
            </summary>
            <param name="endpoint">The new endpoint.</param>
            <param name="token">The new token.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnApplicationCommandCreateAsync(DisCatSharp.Entities.DiscordApplicationCommand,System.Nullable{System.UInt64})">
            <summary>
            Handles the application command create event.
            </summary>
            <param name="cmd">The application command.</param>
            <param name="guildId">The optional guild id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnApplicationCommandUpdateAsync(DisCatSharp.Entities.DiscordApplicationCommand,System.Nullable{System.UInt64})">
            <summary>
            Handles the application command update event.
            </summary>
            <param name="cmd">The application command.</param>
            <param name="guildId">The optional guild id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnApplicationCommandDeleteAsync(DisCatSharp.Entities.DiscordApplicationCommand,System.Nullable{System.UInt64})">
            <summary>
            Handles the application command delete event.
            </summary>
            <param name="cmd">The application command.</param>
            <param name="guildId">The optional guild id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnGuildApplicationCommandCountsUpdateAsync(System.Int32,System.Int32,System.Int32,System.UInt64)">
            <summary>
            Handles the guild application command counts update event.
            </summary>
            <param name="chatInputCommandCount">The <see cref="F:DisCatSharp.Enums.ApplicationCommandType.ChatInput"/> count.</param>
            <param name="userContextMenuCommandCount">The <see cref="F:DisCatSharp.Enums.ApplicationCommandType.User"/> count.</param>
            <param name="messageContextMenuCount">The <see cref="F:DisCatSharp.Enums.ApplicationCommandType.Message"/> count.</param>
            <param name="guildId">The guild id.</param>
            <returns>Count of application commands.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnApplicationCommandPermissionsUpdateAsync(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommandPermission},System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Handles the application command permissions update event.
            </summary>
            <param name="perms">The new permissions.</param>
            <param name="channelId">The command id.</param>
            <param name="guildId">The guild id.</param>
            <param name="applicationId">The application id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnInteractionCreateAsync(System.Nullable{System.UInt64},System.UInt64,DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Net.Abstractions.TransportMember,DisCatSharp.Entities.DiscordInteraction)">
            <summary>
            Handles the interaction create event.
            </summary>
            <param name="guildId">The guild id.</param>
            <param name="channelId">The channel id.</param>
            <param name="user">The transport user.</param>
            <param name="member">The transport member.</param>
            <param name="interaction">The interaction.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnTypingStartEventAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.DiscordChannel,System.Nullable{System.UInt64},System.DateTimeOffset,DisCatSharp.Net.Abstractions.TransportMember)">
            <summary>
            Handles the typing start event.
            </summary>
            <param name="userId">The user id.</param>
            <param name="channelId">The channel id.</param>
            <param name="channel">The channel.</param>
            <param name="guildId">The optional guild id.</param>
            <param name="started">The time when the user started typing.</param>
            <param name="mbr">The transport member.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnWebhooksUpdateAsync(DisCatSharp.Entities.DiscordChannel,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Handles the webhooks update.
            </summary>
            <param name="channel">The channel.</param>
            <param name="guild">The guild.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnUnknownEventAsync(DisCatSharp.Net.Abstractions.GatewayPayload)">
            <summary>
            Handles all unknown events.
            </summary>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.RegisterEventHandler(System.Object,System.Boolean)">
            <summary>
            Registers all methods annotated with <see cref="T:DisCatSharp.EventAttribute"/> from the given object.
            </summary>
            <param name="handler">The event handler object.</param>
            <param name="registerStatic">Whether to consider static methods.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.RegisterStaticEventHandler(System.Type)">
            <summary>
            Registers all static methods annotated with <see cref="T:DisCatSharp.EventAttribute"/> from the given type.
            </summary>
            <param name="t">The static event handler type.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.RegisterStaticEventHandler``1">
            <see cref="M:DisCatSharp.DiscordClient.RegisterStaticEventHandler(System.Type)"/>
        </member>
        <member name="M:DisCatSharp.DiscordClient.RegisterEventHandler(System.Type)">
            <summary>
            <para>If abstract, registers all static methods of the type.</para>
            <para>If non-abstract, tries to instantiate it, optionally using the provided <see cref="P:DisCatSharp.DiscordConfiguration.ServiceProvider"/>
            and registers all instance and static methods.</para>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.RegisterEventHandler``1">
            <see cref="M:DisCatSharp.DiscordClient.RegisterEventHandler(System.Type)"/>
        </member>
        <member name="M:DisCatSharp.DiscordClient.RegisterEventHandlers(System.Reflection.Assembly)">
            <summary>
            Registers all types associated with the provided assembly that have the <see cref="T:System.EventHandler"/> attribute.
            </summary>
            <param name="assembly">The assembly from which to get the types.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UnregisterEventHandler(System.Object,System.Boolean)">
            <summary>
            Perfectly mirrors <see cref="M:DisCatSharp.DiscordClient.RegisterEventHandler(System.Object,System.Boolean)"/>.
            </summary>
            <param name="handler"></param>
            <param name="wasRegisteredWithStatic"></param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UnregisterStaticEventHandler(System.Type)">
            <summary>
            Perfectly mirrors <see cref="M:DisCatSharp.DiscordClient.RegisterStaticEventHandler(System.Type)"/>.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UnregisterStaticEventHandler``1">
            <summary>
            Perfectly mirrors <see cref="M:DisCatSharp.DiscordClient.RegisterStaticEventHandler``1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UnregisterEventHandler(System.Type)">
            <summary>
            Perfectly mirrors <see cref="M:DisCatSharp.DiscordClient.RegisterEventHandler(System.Type)"/>.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UnregisterEventHandler``1">
            <summary>
            Perfectly mirrors <see cref="M:DisCatSharp.DiscordClient.RegisterEventHandler``1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DisCatSharp.DiscordClient.UnregisterEventHandlers(System.Reflection.Assembly)">
            <summary>
            Perfectly mirrors <see cref="M:DisCatSharp.DiscordClient.RegisterEventHandlers(System.Reflection.Assembly)"/>.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:DisCatSharp.DiscordClient.EventExecutionLimit">
            <summary>
            Gets the event execution limit.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.SocketErrored">
            <summary>
            Fired whenever a WebSocket error occurs within the client.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.SocketOpened">
            <summary>
            Fired whenever WebSocket connection is established.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.SocketClosed">
            <summary>
            Fired whenever WebSocket connection is terminated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.Ready">
            <summary>
            Fired when the client enters ready state.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.Resumed">
            <summary>
            Fired whenever a session is resumed.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.Heartbeated">
            <summary>
            Fired on received heartbeat ACK.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ChannelCreated">
            <summary>
            Fired when a new channel is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ChannelUpdated">
            <summary>
            Fired when a channel is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ChannelDeleted">
            <summary>
            Fired when a channel is deleted
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.DmChannelDeleted">
            <summary>
            Fired when a dm channel is deleted
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.DirectMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ChannelPinsUpdated">
            <summary>
            Fired whenever a channel's pinned message list is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildCreated">
            <summary>
            Fired when the user joins a new guild.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
            <remarks>[alias="GuildJoined"][alias="JoinedGuild"]</remarks>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildAvailable">
            <summary>
            Fired when a guild is becoming available.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildUpdated">
            <summary>
            Fired when a guild is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildDeleted">
            <summary>
            Fired when the user leaves or is removed from a guild.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildUnavailable">
            <summary>
            Fired when a guild becomes unavailable.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildDownloadCompleted">
            <summary>
            Fired when all guilds finish streaming from Discord.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildEmojisUpdated">
            <summary>
            Fired when a guilds emojis get updated
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildEmojisAndStickers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildStickersUpdated">
            <summary>
            Fired when a guilds stickers get updated
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildEmojisAndStickers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildIntegrationsUpdated">
            <summary>
            Fired when a guild integration is updated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildBanAdded">
            <summary>
            Fired when a guild ban gets added
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildBanRemoved">
            <summary>
            Fired when a guild ban gets removed
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildMemberTimeoutAdded">
            <summary>
            Fired when a guild member timeout gets added.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildMemberTimeoutChanged">
            <summary>
            Fired when a guild member timeout gets changed.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildMemberTimeoutRemoved">
            <summary>
            Fired when a guild member timeout gets removed.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildScheduledEventCreated">
            <summary>
            Fired when a scheduled Event is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildScheduledEventUpdated">
            <summary>
            Fired when a scheduled Event is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildScheduledEventDeleted">
            <summary>
            Fired when a scheduled Event is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildScheduledEventUserAdded">
            <summary>
            Fired when a user subscribes to a scheduled event.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildScheduledEventUserRemoved">
            <summary>
            Fired when a user unsubscribes from a scheduled event.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildIntegrationCreated">
            <summary>
            Fired when a guild integration is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildIntegrations"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildIntegrationUpdated">
            <summary>
            Fired when a guild integration is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildIntegrations"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildIntegrationDeleted">
            <summary>
            Fired when a guild integration is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildIntegrations"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildMemberAdded">
            <summary>
            Fired when a new user joins a guild.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildMemberRemoved">
            <summary>
            Fired when a user is removed from a guild (leave/kick/ban).
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildMemberUpdated">
            <summary>
            Fired when a guild member is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildMembersChunked">
            <summary>
            Fired in response to Gateway Request Guild Members.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildRoleCreated">
            <summary>
            Fired when a guild role is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildRoleUpdated">
            <summary>
            Fired when a guild role is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildRoleDeleted">
            <summary>
            Fired when a guild role is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.InviteCreated">
            <summary>
            Fired when an invite is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildInvites"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.InviteDeleted">
            <summary>
            Fired when an invite is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildInvites"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.MessageCreated">
            <summary>
            Fired when a message is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.MessageAcknowledged">
            <summary>
            Fired when message is acknowledged by the user.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.MessageUpdated">
            <summary>
            Fired when a message is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.MessageDeleted">
            <summary>
            Fired when a message is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.MessagesBulkDeleted">
            <summary>
            Fired when multiple messages are deleted at once.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.MessageReactionAdded">
            <summary>
            Fired when a reaction gets added to a message.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.MessageReactionRemoved">
            <summary>
            Fired when a reaction gets removed from a message.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.MessageReactionsCleared">
            <summary>
            Fired when all reactions get removed from a message.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.MessageReactionRemovedEmoji">
            <summary>
            Fired when all reactions of a specific reaction are removed from a message.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.EmbeddedActivityUpdated">
            <summary>
            Fired when a embedded activity has been updated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.PresenceUpdated">
            <summary>
            Fired when a presence has been updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.UserSettingsUpdated">
            <summary>
            Fired when the current user updates their settings.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.UserUpdated">
            <summary>
            Fired when properties about the current user change.
            </summary>
            <remarks>
            NB: This event only applies for changes to the <b>current user</b>, the client that is connected to Discord.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </remarks>
        </member>
        <member name="E:DisCatSharp.DiscordClient.StageInstanceCreated">
            <summary>
            Fired when a Stage Instance is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.StageInstanceUpdated">
            <summary>
            Fired when a Stage Instance is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.StageInstanceDeleted">
            <summary>
            Fired when a Stage Instance is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ThreadCreated">
            <summary>
            Fired when a thread is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ThreadUpdated">
            <summary>
            Fired when a thread is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ThreadDeleted">
            <summary>
            Fired when a thread is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ThreadListSynced">
            <summary>
            Fired when a thread member is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ThreadMemberUpdated">
            <summary>
            Fired when a thread member is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ThreadMembersUpdated">
            <summary>
            Fired when the thread members are updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> or <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.VoiceStateUpdated">
            <summary>
            Fired when someone joins/leaves/moves voice channels.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildVoiceStates"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.VoiceServerUpdated">
            <summary>
            Fired when a guild's voice server is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildVoiceStates"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ApplicationCommandCreated">
            <summary>
            Fired when a new application command is registered.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ApplicationCommandUpdated">
            <summary>
            Fired when an application command is updated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ApplicationCommandDeleted">
            <summary>
            Fired when an application command is deleted.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.GuildApplicationCommandCountUpdated">
            <summary>
            Fired when a new application command is registered.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ContextMenuInteractionCreated">
            <summary>
            Fired when a user uses a context menu.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ApplicationCommandPermissionsUpdated">
            <summary>
            Fired when application command permissions gets updated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.InteractionCreated">
            <summary>
            Fired when an interaction is invoked.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ComponentInteractionCreated">
            <summary>
            Fired when a component is invoked.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.TypingStarted">
            <summary>
            Fired when a user starts typing in a channel.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.UnknownEvent">
            <summary>
            Fired when an unknown event gets received.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.WebhooksUpdated">
            <summary>
            Fired whenever webhooks update.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.ClientErrored">
            <summary>
            Fired whenever an error occurs within an event handler.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.EventErrorHandler``2(DisCatSharp.Common.Utilities.AsyncEvent{``0,``1},System.Exception,DisCatSharp.Common.Utilities.AsyncEventHandler{``0,``1},``0,``1)">
            <summary>
            Handles event errors.
            </summary>
            <param name="asyncEvent">The event.</param>
            <param name="ex">The exception.</param>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="E:DisCatSharp.DiscordClient.RateLimitHit">
            <summary>
            Fired when a ratelimit was hit.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.Zombied">
            <summary>
            Fired on heartbeat attempt cancellation due to too many failed heartbeats.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordClient.PayloadReceived">
            <summary>
            Fired when a gateway payload is received.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.Goof``2(DisCatSharp.Common.Utilities.AsyncEvent{``0,``1},System.Exception,DisCatSharp.Common.Utilities.AsyncEventHandler{``0,``1},``0,``1)">
            <summary>
            Handles event handler exceptions.
            </summary>
            <param name="asyncEvent">The event.</param>
            <param name="ex">The exception.</param>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="P:DisCatSharp.DiscordClient.s_socketLocks">
            <summary>
            Gets the socket locks.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordClient._sessionLock">
            <summary>
            Gets the session lock.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.InternalReconnectAsync(System.Boolean,System.Int32,System.String)">
            <summary>
            Reconnects the websocket client.
            </summary>
            <param name="startNewSession">Whether to start a new session.</param>
            <param name="code">The reconnect code.</param>
            <param name="message">The reconnect message.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.InternalConnectAsync">
            <summary>
            Connects the websocket client.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.HandleSocketMessageAsync(System.String)">
            <summary>
            Handles the socket message.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnHeartbeatAsync(System.Int64)">
            <summary>
            Handles the heartbeat.
            </summary>
            <param name="seq">The sequence.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnReconnectAsync">
            <summary>
            Handles the reconnect event.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnInvalidateSessionAsync(System.Boolean)">
            <summary>
            Handles the invalidate session event
            </summary>
            <param name="data">Unknown. Please fill documentation.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnHelloAsync(DisCatSharp.Net.Abstractions.GatewayHello)">
            <summary>
            Handles the hello event.
            </summary>
            <param name="hello">The gateway hello payload.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.OnHeartbeatAckAsync">
            <summary>
            Handles the heartbeat acknowledge event.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.HeartbeatLoopAsync">
            <summary>
            Handles the heartbeat loop.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.InternalUpdateStatusAsync(DisCatSharp.Entities.DiscordActivity,System.Nullable{DisCatSharp.Entities.UserStatus},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates the status.
            </summary>
            <param name="activity">The activity.</param>
            <param name="userStatus">The optional user status.</param>
            <param name="idleSince">Since when is the client performing the specified activity.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.SendHeartbeatAsync(System.Int64)">
            <summary>
            Sends the heartbeat.
            </summary>
            <param name="seq">The sequenze.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.SendIdentifyAsync(DisCatSharp.Net.Abstractions.StatusUpdate)">
            <summary>
            Sends the identify payload.
            </summary>
            <param name="status">The status update payload.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.SendResumeAsync">
            <summary>
            Sends the resume payload.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordClient.InternalUpdateGatewayAsync">
            <summary>
            Internals the update gateway async.
            </summary>
            <returns>A Task.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordClient.WsSendAsync(System.String)">
            <summary>
            Sends a websocket message.
            </summary>
            <param name="payload">The payload to send.</param>
        </member>
        <member name="M:DisCatSharp.DiscordClient.GetSocketLock">
            <summary>
            Gets the socket lock.
            </summary>
            <returns>The added socket lock.</returns>
        </member>
        <member name="T:DisCatSharp.DiscordShardedClient">
            <summary>
            A Discord client that shards automatically.
            </summary>
            <summary>
            Represents a discord sharded client.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordShardedClient.Logger">
            <summary>
            Gets the logger for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordShardedClient.ShardClients">
            <summary>
            Gets all client shards.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordShardedClient.GatewayInfo">
            <summary>
            Gets the gateway info for the client's session.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordShardedClient.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordShardedClient.CurrentApplication">
            <summary>
            Gets the current application.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordShardedClient.VoiceRegions">
            <summary>
            Gets the list of available voice regions. Note that this property will not contain VIP voice regions.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordShardedClient._configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordShardedClient._internalVoiceRegions">
            <summary>
            Gets the list of available voice regions. This property is meant as a way to modify <see cref="P:DisCatSharp.DiscordShardedClient.VoiceRegions"/>.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordShardedClient._shards">
            <summary>
            Gets a list of shards.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordShardedClient._voiceRegionsLazy">
            <summary>
            Gets a lazy list of voice regions.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordShardedClient._isStarted">
            <summary>
            Whether the shard client is started.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordShardedClient._manuallySharding">
            <summary>
            Whether manual sharding is enabled.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.#ctor(DisCatSharp.DiscordConfiguration)">
            <summary>
            Initializes a new auto-sharding Discord client.
            </summary>
            <param name="config">The configuration to use.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.StartAsync">
            <summary>
            Initializes and connects all shards.
            </summary>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.StopAsync">
            <summary>
            Disconnects and disposes all shards.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.GetShard(System.UInt64)">
            <summary>
            Gets a shard from a guild id.
            <para>
                If automatically sharding, this will use the <see cref="M:DisCatSharp.Utilities.GetShardId(System.UInt64,System.Int32)"/> method.
                Otherwise if manually sharding, it will instead iterate through each shard's guild caches.
            </para>
            </summary>
            <param name="guildId">The guild ID for the shard.</param>
            <returns>The found <see cref="T:DisCatSharp.DiscordClient"/> shard. Otherwise null if the shard was not found for the guild id.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.GetShard(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Gets a shard from a guild.
            <para>
                If automatically sharding, this will use the <see cref="M:DisCatSharp.Utilities.GetShardId(System.UInt64,System.Int32)"/> method.
                Otherwise if manually sharding, it will instead iterate through each shard's guild caches.
            </para>
            </summary>
            <param name="guild">The guild for the shard.</param>
            <returns>The found <see cref="T:DisCatSharp.DiscordClient"/> shard. Otherwise null if the shard was not found for the guild.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.UpdateStatusAsync(DisCatSharp.Entities.DiscordActivity,System.Nullable{DisCatSharp.Entities.UserStatus},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates the status on all shards.
            </summary>
            <param name="activity">The activity to set. Defaults to null.</param>
            <param name="userStatus">The optional status to set. Defaults to null.</param>
            <param name="idleSince">Since when is the client performing the specified activity. Defaults to null.</param>
            <returns>Asynchronous operation.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.GetLibraryDevelopmentTeamAsync">
            <summary>
            <see cref="M:DisCatSharp.BaseDiscordClient.GetLibraryDevelopmentTeamAsync"/>
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.InitializeShardsAsync">
            <summary>
            Initializes the shards.
            </summary>
            <returns>The count of initialized shards.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.GetGatewayInfoAsync">
            <summary>
            Gets the gateway info.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordShardedClient._versionString">
            <summary>
            Gets the version string.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordShardedClient._botLibrary">
            <summary>
            Gets the name of the used bot library.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.ConnectShardAsync(System.Int32)">
            <summary>
            Connects a shard.
            </summary>
            <param name="i">The shard id.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.InternalStopAsync(System.Boolean)">
            <summary>
            Stops all shards.
            </summary>
            <param name="enableLogger">Whether to enable the logger.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.InternalSetup">
            <summary>
            Sets the shard client up internally..
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.HookEventHandlers(DisCatSharp.DiscordClient)">
            <summary>
            Hooks the event handlers.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.UnhookEventHandlers(DisCatSharp.DiscordClient)">
            <summary>
            Unhooks the event handlers.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.GetShardIdFromGuilds(System.UInt64)">
            <summary>
            Gets the shard id from guilds.
            </summary>
            <param name="id">The id.</param>
            <returns>An int.</returns>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.SocketErrored">
            <summary>
            Fired whenever a WebSocket error occurs within the client.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.SocketOpened">
            <summary>
            Fired whenever WebSocket connection is established.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.SocketClosed">
            <summary>
            Fired whenever WebSocket connection is terminated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.Ready">
            <summary>
            Fired when the client enters ready state.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.Resumed">
            <summary>
            Fired whenever a session is resumed.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.Heartbeated">
            <summary>
            Fired on received heartbeat ACK.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ChannelCreated">
            <summary>
            Fired when a new channel is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ChannelUpdated">
            <summary>
            Fired when a channel is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ChannelDeleted">
            <summary>
            Fired when a channel is deleted
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.DmChannelDeleted">
            <summary>
            Fired when a dm channel is deleted
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.DirectMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ChannelPinsUpdated">
            <summary>
            Fired whenever a channel's pinned message list is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildCreated">
            <summary>
            Fired when the user joins a new guild.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
            <remarks>[alias="GuildJoined"][alias="JoinedGuild"]</remarks>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildAvailable">
            <summary>
            Fired when a guild is becoming available.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildUpdated">
            <summary>
            Fired when a guild is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildDeleted">
            <summary>
            Fired when the user leaves or is removed from a guild.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildUnavailable">
            <summary>
            Fired when a guild becomes unavailable.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildDownloadCompleted">
            <summary>
            Fired when all guilds finish streaming from Discord.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildEmojisUpdated">
            <summary>
            Fired when a guilds emojis get updated
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildEmojisAndStickers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildStickersUpdated">
            <summary>
            Fired when a guilds stickers get updated
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildEmojisAndStickers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildIntegrationsUpdated">
            <summary>
            Fired when a guild integration is updated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildBanAdded">
            <summary>
            Fired when a guild ban gets added
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildBanRemoved">
            <summary>
            Fired when a guild ban gets removed
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildMemberTimeoutAdded">
            <summary>
            Fired when a guild member timeout gets added.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildBans"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildMemberTimeoutChanged">
            <summary>
            Fired when a guild member timeout gets changed.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildMemberTimeoutRemoved">
            <summary>
            Fired when a guild member timeout gets removed.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildScheduledEventCreated">
            <summary>
            Fired when a scheduled event is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildScheduledEventUpdated">
            <summary>
            Fired when a scheduled event is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildScheduledEventDeleted">
            <summary>
            Fired when a scheduled event is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildScheduledEventUserAdded">
            <summary>
            Fired when a user subscribes to a scheduled event.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildScheduledEventUserRemoved">
            <summary>
            Fired when a user unsubscribes from a scheduled event.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildScheduledEvents"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildIntegrationCreated">
            <summary>
            Fired when a guild integration is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildIntegrations"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildIntegrationUpdated">
            <summary>
            Fired when a guild integration is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildIntegrations"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildIntegrationDeleted">
            <summary>
            Fired when a guild integration is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildIntegrations"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildMemberAdded">
            <summary>
            Fired when a new user joins a guild.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildMemberRemoved">
            <summary>
            Fired when a user is removed from a guild (leave/kick/ban).
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildMemberUpdated">
            <summary>
            Fired when a guild member is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildMembersChunked">
            <summary>
            Fired in response to Gateway Request Guild Members.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildRoleCreated">
            <summary>
            Fired when a guild role is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildRoleUpdated">
            <summary>
            Fired when a guild role is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildRoleDeleted">
            <summary>
            Fired when a guild role is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.InviteCreated">
            <summary>
            Fired when an invite is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildInvites"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.InviteDeleted">
            <summary>
            Fired when an invite is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildInvites"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.MessageCreated">
            <summary>
            Fired when a message is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.MessageUpdated">
            <summary>
            Fired when a message is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.MessageDeleted">
            <summary>
            Fired when a message is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.MessagesBulkDeleted">
            <summary>
            Fired when multiple messages are deleted at once.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.MessageReactionAdded">
            <summary>
            Fired when a reaction gets added to a message.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.MessageReactionRemoved">
            <summary>
            Fired when a reaction gets removed from a message.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.MessageReactionsCleared">
            <summary>
            Fired when all reactions get removed from a message.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.MessageReactionRemovedEmoji">
            <summary>
            Fired when all reactions of a specific reaction are removed from a message.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMessageReactions"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.StageInstanceCreated">
            <summary>
            Fired when a Stage Instance is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.StageInstanceUpdated">
            <summary>
            Fired when a Stage Instance is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.StageInstanceDeleted">
            <summary>
            Fired when a Stage Instance is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ThreadCreated">
            <summary>
            Fired when a thread is created.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ThreadUpdated">
            <summary>
            Fired when a thread is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ThreadDeleted">
            <summary>
            Fired when a thread is deleted.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ThreadListSynced">
            <summary>
            Fired when a thread member is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ThreadMemberUpdated">
            <summary>
            Fired when a thread member is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ThreadMembersUpdated">
            <summary>
            Fired when the thread members are updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> or <see cref="F:DisCatSharp.DiscordIntents.Guilds"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.EmbeddedActivityUpdated">
            <summary>
            Fired when a embedded activity has been updated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.PresenceUpdated">
            <summary>
            Fired when a presence has been updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.UserSettingsUpdated">
            <summary>
            Fired when the current user updates their settings.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.UserUpdated">
            <summary>
            Fired when properties about the current user change.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
            <remarks>
            NB: This event only applies for changes to the <b>current user</b>, the client that is connected to Discord.
            </remarks>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.VoiceStateUpdated">
            <summary>
            Fired when someone joins/leaves/moves voice channels.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildVoiceStates"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.VoiceServerUpdated">
            <summary>
            Fired when a guild's voice server is updated.
            For this Event you need the <see cref="F:DisCatSharp.DiscordIntents.GuildVoiceStates"/> intent specified in <seealso cref="P:DisCatSharp.DiscordConfiguration.Intents"/>
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ApplicationCommandCreated">
            <summary>
            Fired when a new application command is registered.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ApplicationCommandUpdated">
            <summary>
            Fired when an application command is updated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ApplicationCommandDeleted">
            <summary>
            Fired when an application command is deleted.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.GuildApplicationCommandCountUpdated">
            <summary>
            Fired when a new application command is registered.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ContextMenuInteractionCreated">
            <summary>
            Fired when a user uses a context menu.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ApplicationCommandPermissionsUpdated">
            <summary>
            Fired when application command permissions gets updated.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.InteractionCreated">
            <summary>
            Fired when an interaction is invoked.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ComponentInteractionCreated">
            <summary>
            Fired when a component is invoked.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.TypingStarted">
            <summary>
            Fired when a user starts typing in a channel.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.UnknownEvent">
            <summary>
            Fired when an unknown event gets received.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.WebhooksUpdated">
            <summary>
            Fired whenever webhooks update.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.ClientErrored">
            <summary>
            Fired whenever an error occurs within an event handler.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.EventErrorHandler``1(DisCatSharp.Common.Utilities.AsyncEvent{DisCatSharp.DiscordClient,``0},System.Exception,DisCatSharp.Common.Utilities.AsyncEventHandler{DisCatSharp.DiscordClient,``0},DisCatSharp.DiscordClient,``0)">
            <summary>
            Handles event errors.
            </summary>
            <param name="asyncEvent">The event.</param>
            <param name="ex">The exception.</param>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.Zombied">
            <summary>
            Fired on heartbeat attempt cancellation due to too many failed heartbeats.
            </summary>
        </member>
        <member name="E:DisCatSharp.DiscordShardedClient.PayloadReceived">
            <summary>
            Fired when a gateway payload is received.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Goof``1(DisCatSharp.Common.Utilities.AsyncEvent{DisCatSharp.DiscordClient,``0},System.Exception,DisCatSharp.Common.Utilities.AsyncEventHandler{DisCatSharp.DiscordClient,``0},DisCatSharp.DiscordClient,``0)">
            <summary>
            Fired when a event handler throws an exception.
            </summary>
            <param name="asyncEvent">The event.</param>
            <param name="ex">The exception.</param>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_Zombied(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ZombiedEventArgs)">
            <summary>
            Handles the client zombied event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildMemberTimeoutRemoved(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs)">
            <summary>
            Handles the guild member timeout removed event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildMemberTimeoutChanged(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs)">
            <summary>
            Handles the guild member timeout changed event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildMemberTimeoutAdded(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs)">
            <summary>
            Handles the guild member timeout added event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_EmbeddedActivityUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.EmbeddedActivityUpdateEventArgs)">
            <summary>
            Handles the embedded activity updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_PayloadReceived(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.PayloadReceivedEventArgs)">
            <summary>
            Handles the payload received event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ClientError(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ClientErrorEventArgs)">
            <summary>
            Handles the client error event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_SocketError(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.SocketErrorEventArgs)">
            <summary>
            Handles the socket error event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_SocketOpened(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.SocketEventArgs)">
            <summary>
            Handles the socket opened event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_SocketClosed(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.SocketCloseEventArgs)">
            <summary>
            Handles the socket closed event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_Ready(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ReadyEventArgs)">
            <summary>
            Handles the ready event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_Resumed(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ReadyEventArgs)">
            <summary>
            Handles the resumed event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ChannelCreated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ChannelCreateEventArgs)">
            <summary>
            Handles the channel created event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ChannelUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ChannelUpdateEventArgs)">
            <summary>
            Handles the channel updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ChannelDeleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ChannelDeleteEventArgs)">
            <summary>
            Handles the channel deleted.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_DMChannelDeleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.DmChannelDeleteEventArgs)">
            <summary>
            Handles the dm channel deleted event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ChannelPinsUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ChannelPinsUpdateEventArgs)">
            <summary>
            Handles the channel pins updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildCreated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildCreateEventArgs)">
            <summary>
            Handles the guild created event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildAvailable(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildCreateEventArgs)">
            <summary>
            Handles the guild available event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildUpdateEventArgs)">
            <summary>
            Handles the guild updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildDeleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildDeleteEventArgs)">
            <summary>
            Handles the guild deleted event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildUnavailable(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildDeleteEventArgs)">
            <summary>
            Handles the guild unavailable event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildDownloadCompleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildDownloadCompletedEventArgs)">
            <summary>
            Handles the guild download completed event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_MessageCreated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.MessageCreateEventArgs)">
            <summary>
            Handles the message created event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_InviteCreated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.InviteCreateEventArgs)">
            <summary>
            Handles the invite created event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_InviteDeleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.InviteDeleteEventArgs)">
            <summary>
            Handles the invite deleted event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_PresenceUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.PresenceUpdateEventArgs)">
            <summary>
            Handles the presence update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildBanAdd(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildBanAddEventArgs)">
            <summary>
            Handles the guild ban add event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildBanRemove(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildBanRemoveEventArgs)">
            <summary>
            Handles the guild ban remove event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildEmojisUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildEmojisUpdateEventArgs)">
            <summary>
            Handles the guild emojis update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildStickersUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildStickersUpdateEventArgs)">
            <summary>
            Handles the guild stickers update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildIntegrationsUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildIntegrationsUpdateEventArgs)">
            <summary>
            Handles the guild integrations update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildMemberAdd(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildMemberAddEventArgs)">
            <summary>
            Handles the guild member add event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildMemberRemove(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildMemberRemoveEventArgs)">
            <summary>
            Handles the guild member remove event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildMemberUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildMemberUpdateEventArgs)">
            <summary>
            Handles the guild member update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildRoleCreate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildRoleCreateEventArgs)">
            <summary>
            Handles the guild role create event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildRoleUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildRoleUpdateEventArgs)">
            <summary>
            Handles the guild role update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildRoleDelete(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildRoleDeleteEventArgs)">
            <summary>
            Handles the guild role delete event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_MessageUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.MessageUpdateEventArgs)">
            <summary>
            Handles the message update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_MessageDelete(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.MessageDeleteEventArgs)">
            <summary>
            Handles the message delete event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_MessageBulkDelete(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.MessageBulkDeleteEventArgs)">
            <summary>
            Handles the message bulk delete event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_TypingStart(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.TypingStartEventArgs)">
            <summary>
            Handles the typing start event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_UserSettingsUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.UserSettingsUpdateEventArgs)">
            <summary>
            Handles the user settings update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_UserUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.UserUpdateEventArgs)">
            <summary>
            Handles the user update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_VoiceStateUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.VoiceStateUpdateEventArgs)">
            <summary>
            Handles the voice state update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_VoiceServerUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.VoiceServerUpdateEventArgs)">
            <summary>
            Handles the voice server update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildMembersChunk(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildMembersChunkEventArgs)">
            <summary>
            Handles the guild members chunk event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_UnknownEvent(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.UnknownEventArgs)">
            <summary>
            Handles the unknown events.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_MessageReactionAdd(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.MessageReactionAddEventArgs)">
            <summary>
            Handles the message reaction add event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_MessageReactionRemove(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.MessageReactionRemoveEventArgs)">
            <summary>
            Handles the message reaction remove event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_MessageReactionRemoveAll(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.MessageReactionsClearEventArgs)">
            <summary>
            Handles the message reaction remove all event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_MessageReactionRemovedEmoji(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.MessageReactionRemoveEmojiEventArgs)">
            <summary>
            Handles the message reaction removed emoji event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_InteractionCreate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.InteractionCreateEventArgs)">
            <summary>
            Handles the interaction create event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ComponentInteractionCreate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs)">
            <summary>
            Handles the component interaction create event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ContextMenuInteractionCreate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ContextMenuInteractionCreateEventArgs)">
            <summary>
            Handles the context menu interaction create event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_WebhooksUpdate(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.WebhooksUpdateEventArgs)">
            <summary>
            Handles the webhooks update event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_HeartBeated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.HeartbeatEventArgs)">
            <summary>
            Handles the heartbeated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ApplicationCommandCreated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ApplicationCommandEventArgs)">
            <summary>
            Handles the application command created event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ApplicationCommandUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ApplicationCommandEventArgs)">
            <summary>
            Handles the application command updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ApplicationCommandDeleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ApplicationCommandEventArgs)">
            <summary>
            Handles the application command deleted event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildApplicationCommandCountUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildApplicationCommandCountEventArgs)">
            <summary>
            Handles the guild application command count updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ApplicationCommandPermissionsUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ApplicationCommandPermissionsUpdateEventArgs)">
            <summary>
            Handles the application command permissions updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildIntegrationCreated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildIntegrationCreateEventArgs)">
            <summary>
            Handles the guild integration created event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildIntegrationUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildIntegrationUpdateEventArgs)">
            <summary>
            Handles the guild integration updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildIntegrationDeleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildIntegrationDeleteEventArgs)">
            <summary>
            Handles the guild integration deleted event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_StageInstanceCreated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.StageInstanceCreateEventArgs)">
            <summary>
            Handles the stage instance created event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_StageInstanceUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.StageInstanceUpdateEventArgs)">
            <summary>
            Handles the stage instance updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_StageInstanceDeleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.StageInstanceDeleteEventArgs)">
            <summary>
            Handles the stage instance deleted event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ThreadCreated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ThreadCreateEventArgs)">
            <summary>
            Handles the thread created event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ThreadUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ThreadUpdateEventArgs)">
            <summary>
            Handles the thread updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ThreadDeleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ThreadDeleteEventArgs)">
            <summary>
            Handles the thread deleted event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ThreadListSynced(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ThreadListSyncEventArgs)">
            <summary>
            Handles the thread list synced event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ThreadMemberUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ThreadMemberUpdateEventArgs)">
            <summary>
            Handles the thread member updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_ThreadMembersUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs)">
            <summary>
            Handles the thread members updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildScheduledEventCreated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildScheduledEventCreateEventArgs)">
            <summary>
            Handles the scheduled event created event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildScheduledEventUpdated(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildScheduledEventUpdateEventArgs)">
            <summary>
            Handles the scheduled event updated event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildScheduledEventDeleted(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildScheduledEventDeleteEventArgs)">
            <summary>
            Handles the scheduled event deleted event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildScheduledEventUserAdded(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildScheduledEventUserAddEventArgs)">
            <summary>
            Handles the scheduled event user added event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DisCatSharp.DiscordShardedClient.Client_GuildScheduledEventUserRemoved(DisCatSharp.DiscordClient,DisCatSharp.EventArgs.GuildScheduledEventUserRemoveEventArgs)">
            <summary>
            Handles the scheduled event user removed event.
            </summary>
            <param name="client">The client.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:DisCatSharp.DiscordWebhookClient">
            <summary>
            Represents a webhook-only client. This client can be used to execute Discord Webhooks.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordWebhookClient.Logger">
            <summary>
            Gets the logger for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordWebhookClient.s_webhookRegex">
            <summary>
            Gets the webhook regex.
            This regex has 2 named capture groups: "id" and "token".
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordWebhookClient.Webhooks">
            <summary>
            Gets the collection of registered webhooks.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordWebhookClient.Username">
            <summary>
            Gets or sets the username for registered webhooks. Note that this only takes effect when broadcasting.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordWebhookClient.AvatarUrl">
            <summary>
            Gets or set the avatar for registered webhooks. Note that this only takes effect when broadcasting.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordWebhookClient.#ctor">
            <summary>
            Creates a new webhook client.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordWebhookClient.#ctor(System.Net.IWebProxy,System.Nullable{System.TimeSpan},System.Boolean,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel,System.String)">
            <summary>
            Creates a new webhook client, with specified HTTP proxy, timeout, and logging settings.
            </summary>
            <param name="proxy">The proxy to use for HTTP connections. Defaults to null.</param>
            <param name="timeout">The optional timeout to use for HTTP requests. Set to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to disable timeouts. Defaults to null.</param>
            <param name="useRelativeRateLimit">Whether to use the system clock for computing rate limit resets. See <see cref="P:DisCatSharp.DiscordConfiguration.UseRelativeRatelimit"/> for more details. Defaults to true.</param>
            <param name="loggerFactory">The optional logging factory to use for this client. Defaults to null.</param>
            <param name="minimumLogLevel">The minimum logging level for messages. Defaults to information.</param>
            <param name="logTimestampFormat">The timestamp format to use for the logger.</param>
        </member>
        <member name="M:DisCatSharp.DiscordWebhookClient.AddWebhookAsync(System.UInt64,System.String)">
            <summary>
            Registers a webhook with this client. This retrieves a webhook based on the ID and token supplied.
            </summary>
            <param name="id">The ID of the webhook to add.</param>
            <param name="token">The token of the webhook to add.</param>
            <returns>The registered webhook.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordWebhookClient.AddWebhookAsync(System.Uri)">
            <summary>
            Registers a webhook with this client. This retrieves a webhook from webhook URL.
            </summary>
            <param name="url">URL of the webhook to retrieve. This URL must contain both ID and token.</param>
            <returns>The registered webhook.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordWebhookClient.AddWebhookAsync(System.UInt64,DisCatSharp.BaseDiscordClient)">
            <summary>
            Registers a webhook with this client. This retrieves a webhook using the supplied full discord client.
            </summary>
            <param name="id">ID of the webhook to register.</param>
            <param name="client">Discord client to which the webhook will belong.</param>
            <returns>The registered webhook.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordWebhookClient.AddWebhook(DisCatSharp.Entities.DiscordWebhook)">
            <summary>
            Registers a webhook with this client. This reuses the supplied webhook object.
            </summary>
            <param name="webhook">Webhook to register.</param>
            <returns>The registered webhook.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordWebhookClient.RemoveWebhook(System.UInt64)">
            <summary>
            Unregisters a webhook with this client.
            </summary>
            <param name="id">ID of the webhook to unregister.</param>
            <returns>The unregistered webhook.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordWebhookClient.GetRegisteredWebhook(System.UInt64)">
            <summary>
            Gets a registered webhook with specified ID.
            </summary>
            <param name="id">ID of the registered webhook to retrieve.</param>
            <returns>The requested webhook.</returns>
        </member>
        <member name="M:DisCatSharp.DiscordWebhookClient.BroadcastMessageAsync(DisCatSharp.Entities.DiscordWebhookBuilder)">
            <summary>
            Broadcasts a message to all registered webhooks.
            </summary>
            <param name="builder">Webhook builder filled with data to send.</param>
            <returns>A dictionary of <see cref="T:DisCatSharp.Entities.DiscordWebhook"/>s and <see cref="T:DisCatSharp.Entities.DiscordMessage"/>s.</returns>
        </member>
        <member name="T:DisCatSharp.DiscordConfiguration">
            <summary>
            Represents configuration for <see cref="T:DisCatSharp.DiscordClient"/> and <see cref="T:DisCatSharp.DiscordShardedClient"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.Token">
            <summary>
            Sets the token used to identify the client.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.TokenType">
            <summary>
            <para>Sets the type of the token used to identify the client.</para>
            <para>Defaults to <see cref="F:DisCatSharp.TokenType.Bot"/>.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.MinimumLogLevel">
            <summary>
            <para>Sets the minimum logging level for messages.</para>
            <para>Typically, the default value of <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information"/> is ok for most uses.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.ApiVersion">
            <summary>
            Overwrites the api version.
            Defaults to 10.
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.UseRelativeRatelimit">
            <summary>
            <para>Sets whether to rely on Discord for NTP (Network Time Protocol) synchronization with the "X-Ratelimit-Reset-After" header.</para>
            <para>If the system clock is unsynced, setting this to true will ensure ratelimits are synced with Discord and reduce the risk of hitting one.</para>
            <para>This should only be set to false if the system clock is synced with NTP.</para>
            <para>Defaults to true.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.LogTimestampFormat">
            <summary>
            <para>Allows you to overwrite the time format used by the internal debug logger.</para>
            <para>Only applicable when <see cref="P:DisCatSharp.DiscordConfiguration.LoggerFactory"/> is set left at default value. Defaults to ISO 8601-like format.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.LargeThreshold">
            <summary>
            <para>Sets the member count threshold at which guilds are considered large.</para>
            <para>Defaults to 250.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.AutoReconnect">
            <summary>
            <para>Sets whether to automatically reconnect in case a connection is lost.</para>
            <para>Defaults to true.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.ShardId">
            <summary>
            <para>Sets the ID of the shard to connect to.</para>
            <para>If not sharding, or sharding automatically, this value should be left with the default value of 0.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.ShardCount">
            <summary>
            <para>Sets the total number of shards the bot is on. If not sharding, this value should be left with a default value of 1.</para>
            <para>If sharding automatically, this value will indicate how many shards to boot. If left default for automatic sharding, the client will determine the shard count automatically.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.GatewayCompressionLevel">
            <summary>
            <para>Sets the level of compression for WebSocket traffic.</para>
            <para>Disabling this option will increase the amount of traffic sent via WebSocket. Setting <see cref="F:DisCatSharp.GatewayCompressionLevel.Payload"/> will enable compression for READY and GUILD_CREATE payloads. Setting <see cref="F:DisCatSharp.GatewayCompressionLevel.Stream"/> will enable compression for the entire WebSocket stream, drastically reducing amount of traffic.</para>
            <para>Defaults to <see cref="F:DisCatSharp.GatewayCompressionLevel.Stream"/>.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.MessageCacheSize">
            <summary>
            <para>Sets the size of the global message cache.</para>
            <para>Setting this to 0 will disable message caching entirely. Defaults to 1024.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.Proxy">
            <summary>
            <para>Sets the proxy to use for HTTP and WebSocket connections to Discord.</para>
            <para>Defaults to null.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.HttpTimeout">
            <summary>
            <para>Sets the timeout for HTTP requests.</para>
            <para>Set to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> to disable timeouts.</para>
            <para>Defaults to 20 seconds.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.ReconnectIndefinitely">
            <summary>
            <para>Defines that the client should attempt to reconnect indefinitely.</para>
            <para>This is typically a very bad idea to set to <c>true</c>, as it will swallow all connection errors.</para>
            <para>Defaults to false.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.AlwaysCacheMembers">
            <summary>
            Sets whether the client should attempt to cache members if exclusively using unprivileged intents.
            <para>
                This will only take effect if there are no <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> or <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/>
                intents specified. Otherwise, this will always be overwritten to true.
            </para>
            <para>Defaults to true.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.Intents">
            <summary>
            <para>Sets the gateway intents for this client.</para>
            <para>If set, the client will only receive events that they specify with intents.</para>
            <para>Defaults to <see cref="F:DisCatSharp.DiscordIntents.AllUnprivileged"/>.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.WebSocketClientFactory">
            <summary>
            <para>Sets the factory method used to create instances of WebSocket clients.</para>
            <para>Use <see cref="M:DisCatSharp.Net.WebSocket.WebSocketClient.CreateNew(System.Net.IWebProxy,System.IServiceProvider)"/> and equivalents on other implementations to switch out client implementations.</para>
            <para>Defaults to <see cref="M:DisCatSharp.Net.WebSocket.WebSocketClient.CreateNew(System.Net.IWebProxy,System.IServiceProvider)"/>.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.UdpClientFactory">
            <summary>
            <para>Sets the factory method used to create instances of UDP clients.</para>
            <para>Use <see cref="M:DisCatSharp.Net.Udp.DcsUdpClient.CreateNew"/> and equivalents on other implementations to switch out client implementations.</para>
            <para>Defaults to <see cref="M:DisCatSharp.Net.Udp.DcsUdpClient.CreateNew"/>.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.LoggerFactory">
            <summary>
            <para>Sets the logger implementation to use.</para>
            <para>To create your own logger, implement the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> instance.</para>
            <para>Defaults to built-in implementation.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.MobileStatus">
            <summary>
            <para>Sets if the bot's status should show the mobile icon.</para>
            <para>Defaults to false.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.UseCanary">
            <summary>
            <para>Whether to use canary. <see cref="P:DisCatSharp.DiscordConfiguration.UsePtb"/> has to be false.</para>
            <para>Defaults to false.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.UsePtb">
            <summary>
            <para>Whether to use ptb. <see cref="P:DisCatSharp.DiscordConfiguration.UseCanary"/> has to be false.</para>
            <para>Defaults to false.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.AutoRefreshChannelCache">
            <summary>
            <para>Refresh full guild channel cache.</para>
            <para>Defaults to false.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.Override">
            <summary>
            <para>Do not use, this is meant for DisCatSharp Devs.</para>
            <para>Defaults to null.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.DiscordConfiguration.ServiceProvider">
            <summary>
            <para>Sets the service provider.</para>
            <para>This allows passing data around without resorting to static members.</para>
            <para>Defaults to an empty service provider.</para>
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordConfiguration.#ctor">
            <summary>
            Creates a new configuration with default values.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordConfiguration.#ctor(System.IServiceProvider)">
            <summary>
            Utilized via Dependency Injection Pipeline
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:DisCatSharp.DiscordConfiguration.#ctor(DisCatSharp.DiscordConfiguration)">
            <summary>
            Creates a clone of another discord configuration.
            </summary>
            <param name="other">Client configuration to clone.</param>
        </member>
        <member name="T:DisCatSharp.EventAttribute">
            <summary>
            Methods marked with this attribute will be registered as event handling methods
            if the associated type / an associated instance is being registered.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventAttribute.#ctor(DisCatSharp.DiscordEvent)">
            <param name="evtn"><para>The name of the event.</para>
            <para>The attributed method's name will be used if null.</para></param>
        </member>
        <member name="T:DisCatSharp.EventHandlerAttribute">
            <summary>
            Classes marked with this attribute will be considered for event handler registration from an assembly.
            </summary>
        </member>
        <member name="T:DisCatSharp.DiscordEvent">
            <summary>
            All events available in <see cref="T:DisCatSharp.DiscordClient"/> for use with <see cref="T:DisCatSharp.EventAttribute"/>.
            </summary>
        </member>
        <member name="T:DisCatSharp.DiscordIntentExtensions">
            <summary>
            Represents a discord intent extensions.
            </summary>
        </member>
        <member name="M:DisCatSharp.DiscordIntentExtensions.HasIntent(DisCatSharp.DiscordIntents,DisCatSharp.DiscordIntents)">
            <summary>
            Calculates whether these intents have a certain intent.
            </summary>
            <param name="intents">The base intents.</param>
            <param name="search">The intents to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.DiscordIntentExtensions.AddIntent(DisCatSharp.DiscordIntents,DisCatSharp.DiscordIntents)">
            <summary>
            Adds an intent to these intents.
            </summary>
            <param name="intents">The base intents.</param>
            <param name="toAdd">The intents to add.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.DiscordIntentExtensions.RemoveIntent(DisCatSharp.DiscordIntents,DisCatSharp.DiscordIntents)">
            <summary>
            Removes an intent from these intents.
            </summary>
            <param name="intents">The base intents.</param>
            <param name="toRemove">The intents to remove.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.DiscordIntentExtensions.HasAllPrivilegedIntents(DisCatSharp.DiscordIntents)">
            <summary>
            Whether it has all privileged intents.
            </summary>
            <param name="intents">The intents.</param>
        </member>
        <member name="M:DisCatSharp.DiscordIntentExtensions.HasAllV9PrivilegedIntents(DisCatSharp.DiscordIntents)">
            <summary>
            Whether it has all v9 privileged intents.
            </summary>
            <param name="intents">The intents.</param>
        </member>
        <member name="T:DisCatSharp.DiscordIntents">
            <summary>
            Represents gateway intents to be specified for connecting to Discord.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.Guilds">
            <summary>
            Whether to include general guild events. Note that you may receive empty message contents if you don't have the message content intent.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.GuildCreated"/>, <see cref="E:DisCatSharp.DiscordClient.GuildDeleted"/>, <see cref="E:DisCatSharp.DiscordClient.GuildAvailable"/>, <see cref="E:DisCatSharp.DiscordClient.GuildDownloadCompleted"/>,</para>
            <para><see cref="E:DisCatSharp.DiscordClient.GuildRoleCreated"/>, <see cref="E:DisCatSharp.DiscordClient.GuildRoleUpdated"/>, <see cref="E:DisCatSharp.DiscordClient.GuildRoleDeleted"/>,</para>
            <para><see cref="E:DisCatSharp.DiscordClient.ChannelCreated"/>, <see cref="E:DisCatSharp.DiscordClient.ChannelUpdated"/>, <see cref="E:DisCatSharp.DiscordClient.ChannelDeleted"/>, <see cref="E:DisCatSharp.DiscordClient.ChannelPinsUpdated"/>,</para>
            <para><see cref="E:DisCatSharp.DiscordClient.StageInstanceCreated"/>, <see cref="E:DisCatSharp.DiscordClient.StageInstanceUpdated"/>, <see cref="E:DisCatSharp.DiscordClient.StageInstanceDeleted"/>,</para>
            <para><see cref="E:DisCatSharp.DiscordClient.ThreadCreated"/>, <see cref="E:DisCatSharp.DiscordClient.ThreadUpdated"/>, <see cref="E:DisCatSharp.DiscordClient.ThreadDeleted"/>,</para>
            <para><see cref="E:DisCatSharp.DiscordClient.ThreadListSynced"/>, <see cref="E:DisCatSharp.DiscordClient.ThreadMemberUpdated"/> and <see cref="E:DisCatSharp.DiscordClient.ThreadMembersUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildMembers">
            <summary>
            Whether to include guild member events.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.GuildMemberAdded"/>, <see cref="E:DisCatSharp.DiscordClient.GuildMemberUpdated"/>, <see cref="E:DisCatSharp.DiscordClient.GuildMemberRemoved"/> and <see cref="E:DisCatSharp.DiscordClient.ThreadMembersUpdated"/>.</para>
            <para>This is a privileged intent, and must be enabled on the bot's developer page.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildBans">
            <summary>
            Whether to include guild ban events.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.GuildBanAdded"/> and <see cref="E:DisCatSharp.DiscordClient.GuildBanRemoved"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildEmojisAndStickers">
            <summary>
            Whether to include guild emoji and sticker events.
            <para>This includes <see cref="E:DisCatSharp.DiscordClient.GuildEmojisUpdated"/> and <see cref="E:DisCatSharp.DiscordClient.GuildStickersUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildIntegrations">
            <summary>
            Whether to include guild integration events.
            <para>This includes <see cref="E:DisCatSharp.DiscordClient.GuildIntegrationsUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildWebhooks">
            <summary>
            Whether to include guild webhook events.
            <para>This includes <see cref="E:DisCatSharp.DiscordClient.WebhooksUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildInvites">
            <summary>
            Whether to include guild invite events.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.InviteCreated"/> and <see cref="E:DisCatSharp.DiscordClient.InviteDeleted"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildVoiceStates">
            <summary>
            Whether to include guild voice state events.
            <para>This includes <see cref="E:DisCatSharp.DiscordClient.VoiceStateUpdated"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildPresences">
            <summary>
            Whether to include guild presence events.
            <para>This includes <see cref="E:DisCatSharp.DiscordClient.PresenceUpdated"/>.</para>
            <para>This is a privileged intent, and must be enabled on the bot's developer page.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildMessages">
            <summary>
            Whether to include guild message events. Note that you may receive empty contents if you don't have the message content intent.
            You can enable it in the developer portal. If you have a verified bot, you might need to apply for the intent.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.MessageCreated"/>, <see cref="E:DisCatSharp.DiscordClient.MessageUpdated"/>, and <see cref="E:DisCatSharp.DiscordClient.MessageDeleted"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildMessageReactions">
            <summary>
            Whether to include guild reaction events.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.MessageReactionAdded"/>, <see cref="E:DisCatSharp.DiscordClient.MessageReactionRemoved"/>, <see cref="E:DisCatSharp.DiscordClient.MessageReactionsCleared"/></para>
            <para>and <see cref="E:DisCatSharp.DiscordClient.MessageReactionRemovedEmoji"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildMessageTyping">
            <summary>
            Whether to include guild typing events.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.TypingStarted"/>.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.DirectMessages">
            <summary>
            Whether to include general direct message events.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.ChannelCreated"/>, <see cref="E:DisCatSharp.DiscordClient.MessageCreated"/>, <see cref="E:DisCatSharp.DiscordClient.MessageUpdated"/>,</para>
            <para><see cref="E:DisCatSharp.DiscordClient.MessageDeleted"/> and <see cref="E:DisCatSharp.DiscordClient.ChannelPinsUpdated"/>.</para>
            <para>These events only fire for DM channels.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.DirectMessageReactions">
            <summary>
            Whether to include direct message reaction events.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.MessageReactionAdded"/>, <see cref="E:DisCatSharp.DiscordClient.MessageReactionRemoved"/>,</para>
            <para><see cref="E:DisCatSharp.DiscordClient.MessageReactionsCleared"/> and <see cref="E:DisCatSharp.DiscordClient.MessageReactionRemovedEmoji"/>.</para>
            <para>These events only fire for DM channels.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.DirectMessageTyping">
            <summary>
            Whether to include direct message typing events.
            <para>This includes <see cref="E:DisCatSharp.DiscordClient.TypingStarted"/>.</para>
            <para>This event only fires for DM channels.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.MessageContent">
            <summary>
            Whether to include the content of guild messages.
            See https://support-dev.discord.com/hc/en-us/articles/4404772028055-Message-Content-Privileged-Intent-for-Verified-Bots for more informations.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.GuildScheduledEvents">
            <summary>
            Whether to include guild scheduled event events.
            <para>These include <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventCreated"/>, <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventUpdated"/>, <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventDeleted"/>,</para>
            <para><see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventUserAdded"/> and <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventUserRemoved"/>.</para>
            The events <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventUserAdded"/> and <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventUserRemoved"/> are in experiment and not officially supported.
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.AllUnprivileged">
            <summary>
            Includes all unprivileged intents.
            <para>These are all intents excluding <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> and <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/>.</para>
            <para>The <see cref="F:DisCatSharp.DiscordIntents.GuildMessages"/> will be excluded as of April 2022.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.All">
            <summary>
            Includes all intents.
            <para>The <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/>, <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/> and <see cref="F:DisCatSharp.DiscordIntents.MessageContent"/> intents are privileged, and must be enabled on the bot's developer page.</para>
            <para>The <see cref="F:DisCatSharp.DiscordIntents.MessageContent"/> exist only in v10.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.DiscordIntents.AllV9Less">
            <summary>
            Includes all intents.
            <para>The <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> and <see cref="F:DisCatSharp.DiscordIntents.GuildPresences"/> intents are privileged, and must be enabled on the bot's developer page.</para>
            <para>The <see cref="F:DisCatSharp.DiscordIntents.MessageContent"/> exist only in v10 and is removed here.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordApplication">
            <summary>
            Represents an OAuth2 application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.Summary">
            <summary>
            Gets the application's summary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.Icon">
            <summary>
            Gets the application's icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.IconHash">
            <summary>
            Gets the application's icon hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.RpcOrigins">
            <summary>
            Gets the application's allowed RPC origins.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.Flags">
            <summary>
            Gets the application's flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.Owners">
            <summary>
            Gets the application's owners.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.RequiresCodeGrant">
            <summary>
            Gets whether this application's bot user requires code grant.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.IsPublic">
            <summary>
            Gets whether this bot application is public.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.TermsOfServiceUrl">
            <summary>
            Gets the terms of service url of the application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.PrivacyPolicyUrl">
            <summary>
            Gets the privacy policy url of the application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.TeamName">
            <summary>
            Gets the team name of the application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.CoverImageHash">
            <summary>
            Gets the hash of the application's cover image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.CoverImageUrl">
            <summary>
            Gets this application's cover image URL.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.Team">
            <summary>
            Gets the team which owns this application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.VerifyKey">
            <summary>
            Gets the hex encoded key for verification in interactions and the GameSDK's GetTicket
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.GuildId">
            <summary>
            If this application is a game sold on Discord, this field will be the guild to which it has been linked
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.PrimarySkuId">
            <summary>
            If this application is a game sold on Discord, this field will be the id of the "Game SKU" that is created, if exists
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.Slug">
            <summary>
            If this application is a game sold on Discord, this field will be the URL slug that links to the store page
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordApplication._assets">
            <summary>
            Gets or sets a list of <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.CustomInstallUrl">
            <summary>
            A custom url for the Add To Server button.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.InstallParams">
            <summary>
            Install parameters for adding the application to a guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.Tags">
            <summary>
            The application tags.
            Not used atm.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.IsHook">
            <summary>
            Whether the application is hooked.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplication.Type">
            <summary>
            Gets the application type.
            Mostly null.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordApplication"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplication.GetAvatarUrl(DisCatSharp.ImageFormat,System.UInt16)">
            <summary>
            Gets the application's cover image URL, in requested format and size.
            </summary>
            <param name="fmt">Format of the image to get.</param>
            <param name="size">Maximum size of the cover image. Must be a power of two, minimum 16, maximum 2048.</param>
            <returns>URL of the application's cover image.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplication.GetAssetsAsync">
            <summary>
            Retrieves this application's assets.
            </summary>
            <returns>This application's assets.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplication.GenerateBotOAuth(DisCatSharp.Permissions)">
            <summary>
            Generates an oauth url for the application.
            </summary>
            <param name="permissions">The permissions.</param>
            <returns>OAuth Url</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplication.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordApplication"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplication.Equals(DisCatSharp.Entities.DiscordApplication)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordApplication"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordApplication"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordApplication"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordApplication"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplication.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordApplication"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplication.op_Equality(DisCatSharp.Entities.DiscordApplication,DisCatSharp.Entities.DiscordApplication)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordApplication"/> objects are equal.
            </summary>
            <param name="e1">First application to compare.</param>
            <param name="e2">Second application to compare.</param>
            <returns>Whether the two applications are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplication.op_Inequality(DisCatSharp.Entities.DiscordApplication,DisCatSharp.Entities.DiscordApplication)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordApplication"/> objects are not equal.
            </summary>
            <param name="e1">First application to compare.</param>
            <param name="e2">Second application to compare.</param>
            <returns>Whether the two applications are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAsset">
            <summary>
            Represents an discord asset.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAsset.Id">
            <summary>
            Gets the ID of this asset.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAsset.Url">
            <summary>
            Gets the URL of this asset.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordApplicationAsset">
            <summary>
            Represents an asset for an OAuth2 application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationAsset.Discord">
            <summary>
            Gets the Discord client instance for this asset.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationAsset.Name">
            <summary>
            Gets the asset's name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationAsset.Type">
            <summary>
            Gets the asset's type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationAsset.Application">
            <summary>
            Gets the application this asset belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationAsset.Url">
            <summary>
            Gets the Url of this asset.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationAsset.#ctor(DisCatSharp.Entities.DiscordApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/> class.
            </summary>
            <param name="app">The app.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationAsset.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationAsset.Equals(DisCatSharp.Entities.DiscordApplicationAsset)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationAsset.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordApplication"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordApplication"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationAsset.op_Equality(DisCatSharp.Entities.DiscordApplicationAsset,DisCatSharp.Entities.DiscordApplicationAsset)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/> objects are equal.
            </summary>
            <param name="e1">First application asset to compare.</param>
            <param name="e2">Second application asset to compare.</param>
            <returns>Whether the two application assets not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationAsset.op_Inequality(DisCatSharp.Entities.DiscordApplicationAsset,DisCatSharp.Entities.DiscordApplicationAsset)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordApplicationAsset"/> objects are not equal.
            </summary>
            <param name="e1">First application asset to compare.</param>
            <param name="e2">Second application asset to compare.</param>
            <returns>Whether the two application assets are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordSpotifyAsset">
            <summary>
            Represents an spotify asset.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSpotifyAsset.Url">
            <summary>
            Gets the URL of this asset.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSpotifyAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordSpotifyAsset"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.ApplicationAssetType">
            <summary>
            Determines the type of the asset attached to the application.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ApplicationAssetType.Unknown">
            <summary>
            Unknown type. This indicates something went terribly wrong.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ApplicationAssetType.SmallImage">
            <summary>
            This asset can be used as small image for rich presences.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ApplicationAssetType.LargeImage">
            <summary>
            This asset can be used as large image for rich presences.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordApplicationCommand">
            <summary>
            Represents a command that is registered to an application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.Type">
            <summary>
            Gets the type of this application command.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.ApplicationId">
            <summary>
            Gets the unique ID of this command's application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.Name">
            <summary>
            Gets the name of this command.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.RawNameLocalizations">
            <summary>
            Sets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.NameLocalizations">
            <summary>
            Gets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.Description">
            <summary>
            Gets the description of this command.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.RawDescriptionLocalizations">
            <summary>
            Sets the description localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.DescriptionLocalizations">
            <summary>
            Gets the description localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.Options">
            <summary>
            Gets the potential parameters for this command.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.DefaultMemberPermissions">
            <summary>
            Gets the commands needed permissions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.DmPermission">
            <summary>
            Gets whether the command can be used in direct messages.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommand.Version">
            <summary>
            Gets the version number for this command.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommand.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommandOption},DisCatSharp.Enums.ApplicationCommandType,DisCatSharp.Entities.DiscordApplicationCommandLocalization,DisCatSharp.Entities.DiscordApplicationCommandLocalization,System.Nullable{DisCatSharp.Permissions},System.Nullable{System.Boolean})">
            <summary>
            Creates a new instance of a <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.
            </summary>
            <param name="name">The name of the command.</param>
            <param name="description">The description of the command.</param>
            <param name="options">Optional parameters for this command.</param>
            <param name="type">The type of the command. Defaults to ChatInput.</param>
            <param name="nameLocalizations">The localizations of the command name.</param>
            <param name="descriptionLocalizations">The localizations of the command description.</param>
            <param name="defaultMemberPermissions">The default member permissions.</param>
            <param name="dmPermission">The dm permission.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommand.Equals(DisCatSharp.Entities.DiscordApplicationCommand)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/> object is equal to another object.
            </summary>
            <param name="other">The command to compare to.</param>
            <returns>Whether the command is equal to this <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommand.op_Equality(DisCatSharp.Entities.DiscordApplicationCommand,DisCatSharp.Entities.DiscordApplicationCommand)">
            <summary>
            Determines if two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/> objects are equal.
            </summary>
            <param name="e1">The first command object.</param>
            <param name="e2">The second command object.</param>
            <returns>Whether the two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/> objects are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommand.op_Inequality(DisCatSharp.Entities.DiscordApplicationCommand,DisCatSharp.Entities.DiscordApplicationCommand)">
            <summary>
            Determines if two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/> objects are not equal.
            </summary>
            <param name="e1">The first command object.</param>
            <param name="e2">The second command object.</param>
            <returns>Whether the two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/> objects are not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommand.Equals(System.Object)">
            <summary>
            Determines if a <see cref="T:System.Object"/> is equal to the current <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>Whether the two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/> objects are not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommand.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice">
            <summary>
            Represents an option for a user to select for auto-completion.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice.Name">
            <summary>
            Gets the name of this option which will be presented to the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice.RawNameLocalizations">
            <summary>
            Sets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice.NameLocalizations">
            <summary>
            Gets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice.Value">
            <summary>
            Gets the value of this option.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice.#ctor(System.String,System.Object,DisCatSharp.Entities.DiscordApplicationCommandLocalization)">
            <summary>
            Creates a new instance of <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice"/>.
            </summary>
            <param name="name">The name of this option, which will be presented to the user.</param>
            <param name="nameLocalizations">The localizations of the option name.</param>
            <param name="value">The value of this option.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordApplicationCommandLocalization">
            <summary>
            Represents a application command localization.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandLocalization.Localizations">
            <summary>
            Gets the localization dict.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordApplicationCommandLocalization.ValidLocales">
            <summary>
            Gets valid [locales](xref:application_commands_translations_reference#valid-locales) for Discord.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandLocalization.AddLocalization(System.String,System.String)">
            <summary>
            Adds a localization.
            </summary>
            <param name="locale">The [locale](xref:application_commands_translations_reference#valid-locales) to add.</param>
            <param name="value">The translation to add.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandLocalization.RemoveLocalization(System.String)">
            <summary>
            Removes a localization.
            </summary>
            <param name="locale">The [locale](xref:application_commands_translations_reference#valid-locales) to remove.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandLocalization.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandLocalization"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandLocalization.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandLocalization"/>.
            </summary>
            <param name="localizations">Localizations.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandLocalization.GetKeyValuePairs">
            <summary>
            Gets the KVPs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandLocalization.Validate(System.String)">
            <summary>
            Whether the [locale](xref:application_commands_translations_reference#valid-locales) to be added is valid for Discord.
            </summary>
            <param name="lang">[Locale](xref:application_commands_translations_reference#valid-locales) string.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordApplicationCommandOption">
            <summary>
            Represents a parameter for a <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.Type">
            <summary>
            Gets the type of this command parameter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.Name">
            <summary>
            Gets the name of this command parameter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.RawNameLocalizations">
            <summary>
            Sets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.NameLocalizations">
            <summary>
            Gets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.Description">
            <summary>
            Gets the description of this command parameter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.RawDescriptionLocalizations">
            <summary>
            Sets the description localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.DescriptionLocalizations">
            <summary>
            Gets the description localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.Required">
            <summary>
            Gets whether this command parameter is required.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.Choices">
            <summary>
            Gets the optional choices for this command parameter.
            Not applicable for auto-complete options.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.Options">
            <summary>
            Gets the optional subcommand parameters for this parameter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.ChannelTypes">
            <summary>
            Gets the optional allowed channel types.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.AutoComplete">
            <summary>
            Gets whether this option provides autocompletion.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.MinimumValue">
            <summary>
            Gets the minimum value for this slash command parameter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOption.MaximumValue">
            <summary>
            Gets the maximum value for this slash command parameter.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandOption.#ctor(System.String,System.String,DisCatSharp.ApplicationCommandOptionType,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommandOptionChoice},System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommandOption},System.Collections.Generic.IEnumerable{DisCatSharp.ChannelType},System.Nullable{System.Boolean},System.Object,System.Object,DisCatSharp.Entities.DiscordApplicationCommandLocalization,DisCatSharp.Entities.DiscordApplicationCommandLocalization)">
            <summary>
            Creates a new instance of a <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandOption"/>.
            </summary>
            <param name="name">The name of this parameter.</param>
            <param name="description">The description of the parameter.</param>
            <param name="type">The type of this parameter.</param>
            <param name="required">Whether the parameter is required.</param>
            <param name="choices">The optional choice selection for this parameter.</param>
            <param name="options">The optional subcommands for this parameter.</param>
            <param name="channelTypes">If the option is a channel type, the channels shown will be restricted to these types.</param>
            <param name="autocomplete">Whether this option provides autocompletion.</param>
            <param name="minimumValue">The minimum value for this parameter. Only valid for types <see cref="F:DisCatSharp.ApplicationCommandOptionType.Integer"/> or <see cref="F:DisCatSharp.ApplicationCommandOptionType.Number"/>.</param>
            <param name="maximumValue">The maximum value for this parameter. Only valid for types <see cref="F:DisCatSharp.ApplicationCommandOptionType.Integer"/> or <see cref="F:DisCatSharp.ApplicationCommandOptionType.Number"/>.</param>
            <param name="nameLocalizations">The localizations of the parameter name.</param>
            <param name="descriptionLocalizations">The localizations of the parameter description.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordApplicationCommandOptionChoice">
            <summary>
            Represents a command parameter choice for a <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandOption"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOptionChoice.Name">
            <summary>
            Gets the name of this choice parameter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOptionChoice.RawNameLocalizations">
            <summary>
            Sets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOptionChoice.NameLocalizations">
            <summary>
            Gets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandOptionChoice.Value">
            <summary>
            Gets the value of this choice parameter. This will either be a type of <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Double"/> or <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandOptionChoice.#ctor(System.String,System.Object,DisCatSharp.Entities.DiscordApplicationCommandLocalization)">
            <summary>
            Creates a new instance of a <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandOptionChoice"/>.
            </summary>
            <param name="name">The name of the parameter choice.</param>
            <param name="value">The value of the parameter choice.</param>
            <param name="nameLocalizations">The localizations of the parameter choice name.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordApplicationCommandPermission">
            <summary>
            Represents a application command permission.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandPermission.Id">
            <summary>
            Gets the id of the role or user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandPermission.Type">
            <summary>
            Gets the application command permission type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationCommandPermission.Permission">
            <summary>
            Gets the permission .
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandPermission.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandPermission.#ctor(System.UInt64,DisCatSharp.ApplicationCommandPermissionType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/> class.
            </summary>
            <param name="id">The Id of the role or user for this permission.</param>
            <param name="type">Defines whether the permission effects a user or role.</param>
            <param name="permission">The permission for this command. True allows the subject to use the command, false does not allow the subject to use the command.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandPermission.Equals(DisCatSharp.Entities.DiscordApplicationCommandPermission)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/> object is equal to another object.
            </summary>
            <param name="other">The command to compare to.</param>
            <returns>Whether the command is equal to this <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandPermission.op_Equality(DisCatSharp.Entities.DiscordApplicationCommandPermission,DisCatSharp.Entities.DiscordApplicationCommandPermission)">
            <summary>
            Determines if two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/> objects are equal.
            </summary>
            <param name="e1">The first command object.</param>
            <param name="e2">The second command object.</param>
            <returns>Whether the two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/> objects are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandPermission.op_Inequality(DisCatSharp.Entities.DiscordApplicationCommandPermission,DisCatSharp.Entities.DiscordApplicationCommandPermission)">
            <summary>
            Determines if two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/> objects are not equal.
            </summary>
            <param name="e1">The first command object.</param>
            <param name="e2">The second command object.</param>
            <returns>Whether the two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/> objects are not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandPermission.Equals(System.Object)">
            <summary>
            Determines if a <see cref="T:System.Object"/> is equal to the current <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>Whether the two <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/> objects are not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationCommandPermission.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordApplicationCommandPermission"/>.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordApplicationInstallParams">
            <summary>
            The application install params.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationInstallParams.Scopes">
            <summary>
            Gets the scopes.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordApplicationInstallParams.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordApplicationInstallParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordApplicationInstallParams"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission">
            <summary>
            Represents a guild application command permission.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.Id">
            <summary>
            Gets the id of the command.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.ApplicationId">
            <summary>
            Gets the unique ID of this command's application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.GuildId">
            <summary>
            Gets the guild id this permission applies to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.Guild">
            <summary>
            Gets the guild this permission applies to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.Permissions">
            <summary>
            Gets the permission array.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.Equals(DisCatSharp.Entities.DiscordGuildApplicationCommandPermission)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/> object is equal to another object.
            </summary>
            <param name="other">The command to compare to.</param>
            <returns>Whether the command is equal to this <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.op_Equality(DisCatSharp.Entities.DiscordGuildApplicationCommandPermission,DisCatSharp.Entities.DiscordGuildApplicationCommandPermission)">
            <summary>
            Determines if two <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/> objects are equal.
            </summary>
            <param name="e1">The first command object.</param>
            <param name="e2">The second command object.</param>
            <returns>Whether the two <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/> objects are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.op_Inequality(DisCatSharp.Entities.DiscordGuildApplicationCommandPermission,DisCatSharp.Entities.DiscordGuildApplicationCommandPermission)">
            <summary>
            Determines if two <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/> objects are not equal.
            </summary>
            <param name="e1">The first command object.</param>
            <param name="e2">The second command object.</param>
            <returns>Whether the two <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/> objects are not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.Equals(System.Object)">
            <summary>
            Determines if a <see cref="T:System.Object"/> is equal to the current <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>Whether the two <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/> objects are not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordGuildApplicationCommandPermission"/>.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordChannel">
            <summary>
            Represents a discord channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.GuildId">
            <summary>
            Gets ID of the guild to which this channel belongs.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.ParentId">
            <summary>
            Gets ID of the category that contains this channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Parent">
            <summary>
            Gets the category that contains this channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Name">
            <summary>
            Gets the name of this channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Type">
            <summary>
            Gets the type of this channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.BannerHash">
            <summary>
            Gets this channel's banner hash, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.BannerUrl">
            <summary>
            Gets this channel's banner in url form.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Position">
            <summary>
            Gets the position of this channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Flags">
            <summary>
            Gets the flags of this channel.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetMaxPosition">
            <summary>
            Gets the maximum available position to move the channel to.
            This can contain outdated information.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetMinPosition">
            <summary>
            Gets the minimum available position to move the channel to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.IsPrivate">
            <summary>
            Gets whether this channel is a DM channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.IsCategory">
            <summary>
            Gets whether this channel is a channel category.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.IsStage">
            <summary>
            Gets whether this channel is a stage channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Guild">
            <summary>
            Gets the guild to which this channel belongs.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.PermissionOverwrites">
            <summary>
            Gets a collection of permission overwrites for this channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Topic">
            <summary>
            Gets the channel's topic. This is applicable to text channels only.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.LastMessageId">
            <summary>
            Gets the ID of the last message sent in this channel. This is applicable to text channels only.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Bitrate">
            <summary>
            Gets this channel's bitrate. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.UserLimit">
            <summary>
            Gets this channel's user limit. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.PerUserRateLimit">
            <summary>
            <para>Gets the slow mode delay configured for this channel.</para>
            <para>All bots, as well as users with <see cref="F:DisCatSharp.Permissions.ManageChannels"/> or <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permissions in the channel are exempt from slow mode.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.QualityMode">
            <summary>
            Gets this channel's video quality mode. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.AvailableTags">
            <summary>
            List of available tags for forum posts.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Template">
            <summary>
            Starter template for forum posts.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.LastPinTimestamp">
            <summary>
            Gets when the last pinned message was pinned.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.LastPinTimestampRaw">
            <summary>
            Gets when the last pinned message was pinned as raw string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.DefaultAutoArchiveDuration">
            <summary>
            Gets this channel's default duration for newly created threads, in minutes, to automatically archive the thread after recent activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Mention">
            <summary>
            Gets this channel's mention string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Children">
            <summary>
            Gets this channel's children. This applies only to channel categories.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.Users">
            <summary>
            Gets the list of members currently in the channel (if voice channel), or members who can see the channel (otherwise).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.IsNsfw">
            <summary>
            Gets whether this channel is an NSFW channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.RtcRegionId">
            <summary>
            Gets this channel's region id (if voice channel).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.RtcRegion">
            <summary>
            Gets this channel's region override (if voice channel).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordChannel.UserPermissions">
            <summary>
            Only sent on the resolved channels of interaction responses for application commands.
            Gets the permissions of the user in this channel who invoked the command.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordChannel"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.SendMessageAsync(System.String)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="content">Content of the message to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission if TTS is true and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.SendMessageAsync(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.SendMessageAsync(System.String,DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="embed">Embed to attach to the message.</param>
            <param name="content">Content of the message to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission if TTS is true and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.SendMessageAsync(DisCatSharp.Entities.DiscordMessageBuilder)">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="builder">The builder with all the items to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission TTS is true and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.SendMessageAsync(System.Action{DisCatSharp.Entities.DiscordMessageBuilder})">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="action">The builder with all the items to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission TTS is true and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.DeleteAsync(System.String)">
            <summary>
            Deletes a guild channel
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.CloneAsync(System.String)">
            <summary>
            Clones this channel. This operation will create a channel with identical settings to this one. Note that this will not copy messages.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns>Newly-created channel.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetMessageAsync(System.UInt64)">
            <summary>
            Returns a specific message
            </summary>
            <param name="id">The id of the message</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.ModifyAsync(System.Action{DisCatSharp.Net.Models.ChannelEditModel})">
            <summary>
            Modifies the current channel.
            </summary>
            <param name="action">Action to perform on this channel</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the client does not have the correct <see cref="T:DisCatSharp.PremiumTier"/> for modifying the <see cref="T:DisCatSharp.ThreadAutoArchiveDuration"/>.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.ModifyPositionAsync(System.Int32,System.String)">
            <summary>
            Updates the channel position when it doesn't have a category.
            
            Use <see cref="M:DisCatSharp.Entities.DiscordChannel.ModifyParentAsync(DisCatSharp.Entities.DiscordChannel,System.Nullable{System.Boolean},System.String)"/> for moving to other categories.
            Use <see cref="M:DisCatSharp.Entities.DiscordChannel.RemoveParentAsync(System.String)"/> to move out of a category.
            Use <see cref="M:DisCatSharp.Entities.DiscordChannel.ModifyPositionInCategoryAsync(System.Int32,System.String)"/> for moving within a category.
            </summary>
            <param name="position">Position the channel should be moved to.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.ModifyPositionInCategoryAsync(System.Int32,System.String)">
            <summary>
            Updates the channel position within it's own category.
            
            Use <see cref="M:DisCatSharp.Entities.DiscordChannel.ModifyParentAsync(DisCatSharp.Entities.DiscordChannel,System.Nullable{System.Boolean},System.String)"/> for moving to other categories.
            Use <see cref="M:DisCatSharp.Entities.DiscordChannel.RemoveParentAsync(System.String)"/> to move out of a category.
            Use <see cref="M:DisCatSharp.Entities.DiscordChannel.ModifyPositionAsync(System.Int32,System.String)"/> to move channels outside a category.
            </summary>
            <param name="position">The position.</param>
            <param name="reason">The reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when <paramref name="position"/> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Thrown when function is called on a channel without a parent channel.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.InternalRefreshChannelsAsync">
            <summary>
            Internally refreshes the channel list.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.RefreshPositionsAsync">
            <summary>
            Refreshes the positions.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.ModifyPositionInCategorySmartAsync(System.String,System.Int32,System.String)">
             <summary>
             Updates the channel position within it's own category.
             Valid modes: '+' or 'down' to move a channel down | '-' or 'up' to move a channel up.
            
             Use <see cref="M:DisCatSharp.Entities.DiscordChannel.ModifyParentAsync(DisCatSharp.Entities.DiscordChannel,System.Nullable{System.Boolean},System.String)"/> for moving to other categories.
             Use <see cref="M:DisCatSharp.Entities.DiscordChannel.RemoveParentAsync(System.String)"/> to move out of a category.
             Use <see cref="M:DisCatSharp.Entities.DiscordChannel.ModifyPositionAsync(System.Int32,System.String)"/> to move channels outside a category.
             </summary>
             <param name="mode">The mode. Valid: '+' or 'down' to move a channel down | '-' or 'up' to move a channel up</param>
             <param name="position">The position.</param>
             <param name="reason">The reason.</param>
             <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
             <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
             <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
             <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
             <exception cref="T:System.IndexOutOfRangeException">Thrown when <paramref name="position"/> is out of range.</exception>
             <exception cref="T:System.ArgumentException">Thrown when function is called on a channel without a parent channel, a wrong mode is givven or given position is zero.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.ModifyParentAsync(DisCatSharp.Entities.DiscordChannel,System.Nullable{System.Boolean},System.String)">
            <summary>
            Updates the channel parent, moving the channel to the bottom of the new category.
            </summary>
            <param name="newParent">New parent for channel. Use <see cref="M:DisCatSharp.Entities.DiscordChannel.RemoveParentAsync(System.String)"/> to remove from parent.</param>
            <param name="lockPermissions">Sync permissions with parent. Defaults to null.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.RemoveParentAsync(System.String)">
            <summary>
            Moves the channel out of a category.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetMessagesBeforeAsync(System.UInt64,System.Int32)">
            <summary>
            Returns a list of messages before a certain message.
            <param name="limit">The amount of messages to fetch.</param>
            <param name="before">Message to fetch before from.</param>
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetMessagesAfterAsync(System.UInt64,System.Int32)">
            <summary>
            Returns a list of messages after a certain message.
            <param name="limit">The amount of messages to fetch.</param>
            <param name="after">Message to fetch after from.</param>
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetMessagesAroundAsync(System.UInt64,System.Int32)">
            <summary>
            Returns a list of messages around a certain message.
            <param name="limit">The amount of messages to fetch.</param>
            <param name="around">Message to fetch around from.</param>
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetMessagesAsync(System.Int32)">
            <summary>
            Returns a list of messages from the last message in the channel.
            <param name="limit">The amount of messages to fetch.</param>
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetMessagesInternalAsync(System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Returns a list of messages
            </summary>
            <param name="limit">How many messages should be returned.</param>
            <param name="before">Get messages before snowflake.</param>
            <param name="after">Get messages after snowflake.</param>
            <param name="around">Get messages around snowflake.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordMessage},System.String)">
            <summary>
            Deletes multiple messages if they are less than 14 days old.  If they are older, none of the messages will be deleted and you will receive a <see cref="T:DisCatSharp.Exceptions.BadRequestException"/> error.
            </summary>
            <param name="messages">A collection of messages to delete.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.DeleteMessageAsync(DisCatSharp.Entities.DiscordMessage,System.String)">
            <summary>
            Deletes a message
            </summary>
            <param name="message">The message to be deleted.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetInvitesAsync">
            <summary>
            Returns a list of invite objects
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.CreateInstantInvite"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.CreateInviteAsync(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Nullable{DisCatSharp.TargetType},System.Nullable{DisCatSharp.TargetActivity},System.Nullable{System.UInt64},System.String)">
            <summary>
            Create a new invite object
            </summary>
            <param name="maxAge">Duration of invite in seconds before expiry, or 0 for never.  Defaults to 86400.</param>
            <param name="maxUses">Max number of uses or 0 for unlimited. Defaults to 0</param>
            <param name="temporary">Whether this invite should be temporary. Defaults to false.</param>
            <param name="unique">Whether this invite should be unique. Defaults to false.</param>
            <param name="targetType">The target type. Defaults to null.</param>
            <param name="targetApplication">The target activity. Defaults to null.</param>
            <param name="targetUser">The target user id. Defaults to null.</param>
            <param name="reason">The audit log reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.CreateInstantInvite"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.OpenStageAsync(System.String,System.Boolean,DisCatSharp.StagePrivacyLevel,System.String)">
            <summary>
            Opens a stage.
            </summary>
            <param name="topic">Topic of the stage.</param>
            <param name="sendStartNotification">Whether @everyone should be notified.</param>
            <param name="privacyLevel">Privacy level of the stage (Defaults to <see cref="F:DisCatSharp.StagePrivacyLevel.GuildOnly"/>.</param>
            <param name="reason">Audit log reason.</param>
            <returns>Stage instance</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.ModifyStageAsync(DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{DisCatSharp.StagePrivacyLevel},System.String)">
            <summary>
            Modifies a stage topic.
            </summary>
            <param name="topic">New topic of the stage.</param>
            <param name="privacyLevel">New privacy level of the stage.</param>
            <param name="reason">Audit log reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.CloseStageAsync(System.String)">
            <summary>
            Closes a stage.
            </summary>
            <param name="reason">Audit log reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetStageAsync">
            <summary>
            Gets a stage.
            </summary>
            <returns>The requested stage.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> or <see cref="F:DisCatSharp.Permissions.UseVoice"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.CreateScheduledEventAsync(System.String,System.DateTimeOffset,System.String,DisCatSharp.Entities.Optional{System.IO.Stream},System.String)">
            <summary>
            Creates a scheduled event based on the channel type.
            </summary>
            <param name="name">The name.</param>
            <param name="scheduledStartTime">The scheduled start time.</param>
            <param name="description">The description.</param>
            <param name="coverImage">The cover image.</param>
            <param name="reason">The reason.</param>
            <returns>A scheduled event.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the resource does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.CreateThreadAsync(System.String,DisCatSharp.ThreadAutoArchiveDuration,DisCatSharp.ChannelType,System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a thread.
            Depending on whether it is created inside an <see cref="F:DisCatSharp.ChannelType.News"/> or an <see cref="F:DisCatSharp.ChannelType.Text"/> it is either an <see cref="F:DisCatSharp.ChannelType.NewsThread"/> or an <see cref="F:DisCatSharp.ChannelType.PublicThread"/>.
            Depending on whether the <see cref="T:DisCatSharp.ChannelType"/> is set to <see cref="F:DisCatSharp.ChannelType.PrivateThread"/> it is either an <see cref="F:DisCatSharp.ChannelType.PrivateThread"/> or an <see cref="F:DisCatSharp.ChannelType.PublicThread"/> (default).
            </summary>
            <param name="name">The name of the thread.</param>
            <param name="autoArchiveDuration"><see cref="T:DisCatSharp.ThreadAutoArchiveDuration"/> till it gets archived. Defaults to <see cref="F:DisCatSharp.ThreadAutoArchiveDuration.OneHour"/>.</param>
            <param name="type">Can be either an <see cref="F:DisCatSharp.ChannelType.PrivateThread"/>, <see cref="F:DisCatSharp.ChannelType.NewsThread"/> or an <see cref="F:DisCatSharp.ChannelType.PublicThread"/>.</param>
            <param name="rateLimitPerUser">The per user ratelimit, aka slowdown.</param>
            <param name="reason">Audit log reason.</param>
            <returns>The created thread.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.CreatePublicThreads"/> or <see cref="F:DisCatSharp.Permissions.SendMessagesInThreads"/> or if creating a private thread the <see cref="F:DisCatSharp.Permissions.CreatePrivateThreads"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild hasn't enabled threads atm.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the <see cref="T:DisCatSharp.ThreadAutoArchiveDuration"/> cannot be modified. This happens, when the guild hasn't reached a certain boost <see cref="T:DisCatSharp.PremiumTier"/>. Or if <see cref="P:DisCatSharp.Entities.GuildFeatures.CanCreatePrivateThreads"/> is not enabled for guild. This happens, if the guild does not have <see cref="F:DisCatSharp.PremiumTier.TierTwo"/></exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetJoinedPrivateArchivedThreadsAsync(System.Nullable{System.UInt64},System.Nullable{System.Int32})">
            <summary>
            Gets joined archived private threads. Can contain more threads.
            If the result's value 'HasMore' is true, you need to recall this function to get older threads.
            </summary>
            <param name="before">Get threads created before this thread id.</param>
            <param name="limit">Defines the limit of returned <see cref="T:DisCatSharp.Entities.DiscordThreadResult"/>.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetPublicArchivedThreadsAsync(System.Nullable{System.UInt64},System.Nullable{System.Int32})">
            <summary>
            Gets archived public threads. Can contain more threads.
            If the result's value 'HasMore' is true, you need to recall this function to get older threads.
            </summary>
            <param name="before">Get threads created before this thread id.</param>
            <param name="limit">Defines the limit of returned <see cref="T:DisCatSharp.Entities.DiscordThreadResult"/>.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetPrivateArchivedThreadsAsync(System.Nullable{System.UInt64},System.Nullable{System.Int32})">
            <summary>
            Gets archived private threads. Can contain more threads.
            If the result's value 'HasMore' is true, you need to recall this function to get older threads.
            </summary>
            <param name="before">Get threads created before this thread id.</param>
            <param name="limit">Defines the limit of returned <see cref="T:DisCatSharp.Entities.DiscordThreadResult"/>.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageThreads"/> or <see cref="F:DisCatSharp.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.AddOverwriteAsync(DisCatSharp.Entities.DiscordRole,DisCatSharp.Permissions,DisCatSharp.Permissions,System.String)">
            <summary>
            Adds a channel permission overwrite for specified role.
            </summary>
            <param name="role">The role to have the permission added.</param>
            <param name="allow">The permissions to allow.</param>
            <param name="deny">The permissions to deny.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.AddOverwriteAsync(DisCatSharp.Entities.DiscordMember,DisCatSharp.Permissions,DisCatSharp.Permissions,System.String)">
            <summary>
            Adds a channel permission overwrite for specified member.
            </summary>
            <param name="member">The member to have the permission added.</param>
            <param name="allow">The permissions to allow.</param>
            <param name="deny">The permissions to deny.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.DeleteOverwriteAsync(DisCatSharp.Entities.DiscordMember,System.String)">
            <summary>
            Deletes a channel permission overwrite for specified member.
            </summary>
            <param name="member">The member to have the permission deleted.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.DeleteOverwriteAsync(DisCatSharp.Entities.DiscordRole,System.String)">
            <summary>
            Deletes a channel permission overwrite for specified role.
            </summary>
            <param name="role">The role to have the permission deleted.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.TriggerTypingAsync">
            <summary>
            Post a typing indicator.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetPinnedMessagesAsync">
            <summary>
            Returns all pinned messages.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.CreateWebhookAsync(System.String,DisCatSharp.Entities.Optional{System.IO.Stream},System.String)">
            <summary>
            Create a new webhook.
            </summary>
            <param name="name">The name of the webhook.</param>
            <param name="avatar">The image for the default webhook avatar.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetWebhooksAsync">
            <summary>
            Returns a list of webhooks.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.PlaceMemberAsync(DisCatSharp.Entities.DiscordMember)">
            <summary>
            Moves a member to this voice channel.
            </summary>
            <param name="member">The member to be moved.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.MoveMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exists or if the Member does not exists.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.FollowAsync(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Follows a news channel.
            </summary>
            <param name="targetChannel">Channel to crosspost messages to.</param>
            <exception cref="T:System.ArgumentException">Thrown when trying to follow a non-news channel.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the current user doesn't have <see cref="F:DisCatSharp.Permissions.ManageWebhooks"/> on the target channel.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.CrosspostMessageAsync(DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Publishes a message in a news channel to following channels.
            </summary>
            <param name="message">Message to publish.</param>
            <exception cref="T:System.ArgumentException">Thrown when the message has already been crossposted.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">
                Thrown when the current user doesn't have <see cref="F:DisCatSharp.Permissions.ManageWebhooks"/> and/or <see cref="F:DisCatSharp.Permissions.SendMessages"/>
            </exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.UpdateCurrentUserVoiceStateAsync(System.Nullable{System.Boolean},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates the current user's suppress state in this channel, if stage channel.
            </summary>
            <param name="suppress">Toggles the suppress state.</param>
            <param name="requestToSpeakTimestamp">Sets the time the user requested to speak.</param>
            <exception cref="T:System.ArgumentException">Thrown when the channel is not a stage channel.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.PermissionsFor(DisCatSharp.Entities.DiscordMember)">
            <summary>
            Calculates permissions for a given member.
            </summary>
            <param name="mbr">Member to calculate permissions for.</param>
            <returns>Calculated permissions for a given member.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.ToString">
            <summary>
            Returns a string representation of this channel.
            </summary>
            <returns>String representation of this channel.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordChannel"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordChannel"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.Equals(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordChannel"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordChannel"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordChannel"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordChannel"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordChannel"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordChannel"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordChannel"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.op_Equality(DisCatSharp.Entities.DiscordChannel,DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordChannel"/> objects are equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordChannel.op_Inequality(DisCatSharp.Entities.DiscordChannel,DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordChannel"/> objects are not equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordDmChannel">
            <summary>
            Represents a direct message channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordDmChannel.Recipients">
            <summary>
            Gets the recipients of this direct message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordDmChannel.IconHash">
            <summary>
            Gets the hash of this channel's icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordDmChannel.OwnerId">
            <summary>
            Gets the id of this direct message's creator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordDmChannel.ApplicationId">
            <summary>
            Gets the application id of the direct message's creator if it a bot.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordDmChannel.IconUrl">
            <summary>
            Gets the URL of this channel's icon.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordDmChannel.AddDmRecipientAsync(System.UInt64,System.String,System.String)">
            <summary>
            Only use for Group DMs! Whitelisted bots only. Requires user's oauth2 access token.
            </summary>
            <param name="userId">The id of the user to add.</param>
            <param name="accessToken">The OAuth2 access token.</param>
            <param name="nickname">The nickname to give to the user.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordDmChannel.RemoveDmRecipientAsync(System.UInt64,System.String)">
            <summary>
            Only use for Group DMs! Whitelisted bots only. Requires user's oauth2 access token.
            </summary>
            <param name="userId">The id of the User to remove.</param>
            <param name="accessToken">The OAuth2 access token.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordFollowedChannel">
            <summary>
            Represents a followed channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowedChannel.ChannelId">
            <summary>
            Gets the id of the channel following the announcement channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowedChannel.WebhookId">
            <summary>
            Gets the id of the webhook that posts crossposted messages to the channel.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel">
            <summary>
            Represents a discord guild directory channel.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryChannel.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryChannel.Equals(DisCatSharp.Entities.DiscordGuildDirectoryChannel)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryChannel.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryChannel.op_Equality(DisCatSharp.Entities.DiscordGuildDirectoryChannel,DisCatSharp.Entities.DiscordGuildDirectoryChannel)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/> objects are equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryChannel.op_Inequality(DisCatSharp.Entities.DiscordGuildDirectoryChannel,DisCatSharp.Entities.DiscordGuildDirectoryChannel)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryChannel"/> objects are not equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry">
            <summary>
            Represents a discord guild directory channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildDirectoryEntry.Description">
            <summary>
            Gets the description of the directory entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildDirectoryEntry.PrimaryCategory">
            <summary>
            Gets the primary category of the directory entry.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryEntry.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryEntry.Equals(DisCatSharp.Entities.DiscordGuildDirectoryEntry)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryEntry.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryEntry.op_Equality(DisCatSharp.Entities.DiscordGuildDirectoryEntry,DisCatSharp.Entities.DiscordGuildDirectoryEntry)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/> objects are equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildDirectoryEntry.op_Inequality(DisCatSharp.Entities.DiscordGuildDirectoryEntry,DisCatSharp.Entities.DiscordGuildDirectoryEntry)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordGuildDirectoryEntry"/> objects are not equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.ForumPostTag">
            <summary>
            Represents a discord forum post tag.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.ForumPostTag.Name">
            <summary>
            Gets the name of this forum post tag.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.ForumPostTag.EmojiId">
            <summary>
            Gets the emoji id of the forum post tag.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ForumPostTag.UnicodeEmojiString">
            <summary>
            Gets the unicode emoji of the forum post tag.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.ForumPostTag.UnicodeEmoji">
            <summary>
            Gets the unicode emoji.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.ForumPostTag.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.ForumPostTag"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.ForumPostTag"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.ForumPostTag.Equals(DisCatSharp.Entities.ForumPostTag)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.ForumPostTag"/> is equal to another <see cref="T:DisCatSharp.Entities.ForumPostTag"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.ForumPostTag"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.ForumPostTag"/> is equal to this <see cref="T:DisCatSharp.Entities.ForumPostTag"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.ForumPostTag.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.ForumPostTag"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.ForumPostTag"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.ForumPostTag.op_Equality(DisCatSharp.Entities.ForumPostTag,DisCatSharp.Entities.ForumPostTag)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.ForumPostTag"/> objects are equal.
            </summary>
            <param name="e1">First forum post tag to compare.</param>
            <param name="e2">Second forum post tag to compare.</param>
            <returns>Whether the two forum post tags are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.ForumPostTag.op_Inequality(DisCatSharp.Entities.ForumPostTag,DisCatSharp.Entities.ForumPostTag)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> objects are not equal.
            </summary>
            <param name="e1">First forum post tag to compare.</param>
            <param name="e2">Second forum post tag to compare.</param>
            <returns>Whether the two forum post tags are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordOverwrite">
            <summary>
            Represents a permission overwrite for a channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordOverwrite.Type">
            <summary>
            Gets the type of the overwrite. Either "role" or "member".
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordOverwrite.Allowed">
            <summary>
            Gets the allowed permission set.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordOverwrite.Denied">
            <summary>
            Gets the denied permission set.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwrite.DeleteAsync(System.String)">
            <summary>
            Deletes this channel overwrite.
            </summary>
            <param name="reason">Reason as to why this overwrite gets deleted.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the overwrite does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwrite.UpdateAsync(System.Nullable{DisCatSharp.Permissions},System.Nullable{DisCatSharp.Permissions},System.String)">
            <summary>
            Updates this channel overwrite.
            </summary>
            <param name="allow">Permissions that are allowed.</param>
            <param name="deny">Permissions that are denied.</param>
            <param name="reason">Reason as to why you made this change.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the overwrite does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwrite.GetMemberAsync">
            <summary>
            Gets the DiscordMember that is affected by this overwrite.
            </summary>
            <returns>The DiscordMember that is affected by this overwrite</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the overwrite does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwrite.GetRoleAsync">
            <summary>
            Gets the DiscordRole that is affected by this overwrite.
            </summary>
            <returns>The DiscordRole that is affected by this overwrite</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwrite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordOverwrite"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwrite.CheckPermission(DisCatSharp.Permissions)">
            <summary>
            Checks whether given permissions are allowed, denied, or not set.
            </summary>
            <param name="permission">Permissions to check.</param>
            <returns>Whether given permissions are allowed, denied, or not set.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordOverwriteBuilder">
            <summary>
            Represents a Discord permission overwrite builder.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordOverwriteBuilder.Allowed">
            <summary>
            Gets or sets the allowed permissions for this overwrite.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordOverwriteBuilder.Denied">
            <summary>
            Gets or sets the denied permissions for this overwrite.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordOverwriteBuilder.Type">
            <summary>
            Gets the type of this overwrite's target.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordOverwriteBuilder.Target">
            <summary>
            Gets the target for this overwrite.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwriteBuilder.#ctor(DisCatSharp.Entities.DiscordMember)">
            <summary>
            Creates a new Discord permission overwrite builder for a member. This class can be used to construct permission overwrites for guild channels, used when creating channels.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwriteBuilder.#ctor(DisCatSharp.Entities.DiscordRole)">
            <summary>
            Creates a new Discord permission overwrite builder for a role. This class can be used to construct permission overwrites for guild channels, used when creating channels.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwriteBuilder.#ctor">
            <summary>
            Creates a new Discord permission overwrite builder. This class can be used to construct permission overwrites for guild channels, used when creating channels.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwriteBuilder.Allow(DisCatSharp.Permissions)">
            <summary>
            Allows a permission for this overwrite.
            </summary>
            <param name="permission">Permission or permission set to allow for this overwrite.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwriteBuilder.Deny(DisCatSharp.Permissions)">
            <summary>
            Denies a permission for this overwrite.
            </summary>
            <param name="permission">Permission or permission set to deny for this overwrite.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwriteBuilder.For(DisCatSharp.Entities.DiscordMember)">
            <summary>
            Sets the member to which this overwrite applies.
            </summary>
            <param name="member">Member to which apply this overwrite's permissions.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwriteBuilder.For(DisCatSharp.Entities.DiscordRole)">
            <summary>
            Sets the role to which this overwrite applies.
            </summary>
            <param name="role">Role to which apply this overwrite's permissions.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwriteBuilder.FromAsync(DisCatSharp.Entities.DiscordOverwrite)">
            <summary>
            Populates this builder with data from another overwrite object.
            </summary>
            <param name="other">Overwrite from which data will be used.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordOverwriteBuilder.Build">
            <summary>
            Builds this DiscordOverwrite.
            </summary>
            <returns>Use this object for creation of new overwrites.</returns>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRestOverwrite.Allow">
            <summary>
            Determines what is allowed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRestOverwrite.Deny">
            <summary>
            Determines what is denied.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRestOverwrite.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRestOverwrite.Type">
            <summary>
            Gets or sets the overwrite type.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordColor">
            <summary>
            Represents a color used in Discord API.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.None">
            <summary>
            Represents no color, or integer 0;
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Black">
            <summary>
            A near-black color. Due to API limitations, the color is #010101, rather than #000000, as the latter is treated as no color.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.White">
            <summary>
            White, or #FFFFFF.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Gray">
            <summary>
            Gray, or #808080.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.DarkGray">
            <summary>
            Dark gray, or #A9A9A9.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.LightGray">
            <summary>
            Light gray, or #808080.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.VeryDarkGray">
            <summary>
            Very dark gray, or #666666.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Blurple">
            <summary>
            Discord Blurple, or #5865F2.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Fuchsia">
            <summary>
            Discord Fuchsia, or #EB459E.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Green">
            <summary>
            Discord Green, or #57F287.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Yellow">
            <summary>
            Discord Yellow, or #FEE75C.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Red">
            <summary>
            Discord Red, or #ED4245.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.DarkRed">
            <summary>
            Dark red, or #7F0000.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.DarkGreen">
            <summary>
            Dark green, or #007F00.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Blue">
            <summary>
            Blue, or #0000FF.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.DarkBlue">
            <summary>
            Dark blue, or #00007F.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Cyan">
            <summary>
            Cyan, or #00FFFF.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Magenta">
            <summary>
            Magenta, or #FF00FF.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Teal">
            <summary>
            Teal, or #008080.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Aquamarine">
            <summary>
            Aquamarine, or #00FFBF.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Gold">
            <summary>
            Gold, or #FFD700.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Goldenrod">
            <summary>
            Goldenrod, or #DAA520.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Azure">
            <summary>
            Azure, or #007FFF.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Rose">
            <summary>
            Rose, or #FF007F.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.SpringGreen">
            <summary>
            Spring green, or #00FF7F.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Chartreuse">
            <summary>
            Chartreuse, or #7FFF00.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Orange">
            <summary>
            Orange, or #FFA500.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Purple">
            <summary>
            Purple, or #800080.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Violet">
            <summary>
            Violet, or #EE82EE.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Brown">
            <summary>
            Brown, or #A52A2A.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.HotPink">
            <summary>
            Hot pink, or #FF69B4
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Lilac">
            <summary>
            Lilac, or #C8A2C8.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.CornflowerBlue">
            <summary>
            Cornflower blue, or #6495ED.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.MidnightBlue">
            <summary>
            Midnight blue, or #191970.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Wheat">
            <summary>
            Wheat, or #F5DEB3.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.IndianRed">
            <summary>
            Indian red, or #CD5C5C.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Turquoise">
            <summary>
            Turquoise, or #30D5C8.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.SapGreen">
            <summary>
            Sap green, or #507D2A.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.PhthaloBlue">
            <summary>
            Phthalo blue, or #000F89.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.PhthaloGreen">
            <summary>
            Phthalo green, or #123524.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Sienna">
            <summary>
            Sienna, or #882D17.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.Value">
            <summary>
            Gets the integer representation of this color.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.R">
            <summary>
            Gets the red component of this color as an 8-bit integer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.G">
            <summary>
            Gets the green component of this color as an 8-bit integer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordColor.B">
            <summary>
            Gets the blue component of this color as an 8-bit integer.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordColor.#ctor(System.Int32)">
            <summary>
            Creates a new color with specified value.
            </summary>
            <param name="color">Value of the color.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color with specified values for red, green, and blue components.
            </summary>
            <param name="r">Value of the red component.</param>
            <param name="g">Value of the green component.</param>
            <param name="b">Value of the blue component.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new color with specified values for red, green, and blue components.
            </summary>
            <param name="r">Value of the red component.</param>
            <param name="g">Value of the green component.</param>
            <param name="b">Value of the blue component.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordColor.#ctor(System.String)">
            <summary>
            Creates a new color from specified string representation.
            </summary>
            <param name="color">String representation of the color. Must be 6 hexadecimal characters, optionally with # prefix.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordColor.ToString">
            <summary>
            Gets a string representation of this color.
            </summary>
            <returns>String representation of this color.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DisCatSharpTeam">
            <summary>
            The DisCatSharp team.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.TeamName">
            <summary>
            Gets the team's name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.Icon">
            <summary>
            Gets the team's icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.IconHash">
            <summary>
            Gets the team's icon's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.Logo">
            <summary>
            Gets the team's logo.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.LogoHash">
            <summary>
            Gets the team's logo's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.Banner">
            <summary>
            Gets the team's banner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.BannerHash">
            <summary>
            Gets the team's banner's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.DocsUrl">
            <summary>
            Gets the team's docs url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.RepoUrl">
            <summary>
            Gets the team's repo url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.TermsOfServiceUrl">
            <summary>
            Gets the team's terms of service url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.PrivacyPolicyUrl">
            <summary>
            Gets the team's privacy policy url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.GuildId">
            <summary>
            Get's the team's guild id
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.Developers">
            <summary>
            Gets the team's developers.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.Owner">
            <summary>
            Gets the team's owner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.Guild">
            <summary>
            Gets the team's guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeam.SupportInvite">
            <summary>
            Gets the team's support invite.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DisCatSharpTeam.Get(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger,DisCatSharp.Net.DiscordApiClient)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DisCatSharpTeam"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DisCatSharpTeamMember">
            <summary>
            Represents a DisCatSharp team member.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeamMember.Username">
            <summary>
            Gets this user's username.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeamMember.Discriminator">
            <summary>
            Gets the user's 4-digit discriminator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeamMember.DiscriminatorInt">
            <summary>
            Gets the discriminator integer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeamMember.BannerColor">
            <summary>
            Gets the user's banner color, if set. Mutually exclusive with <see cref="P:DisCatSharp.Entities.DisCatSharpTeamMember.BannerHash"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeamMember.BannerUrl">
            <summary>
            Gets the user's banner url
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeamMember.BannerHash">
            <summary>
            Gets the user's profile banner hash. Mutually exclusive with <see cref="P:DisCatSharp.Entities.DisCatSharpTeamMember.BannerColor"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeamMember.AvatarHash">
            <summary>
            Gets the user's avatar hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeamMember.AvatarUrl">
            <summary>
            Gets the user's avatar URL.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DisCatSharpTeamMember.DefaultAvatarUrl">
            <summary>
            Gets the URL of default avatar for this user.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DisCatSharpTeamMember.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DisCatSharpTeamMember"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordProtocol">
            <summary>
            Represents the discord protocol.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordProtocol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordProtocol"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbed">
            <summary>
            Represents a discord embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Title">
            <summary>
            Gets the embed's title.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Type">
            <summary>
            Gets the embed's type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Description">
            <summary>
            Gets the embed's description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Url">
            <summary>
            Gets the embed's url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Timestamp">
            <summary>
            Gets the embed's timestamp.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Color">
            <summary>
            Gets the embed's color.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Footer">
            <summary>
            Gets the embed's footer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Image">
            <summary>
            Gets the embed's image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Thumbnail">
            <summary>
            Gets the embed's thumbnail.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Video">
            <summary>
            Gets the embed's video.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Provider">
            <summary>
            Gets the embed's provider.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Author">
            <summary>
            Gets the embed's author.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbed.Fields">
            <summary>
            Gets the embed's fields.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmbed"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedAuthor">
            <summary>
            Gets the author of a discord embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedAuthor.Name">
            <summary>
            Gets the name of the author.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedAuthor.Url">
            <summary>
            Gets the url of the author.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedAuthor.IconUrl">
            <summary>
            Gets the url of the author's icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedAuthor.ProxyIconUrl">
            <summary>
            Gets the proxied url of the author's icon.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedAuthor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmbedAuthor"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedBuilder">
            <summary>
            Constructs embeds.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.Title">
            <summary>
            Gets or sets the embed's title.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.Description">
            <summary>
            Gets or sets the embed's description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.Url">
            <summary>
            Gets or sets the url for the embed's title.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.Color">
            <summary>
            Gets or sets the embed's color.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.Timestamp">
            <summary>
            Gets or sets the embed's timestamp.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.ImageUrl">
            <summary>
            Gets or sets the embed's image url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.Author">
            <summary>
            Gets or sets the embed's author.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.Footer">
            <summary>
            Gets or sets the embed's footer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.Thumbnail">
            <summary>
            Gets or sets the embed's thumbnail.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.Fields">
            <summary>
            Gets the embed's fields.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.#ctor">
            <summary>
            Constructs a new empty embed builder.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.#ctor(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Constructs a new embed builder using another embed as prototype.
            </summary>
            <param name="original">Embed to use as prototype.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithTitle(System.String)">
            <summary>
            Sets the embed's title.
            </summary>
            <param name="title">Title to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithDescription(System.String)">
            <summary>
            Sets the embed's description.
            </summary>
            <param name="description">Description to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithUrl(System.String)">
            <summary>
            Sets the embed's title url.
            </summary>
            <param name="url">Title url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithUrl(System.Uri)">
            <summary>
            Sets the embed's title url.
            </summary>
            <param name="url">Title url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithColor(DisCatSharp.Entities.DiscordColor)">
            <summary>
            Sets the embed's color.
            </summary>
            <param name="color">Embed color to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithTimestamp(System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets the embed's timestamp.
            </summary>
            <param name="timestamp">Timestamp to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithTimestamp(System.Nullable{System.DateTime})">
            <summary>
            Sets the embed's timestamp.
            </summary>
            <param name="timestamp">Timestamp to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithTimestamp(System.UInt64)">
            <summary>
            Sets the embed's timestamp based on a snowflake.
            </summary>
            <param name="snowflake">Snowflake to calculate timestamp from.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithImageUrl(System.String)">
            <summary>
            Sets the embed's image url.
            </summary>
            <param name="url">Image url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithImageUrl(System.Uri)">
            <summary>
            Sets the embed's image url.
            </summary>
            <param name="url">Image url to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithThumbnail(System.String,System.Int32,System.Int32)">
            <summary>
            Sets the embed's thumbnail.
            </summary>
            <param name="url">Thumbnail url to set.</param>
            <param name="height">The height of the thumbnail to set.</param>
            <param name="width">The width of the thumbnail to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithThumbnail(System.Uri,System.Int32,System.Int32)">
            <summary>
            Sets the embed's thumbnail.
            </summary>
            <param name="url">Thumbnail url to set.</param>
            <param name="height">The height of the thumbnail to set.</param>
            <param name="width">The width of the thumbnail to set.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithAuthor(System.String,System.String,System.String)">
            <summary>
            Sets the embed's author.
            </summary>
            <param name="name">Author's name.</param>
            <param name="url">Author's url.</param>
            <param name="iconUrl">Author icon's url.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.WithFooter(System.String,System.String)">
            <summary>
            Sets the embed's footer.
            </summary>
            <param name="text">Footer's text.</param>
            <param name="iconUrl">Footer icon's url.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.AddField(System.String,System.String,System.Boolean)">
            <summary>
            Adds a field to this embed.
            </summary>
            <param name="name">Name of the field to add.</param>
            <param name="value">Value of the field to add.</param>
            <param name="inline">Whether the field is to be inline or not.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.AddField(DisCatSharp.Entities.DiscordEmbedField)">
            <summary>
            Adds a field to this embed.
            </summary>
            <param name="field">The field to add.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.AddFields(DisCatSharp.Entities.DiscordEmbedField[])">
            <summary>
            Adds multiple fields to this embed.
            </summary>
            <param name="fields">The fields to add.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.AddFields(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmbedField})">
            <summary>
            Adds multiple fields to this embed.
            </summary>
            <param name="fields">The fields to add.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.RemoveField(DisCatSharp.Entities.DiscordEmbedField)">
            <summary>
            Removes a field from this embed, if it is part of it.
            </summary>
            <param name="field">The field to remove.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.RemoveFields(DisCatSharp.Entities.DiscordEmbedField[])">
            <summary>
            Removes multiple fields from this embed, if they are part of it.
            </summary>
            <param name="fields">The fields to remove.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.RemoveFields(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmbedField})">
            <summary>
            Removes multiple fields from this embed, if they are part of it.
            </summary>
            <param name="fields">The fields to remove.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.RemoveFieldAt(System.Int32)">
            <summary>
            Removes a field of the specified index from this embed.
            </summary>
            <param name="index">Index of the field to remove.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.RemoveFieldRange(System.Int32,System.Int32)">
            <summary>
            Removes fields of the specified range from this embed.
            </summary>
            <param name="index">Index of the first field to remove.</param>
            <param name="count">Number of fields to remove.</param>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.ClearFields">
            <summary>
            Removes all fields from this embed.
            </summary>
            <returns>This embed builder.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.Build">
            <summary>
            Constructs a new embed from data supplied to this builder.
            </summary>
            <returns>New discord embed.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedBuilder.op_Implicit(DisCatSharp.Entities.DiscordEmbedBuilder)~DisCatSharp.Entities.DiscordEmbed">
            <summary>
            Implicitly converts this builder to an embed.
            </summary>
            <param name="builder">Builder to convert.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedAuthor">
            <summary>
            Represents an embed author.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedAuthor.Name">
            <summary>
            Gets or sets the name of the author.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedAuthor.Url">
            <summary>
            Gets or sets the Url to which the author's link leads.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedAuthor.IconUrl">
            <summary>
            Gets or sets the Author's icon url.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedFooter">
            <summary>
            Represents an embed footer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedFooter.Text">
            <summary>
            Gets or sets the text of the footer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedFooter.IconUrl">
            <summary>
            Gets or sets the Url
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedThumbnail">
            <summary>
            Represents an embed thumbnail.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedThumbnail.Url">
            <summary>
            Gets or sets the thumbnail's image url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedThumbnail.Height">
            <summary>
            Gets or sets the thumbnail's height.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedBuilder.EmbedThumbnail.Width">
            <summary>
            Gets or sets the thumbnail's width.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedField">
            <summary>
            Represents a field inside a discord embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedField.Name">
            <summary>
            The name of the field.
            Must be non-null, non-empty and &lt;= 256 characters.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedField.Value">
            <summary>
            The value of the field.
            Must be non-null, non-empty and &lt;= 1024 characters.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedField.Inline">
            <summary>
            Whether or not this field should display inline.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedField.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmbedField"/> class.
            </summary>
            <param name="name"><see cref="P:DisCatSharp.Entities.DiscordEmbedField.Name"/></param>
            <param name="value"><see cref="P:DisCatSharp.Entities.DiscordEmbedField.Value"/></param>
            <param name="inline"><see cref="P:DisCatSharp.Entities.DiscordEmbedField.Inline"/></param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedFooter">
            <summary>
            Represents a footer in an embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedFooter.Text">
            <summary>
            Gets the footer's text.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedFooter.IconUrl">
            <summary>
            Gets the url of the footer's icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedFooter.ProxyIconUrl">
            <summary>
            Gets the proxied url of the footer's icon.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedFooter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmbedFooter"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedImage">
            <summary>
            Represents an image in an embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedImage.Url">
            <summary>
            Gets the source url of the image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedImage.ProxyUrl">
            <summary>
            Gets a proxied url of the image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedImage.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedImage.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmbedImage"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedProvider">
            <summary>
            Represents an embed provider.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedProvider.Url">
            <summary>
            Gets the url of the provider.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmbedProvider"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedThumbnail">
            <summary>
            Represents a thumbnail in an embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedThumbnail.Url">
            <summary>
            Gets the source url of the thumbnail (only https).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedThumbnail.ProxyUrl">
            <summary>
            Gets a proxied url of the thumbnail.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedThumbnail.Height">
            <summary>
            Gets the height of the thumbnail.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedThumbnail.Width">
            <summary>
            Gets the width of the thumbnail.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedThumbnail.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmbedThumbnail"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmbedVideo">
            <summary>
            Represents a video inside an embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedVideo.Url">
            <summary>
            Gets the source url of the video.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedVideo.Height">
            <summary>
            Gets the height of the video.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmbedVideo.Width">
            <summary>
            Gets the width of the video.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmbedVideo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmbedVideo"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordEmoji">
            <summary>
            Represents a Discord emoji.
            </summary>
            <summary>
            Represents discord emoji.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmoji.Name">
            <summary>
            Gets the name of this emoji.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmoji.Roles">
            <summary>
            Gets IDs the roles this emoji is enabled for.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmoji.RequiresColons">
            <summary>
            Gets whether this emoji requires colons to use.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmoji.IsManaged">
            <summary>
            Gets whether this emoji is managed by an integration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmoji.IsAnimated">
            <summary>
            Gets whether this emoji is animated.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmoji.IsAvailable">
            <summary>
            Gets whether the emoji is available for use.
            An emoji may not be available due to loss of server boost.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmoji.Url">
            <summary>
            Gets the image URL of this emoji.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.GetDiscordName">
            <summary>
            Gets emoji's name in non-Unicode format (eg. :thinking: instead of the Unicode representation of the emoji).
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.ToString">
            <summary>
            Returns a string representation of this emoji.
            </summary>
            <returns>String representation of this emoji.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordEmoji"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.Equals(DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordEmoji"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordEmoji"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordEmoji"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordEmoji"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordEmoji"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.ToReactionString">
            <summary>
            Gets the reactions string.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.op_Equality(DisCatSharp.Entities.DiscordEmoji,DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> objects are equal.
            </summary>
            <param name="e1">First emoji to compare.</param>
            <param name="e2">Second emoji to compare.</param>
            <returns>Whether the two emoji are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.op_Inequality(DisCatSharp.Entities.DiscordEmoji,DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> objects are not equal.
            </summary>
            <param name="e1">First emoji to compare.</param>
            <param name="e2">Second emoji to compare.</param>
            <returns>Whether the two emoji are not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.op_Implicit(DisCatSharp.Entities.DiscordEmoji)~System.String">
            <summary>
            Implicitly converts this emoji to its string representation.
            </summary>
            <param name="e1">Emoji to convert.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.IsValidUnicode(System.String)">
            <summary>
            Checks whether specified unicode entity is a valid unicode emoji.
            </summary>
            <param name="unicodeEntity">Entity to check.</param>
            <returns>Whether it's a valid emoji.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.FromUnicode(DisCatSharp.BaseDiscordClient,System.String)">
            <summary>
            Creates an emoji object from a unicode entity.
            </summary>
            <param name="client"><see cref="T:DisCatSharp.BaseDiscordClient"/> to attach to the object.</param>
            <param name="unicodeEntity">Unicode entity to create the object from.</param>
            <returns>Create <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.FromUnicode(System.String)">
            <summary>
            Creates an emoji object from a unicode entity.
            </summary>
            <param name="unicodeEntity">Unicode entity to create the object from.</param>
            <returns>Create <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.TryFromUnicode(DisCatSharp.BaseDiscordClient,System.String,DisCatSharp.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from a unicode entity.
            </summary>
            <param name="client"><see cref="T:DisCatSharp.BaseDiscordClient"/> to attach to the object.</param>
            <param name="unicodeEntity">Unicode entity to create the object from.</param>
            <param name="emoji">Resulting <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.TryFromUnicode(System.String,DisCatSharp.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from a unicode entity.
            </summary>
            <param name="unicodeEntity">Unicode entity to create the object from.</param>
            <param name="emoji">Resulting <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.FromGuildEmote(DisCatSharp.BaseDiscordClient,System.UInt64)">
            <summary>
            Creates an emoji object from a guild emote.
            </summary>
            <param name="client"><see cref="T:DisCatSharp.BaseDiscordClient"/> to attach to the object.</param>
            <param name="id">Id of the emote.</param>
            <returns>Create <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.TryFromGuildEmote(DisCatSharp.BaseDiscordClient,System.UInt64,DisCatSharp.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from a guild emote.
            </summary>
            <param name="client"><see cref="T:DisCatSharp.BaseDiscordClient"/> to attach to the object.</param>
            <param name="id">Id of the emote.</param>
            <param name="emoji">Resulting <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.FromName(DisCatSharp.BaseDiscordClient,System.String,System.Boolean)">
            <summary>
            Creates an emoji obejct from emote name that includes colons (eg. :thinking:). This method also supports
            skin tone variations (eg. :ok_hand::skin-tone-2:), standard emoticons (eg. :D), as well as guild emoji
            (still specified by :name:).
            </summary>
            <param name="client"><see cref="T:DisCatSharp.BaseDiscordClient"/> to attach to the object.</param>
            <param name="name">Name of the emote to find, including colons (eg. :thinking:).</param>
            <param name="includeGuilds">Should guild emojis be included in the search.</param>
            <returns>Create <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> object.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.TryFromName(DisCatSharp.BaseDiscordClient,System.String,DisCatSharp.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from emote name that includes colons (eg. :thinking:). This method also
            supports skin tone variations (eg. :ok_hand::skin-tone-2:), standard emoticons (eg. :D), as well as guild
            emoji (still specified by :name:).
            </summary>
            <param name="client"><see cref="T:DisCatSharp.BaseDiscordClient"/> to attach to the object.</param>
            <param name="name">Name of the emote to find, including colons (eg. :thinking:).</param>
            <param name="emoji">Resulting <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.TryFromName(DisCatSharp.BaseDiscordClient,System.String,System.Boolean,DisCatSharp.Entities.DiscordEmoji@)">
            <summary>
            Attempts to create an emoji object from emote name that includes colons (eg. :thinking:). This method also
            supports skin tone variations (eg. :ok_hand::skin-tone-2:), standard emoticons (eg. :D), as well as guild
            emoji (still specified by :name:).
            </summary>
            <param name="client"><see cref="T:DisCatSharp.BaseDiscordClient"/> to attach to the object.</param>
            <param name="name">Name of the emote to find, including colons (eg. :thinking:).</param>
            <param name="includeGuilds">Should guild emojis be included in the search.</param>
            <param name="emoji">Resulting <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> object.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmoji.s_unicodeEmojis">
            <summary>
            Gets a mapping of :name: => unicode.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordEmoji.s_discordNameLookup">
            <summary>
            Gets a mapping of unicode => :name:.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordEmoji.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordEmoji"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordUnicodeEmoji">
            <summary>
            Represents a discord unicode emoji.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogEntry">
            <summary>
            Represents an audit log entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogEntry.ActionType">
            <summary>
            Gets the entry's action type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogEntry.UserResponsible">
            <summary>
            Gets the user responsible for the action.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogEntry.Reason">
            <summary>
            Gets the reason defined in the action.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogEntry.ActionCategory">
            <summary>
            Gets the category under which the action falls.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.PropertyChange`1">
            <summary>
            Represents a description of how a property changed.
            </summary>
            <typeparam name="T">Type of the changed property.</typeparam>
        </member>
        <member name="P:DisCatSharp.Entities.PropertyChange`1.Before">
            <summary>
            The property's value before it was changed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.PropertyChange`1.After">
            <summary>
            The property's value after it was changed.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogGuildEntry">
            <summary>
            Represents a audit log guild entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.Target">
            <summary>
            Gets the affected guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.NameChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.Name"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.OwnerChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.Owner"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.IconChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.IconUrl"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.VerificationLevelChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.VerificationLevel"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.AfkChannelChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.AfkChannel"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.SystemChannelFlagsChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.SystemChannelFlags"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.WidgetChannelChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.WidgetChannel"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.RulesChannelChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.RulesChannel"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.PublicUpdatesChannelChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.PublicUpdatesChannel"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.NotificationSettingsChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.DefaultMessageNotifications"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.SystemChannelChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.SystemChannel"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.ExplicitContentFilterChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.ExplicitContentFilter"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.MfaLevelChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.MfaLevel"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.SplashChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.SplashUrl"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.RegionChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.VoiceRegion"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.VanityUrlCodeChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.VanityUrlCode"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildEntry.PremiumProgressBarChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordGuild.PremiumProgressBarEnabled"/>
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogGuildEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogGuildEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogChannelEntry">
            <summary>
            Represents a audit log channel entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.Target">
            <summary>
            Gets the affected channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.NameChange">
            <summary>
            Gets the description of channel's name change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.TypeChange">
            <summary>
            Gets the description of channel's type change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.NsfwChange">
            <summary>
            Gets the description of channel's nsfw flag change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.RtcRegionIdChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordChannel.RtcRegionId"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.BitrateChange">
            <summary>
            Gets the description of channel's bitrate change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.OverwriteChange">
            <summary>
            Gets the description of channel permission overwrites' change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.TopicChange">
            <summary>
            Gets the description of channel's topic change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.UserLimitChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordChannel.UserLimit"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.PerUserRateLimitChange">
            <summary>
            Gets the description of channel's slow mode timeout change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogChannelEntry.DefaultAutoArchiveDurationChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordChannel.DefaultAutoArchiveDuration"/>
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogChannelEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogChannelEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogOverwriteEntry">
            <summary>
            Represents a audit log overwrite entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogOverwriteEntry.Target">
            <summary>
            Gets the affected overwrite.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogOverwriteEntry.Channel">
            <summary>
            Gets the channel for which the overwrite was changed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogOverwriteEntry.AllowChange">
            <summary>
            Gets the description of overwrite's allow value change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogOverwriteEntry.DenyChange">
            <summary>
            Gets the description of overwrite's deny value change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogOverwriteEntry.TypeChange">
            <summary>
            Gets the description of overwrite's type change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogOverwriteEntry.TargetIdChange">
            <summary>
            Gets the description of overwrite's target id change.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogOverwriteEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogOverwriteEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogKickEntry">
            <summary>
            Represents a audit log kick entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogKickEntry.Target">
            <summary>
            Gets the kicked member.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogKickEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogKickEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogPruneEntry">
            <summary>
            Represents a audit log prune entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogPruneEntry.Days">
            <summary>
            Gets the number inactivity days after which members were pruned.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogPruneEntry.Toll">
            <summary>
            Gets the number of members pruned.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogPruneEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogPruneEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogBanEntry">
            <summary>
            Represents a audit log ban entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogBanEntry.Target">
            <summary>
            Gets the banned member.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogBanEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogBanEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry">
            <summary>
            Represents a audit log member update entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry.Target">
            <summary>
            Gets the affected member.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry.NicknameChange">
            <summary>
            Gets the description of member's nickname change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry.RemovedRoles">
            <summary>
            Gets the roles that were removed from the member.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry.AddedRoles">
            <summary>
            Gets the roles that were added to the member.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry.MuteChange">
            <summary>
            Gets the description of member's mute status change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry.DeafenChange">
            <summary>
            Gets the description of member's deaf status change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry.CommunicationDisabledUntilChange">
            <summary>
            Get's the timeout change.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogMemberUpdateEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry">
            <summary>
            Represents a audit log role update entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry.Target">
            <summary>
            Gets the affected role.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry.NameChange">
            <summary>
            Gets the description of role's name change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry.ColorChange">
            <summary>
            Gets the description of role's color change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry.PermissionChange">
            <summary>
            Gets the description of role's permission set change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry.PositionChange">
            <summary>
            Gets the description of the role's position change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry.MentionableChange">
            <summary>
            Gets the description of the role's mentionability change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry.HoistChange">
            <summary>
            Gets the description of the role's hoist status change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry.IconHashChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordRole.IconHash"/>
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogRoleUpdateEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogInviteEntry">
            <summary>
            Represents a audit log invite entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogInviteEntry.Target">
            <summary>
            Gets the affected invite.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogInviteEntry.MaxAgeChange">
            <summary>
            Gets the description of invite's max age change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogInviteEntry.CodeChange">
            <summary>
            Gets the description of invite's code change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogInviteEntry.TemporaryChange">
            <summary>
            Gets the description of invite's temporariness change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogInviteEntry.InviterChange">
            <summary>
            Gets the description of invite's inviting member change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogInviteEntry.ChannelChange">
            <summary>
            Gets the description of invite's target channel change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogInviteEntry.UsesChange">
            <summary>
            Gets the description of invite's use count change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogInviteEntry.MaxUsesChange">
            <summary>
            Gets the description of invite's max use count change.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogInviteEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogInviteEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogWebhookEntry">
            <summary>
            Represents a audit log webhook entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogWebhookEntry.Target">
            <summary>
            Gets the affected webhook.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogWebhookEntry.IdChange">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogWebhookEntry.NameChange">
            <summary>
            Gets the description of webhook's name change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogWebhookEntry.ChannelChange">
            <summary>
            Gets the description of webhook's target channel change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogWebhookEntry.TypeChange">
            <summary>
            Gets the description of webhook's type change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogWebhookEntry.AvatarHashChange">
            <summary>
            Gets the description of webhook's avatar change.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogWebhookEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogWebhookEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogEmojiEntry">
            <summary>
            Represents a audit log emoji entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogEmojiEntry.Target">
            <summary>
            Gets the affected emoji.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogEmojiEntry.NameChange">
            <summary>
            Gets the description of emoji's name change.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogEmojiEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogEmojiEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogStickerEntry">
            <summary>
            Represents a audit log sticker entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.Target">
            <summary>
            Gets the affected sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.NameChange">
            <summary>
            Gets the description of sticker's name change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.DescriptionChange">
            <summary>
            Gets the description of sticker's description change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.TagsChange">
            <summary>
            Gets the description of sticker's tags change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.AssetChange">
            <summary>
            Gets the description of sticker's tags change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.GuildIdChange">
            <summary>
            Gets the description of sticker's guild id change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.AvailabilityChange">
            <summary>
            Gets the description of sticker's availability change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.IdChange">
            <summary>
            Gets the description of sticker's id change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.TypeChange">
            <summary>
            Gets the description of sticker's type change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStickerEntry.FormatChange">
            <summary>
            Gets the description of sticker's format change.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogStickerEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogStickerEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogMessageEntry">
            <summary>
            Represents a audit log message entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMessageEntry.Target">
            <summary>
            Gets the affected message. Note that more often than not, this will only have ID specified.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMessageEntry.Channel">
            <summary>
            Gets the channel in which the action occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMessageEntry.MessageCount">
            <summary>
            Gets the number of messages that were affected.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogMessageEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogMessageEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogMessagePinEntry">
            <summary>
            Represents a audit log message pin entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMessagePinEntry.Target">
            <summary>
            Gets the affected message's user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMessagePinEntry.Channel">
            <summary>
            Gets the channel the message is in.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMessagePinEntry.Message">
            <summary>
            Gets the message the pin action was for.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogMessagePinEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogMessagePinEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogBotAddEntry">
            <summary>
            Represents a audit log bot add entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogBotAddEntry.TargetBot">
            <summary>
            Gets the bot that has been added to the guild.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogMemberMoveEntry">
            <summary>
            Represents a audit log member move entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberMoveEntry.Channel">
            <summary>
            Gets the channel the members were moved in.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberMoveEntry.UserCount">
            <summary>
            Gets the amount of users that were moved out from the voice channel.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogMemberDisconnectEntry">
            <summary>
            Represents a audit log member disconnect entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogMemberDisconnectEntry.UserCount">
            <summary>
            Gets the amount of users that were disconnected from the voice channel.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogIntegrationEntry">
            <summary>
            Represents a audit log integration entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogIntegrationEntry.Type">
            <summary>
            The type of integration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogIntegrationEntry.EnableEmoticons">
            <summary>
            Gets the description of emoticons' change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogIntegrationEntry.ExpireGracePeriod">
            <summary>
            Gets the description of expire grace period's change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogIntegrationEntry.ExpireBehavior">
            <summary>
            Gets the description of expire behavior change.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogStageEntry">
            <summary>
            Represents a audit log stage entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStageEntry.Target">
            <summary>
            Gets the affected stage instance
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStageEntry.TopicChange">
            <summary>
            Gets the description of stage instance's topic change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogStageEntry.PrivacyLevelChange">
            <summary>
            Gets the description of stage instance's privacy level change.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogStageEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogStageEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry">
            <summary>
            Represents a audit log event entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry.Target">
            <summary>
            Gets the affected event
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry.ChannelIdChange">
            <summary>
            Gets the channel change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry.NameChange">
            <summary>
            <see cref="P:DisCatSharp.Entities.DiscordScheduledEvent.Name"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry.DescriptionChange">
            <summary>
            Gets the description change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry.LocationChange">
            <summary>
            Gets the location change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry.PrivacyLevelChange">
            <summary>
            Gets the privacy level change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry.StatusChange">
            <summary>
            Gets the status change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry.EntityTypeChange">
            <summary>
            Gets the entity type change.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogGuildScheduledEventEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAuditLogThreadEntry">
            <summary>
            Represents a audit log thread entry.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogThreadEntry.Target">
            <summary>
            Gets the affected thread
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogThreadEntry.NameChange">
            <summary>
            Gets the name of the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogThreadEntry.TypeChange">
            <summary>
            Gets the type of the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogThreadEntry.ArchivedChange">
            <summary>
            Gets the archived state of the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogThreadEntry.LockedChange">
            <summary>
            Gets the locked state of the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogThreadEntry.InvitableChange">
            <summary>
            Gets the invitable state of the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogThreadEntry.AutoArchiveDurationChange">
            <summary>
            Gets the new auto archive duration of the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAuditLogThreadEntry.PerUserRateLimitChange">
            <summary>
            Gets the new ratelimit of the thread.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAuditLogThreadEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAuditLogThreadEntry"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.AuditLogActionCategory">
            <summary>
            Indicates audit log action category.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionCategory.Create">
            <summary>
            Indicates that this action resulted in creation or addition of an object.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionCategory.Update">
            <summary>
            Indicates that this action resulted in update of an object.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionCategory.Delete">
            <summary>
            Indicates that this action resulted in deletion or removal of an object.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionCategory.Other">
            <summary>
            Indicates that this action resulted in something else than creation, addition, update, deletion, or removal of an object.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.AuditLogActionType">
            <summary>
            Represents type of the action that was taken in given audit log event.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.Invalid">
            <summary>
            Indicates an invalid action type.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.GuildUpdate">
            <summary>
            Indicates that the guild was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.ChannelCreate">
            <summary>
            Indicates that the channel was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.ChannelUpdate">
            <summary>
            Indicates that the channel was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.ChannelDelete">
            <summary>
            Indicates that the channel was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.OverwriteCreate">
            <summary>
            Indicates that the channel permission overwrite was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.OverwriteUpdate">
            <summary>
            Indicates that the channel permission overwrite was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.OverwriteDelete">
            <summary>
            Indicates that the channel permission overwrite was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.Kick">
            <summary>
            Indicates that the user was kicked.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.Prune">
            <summary>
            Indicates that users were pruned.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.Ban">
            <summary>
            Indicates that the user was banned.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.Unban">
            <summary>
            Indicates that the user was unbanned.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.MemberUpdate">
            <summary>
            Indicates that the member was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.MemberRoleUpdate">
            <summary>
            Indicates that the member's roles were updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.MemberMove">
            <summary>
            Indicates that the member has moved to another voice channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.MemberDisconnect">
            <summary>
            Indicates that the member has disconnected from a voice channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.BotAdd">
            <summary>
            Indicates that a bot was added to the guild.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.RoleCreate">
            <summary>
            Indicates that the role was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.RoleUpdate">
            <summary>
            Indicates that the role was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.RoleDelete">
            <summary>
            Indicates that the role was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.InviteCreate">
            <summary>
            Indicates that the invite was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.InviteUpdate">
            <summary>
            Indicates that the invite was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.InviteDelete">
            <summary>
            Indicates that the invite was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.WebhookCreate">
            <summary>
            Indicates that the webhook was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.WebhookUpdate">
            <summary>
            Indicates that the webook was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.WebhookDelete">
            <summary>
            Indicates that the webhook was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.EmojiCreate">
            <summary>
            Indicates that an emoji was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.EmojiUpdate">
            <summary>
            Indicates that an emoji was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.EmojiDelete">
            <summary>
            Indicates that an emoji was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.MessageDelete">
            <summary>
            Indicates that the message was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.MessageBulkDelete">
            <summary>
            Indicates that messages were bulk-deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.MessagePin">
            <summary>
            Indicates that a message was pinned.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.MessageUnpin">
            <summary>
            Indicates that a message was unpinned.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.IntegrationCreate">
            <summary>
            Indicates that an integration was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.IntegrationUpdate">
            <summary>
            Indicates that an integration was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.IntegrationDelete">
            <summary>
            Indicates that an integration was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.StageInstanceCreate">
            <summary>
            Indicates that an stage instance was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.StageInstanceUpdate">
            <summary>
            Indicates that an stage instance was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.StageInstanceDelete">
            <summary>
            Indicates that an stage instance was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.StickerCreate">
            <summary>
            Indicates that an sticker was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.StickerUpdate">
            <summary>
            Indicates that an sticker was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.StickerDelete">
            <summary>
            Indicates that an sticker was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.GuildScheduledEventCreate">
            <summary>
            Indicates that an event was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.GuildScheduledEventUpdate">
            <summary>
            Indicates that an event was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.GuildScheduledEventDelete">
            <summary>
            Indicates that an event was deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.ThreadCreate">
            <summary>
            Indicates that an thread was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.ThreadUpdate">
            <summary>
            Indicates that an thread was updated.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.AuditLogActionType.ThreadDelete">
            <summary>
            Indicates that an thread was deleted.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordBan">
            <summary>
            Represents a Discord ban
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordBan.Reason">
            <summary>
            Gets the reason for the ban
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordBan.User">
            <summary>
            Gets the banned user
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordBan.RawUser">
            <summary>
            Gets the raw user.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordBan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordBan"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuild">
            <summary>
            Represents a Discord guild.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetAuditLogsAsync(System.Nullable{System.Int32},DisCatSharp.Entities.DiscordMember,System.Nullable{DisCatSharp.Entities.AuditLogActionType})">
            <summary>
            Gets audit log entries for this guild.
            </summary>
            <param name="limit">Maximum number of entries to fetch.</param>
            <param name="byMember">Filter by member responsible.</param>
            <param name="actionType">Filter by action type.</param>
            <returns>A collection of requested audit log entries.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ViewAuditLog"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Name">
            <summary>
            Gets the guild's name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.IconHash">
            <summary>
            Gets the guild icon's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.IconUrl">
            <summary>
            Gets the guild icon's url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.SplashHash">
            <summary>
            Gets the guild splash's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.SplashUrl">
            <summary>
            Gets the guild splash's url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.DiscoverySplashHash">
            <summary>
            Gets the guild discovery splash's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.DiscoverySplashUrl">
            <summary>
            Gets the guild discovery splash's url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.PreferredLocale">
            <summary>
            Gets the preferred locale of this guild.
            <para>This is used for server discovery, interactions and notices from Discord. Defaults to en-US.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.OwnerId">
            <summary>
            Gets the ID of the guild's owner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Owner">
            <summary>
            Gets the guild's owner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Permissions">
            <summary>
            Gets permissions for the user in the guild (does not include channel overrides)
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.VoiceRegionId">
            <summary>
            Gets the guild's voice region ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.VoiceRegion">
            <summary>
            Gets the guild's voice region.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.AfkChannelId">
            <summary>
            Gets the guild's AFK voice channel ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.AfkChannel">
            <summary>
            Gets the guild's AFK voice channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.RegisteredApplicationCommands">
            <summary>
            List of <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.
            Null if DisCatSharp.ApplicationCommands is not used or no guild commands are registered.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.AfkTimeout">
            <summary>
            Gets the guild's AFK timeout.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.VerificationLevel">
            <summary>
            Gets the guild's verification level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.DefaultMessageNotifications">
            <summary>
            Gets the guild's default notification settings.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.ExplicitContentFilter">
            <summary>
            Gets the guild's explicit content filter settings.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.NsfwLevel">
            <summary>
            Gets the guild's nsfw level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.SystemChannelId">
            <summary>
            Gets the system channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.SystemChannel">
            <summary>
            Gets the channel where system messages (such as boost and welcome messages) are sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.SystemChannelFlags">
            <summary>
            Gets the settings for this guild's system channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.WidgetEnabled">
            <summary>
            Gets whether this guild's widget is enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.WidgetChannelId">
            <summary>
            Gets the widget channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.WidgetChannel">
            <summary>
            Gets the widget channel for this guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.RulesChannelId">
            <summary>
            Gets the rules channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.RulesChannel">
            <summary>
            Gets the rules channel for this guild.
            <para>This is only available if the guild is considered "discoverable".</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.PublicUpdatesChannelId">
            <summary>
            Gets the public updates channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.PublicUpdatesChannel">
            <summary>
            Gets the public updates channel (where admins and moderators receive messages from Discord) for this guild.
            <para>This is only available if the guild is considered "discoverable".</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.ApplicationId">
            <summary>
            Gets the application id of this guild if it is bot created.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Roles">
            <summary>
            Gets a collection of this guild's roles.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Stickers">
            <summary>
            Gets a collection of this guild's stickers.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Emojis">
            <summary>
            Gets a collection of this guild's emojis.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.RawFeatures">
            <summary>
            Gets a collection of this guild's features.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Features">
            <summary>
            Gets the guild's features.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.MfaLevel">
            <summary>
            Gets the required multi-factor authentication level for this guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.JoinedAt">
            <summary>
            Gets this guild's join date.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.IsLarge">
            <summary>
            Gets whether this guild is considered to be a large guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.IsUnavailable">
            <summary>
            Gets whether this guild is unavailable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.MemberCount">
            <summary>
            Gets the total number of members in this guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.MaxMembers">
            <summary>
            Gets the maximum amount of members allowed for this guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.MaxPresences">
            <summary>
            Gets the maximum amount of presences allowed for this guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.ApproximateMemberCount">
            <summary>
            Gets the approximate number of members in this guild, when using <see cref="M:DisCatSharp.DiscordClient.GetGuildAsync(System.UInt64,System.Nullable{System.Boolean})"/> and having withCounts set to true.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.ApproximatePresenceCount">
            <summary>
            Gets the approximate number of presences in this guild, when using <see cref="M:DisCatSharp.DiscordClient.GetGuildAsync(System.UInt64,System.Nullable{System.Boolean})"/> and having withCounts set to true.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.MaxVideoChannelUsers">
            <summary>
            Gets the maximum amount of users allowed per video channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.VoiceStates">
            <summary>
            Gets a dictionary of all the voice states for this guilds. The key for this dictionary is the ID of the user
            the voice state corresponds to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Members">
            <summary>
            Gets a dictionary of all the members that belong to this guild. The dictionary's key is the member ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Channels">
            <summary>
            Gets a dictionary of all the channels associated with this guild. The dictionary's key is the channel ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Threads">
            <summary>
            Gets a dictionary of all the active threads associated with this guild the user has permission to view. The dictionary's key is the channel ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.StageInstances">
            <summary>
            Gets a dictionary of all active stage instances. The dictionary's key is the stage ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.ScheduledEvents">
            <summary>
            Gets a dictionary of all scheduled events.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.CurrentMember">
            <summary>
            Gets the guild member for current user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.EveryoneRole">
            <summary>
            Gets the @everyone role for this guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.IsOwner">
            <summary>
            Gets whether the current user is the guild's owner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.VanityUrlCode">
            <summary>
            Gets the vanity URL code for this guild, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.Description">
            <summary>
            Gets the guild description, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.BannerHash">
            <summary>
            Gets this guild's banner hash, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.BannerUrl">
            <summary>
            Gets this guild's banner in url form.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.IsCommunity">
            <summary>
            Whether this guild has the community feature enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.HasWelcomeScreen">
            <summary>
            Whether this guild has enabled the welcome screen.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.HasMemberVerificationGate">
            <summary>
            Whether this guild has enabled membership screening.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.PremiumTier">
            <summary>
            Gets this guild's premium tier (Nitro boosting).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.PremiumSubscriptionCount">
            <summary>
            Gets the amount of members that boosted this guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.PremiumProgressBarEnabled">
            <summary>
            Whether the premium progress bar is enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.IsNsfw">
            <summary>
            Gets whether this guild is designated as NSFW.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.HubType">
            <summary>
            Gets this guild's hub type, if applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.OrderedChannels">
            <summary>
            Gets a dictionary of all by position ordered channels associated with this guild. The dictionary's key is the channel ID.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.InternalSortChannels">
            <summary>
            Sorts the channels.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetOrderedChannels">
            <summary>
            Gets an ordered <see cref="T:DisCatSharp.Entities.DiscordChannel"/> list out of the channel cache.
            Returns a Dictionary where the key is an ulong and can be mapped to <see cref="F:DisCatSharp.ChannelType.Category"/> <see cref="T:DisCatSharp.Entities.DiscordChannel"/>s.
            Ignore the 0 key here, because that indicates that this is the "has no category" list.
            Each value contains a ordered list of text/news and voice/stage channels as <see cref="T:DisCatSharp.Entities.DiscordChannel"/>.
            </summary>
            <returns>A ordered list of categories with its channels</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetOrderedChannelsAsync">
            <summary>
            Gets an ordered <see cref="T:DisCatSharp.Entities.DiscordChannel"/> list.
            Returns a Dictionary where the key is an ulong and can be mapped to <see cref="F:DisCatSharp.ChannelType.Category"/> <see cref="T:DisCatSharp.Entities.DiscordChannel"/>s.
            Ignore the 0 key here, because that indicates that this is the "has no category" list.
            Each value contains a ordered list of text/news and voice/stage channels as <see cref="T:DisCatSharp.Entities.DiscordChannel"/>.
            </summary>
            <returns>A ordered list of categories with its channels</returns>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuild.IsSynced">
            <summary>
            Whether it is synced.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordGuild"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.SearchMembersAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Searches the current guild for members who's display name start with the specified name.
            </summary>
            <param name="name">The name to search for.</param>
            <param name="limit">The maximum amount of members to return. Max 1000. Defaults to 1.</param>
            <returns>The members found, if any.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.AddMemberAsync(DisCatSharp.Entities.DiscordUser,System.String,System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordRole},System.Boolean,System.Boolean)">
            <summary>
            Adds a new member to this guild
            </summary>
            <param name="user">User to add</param>
            <param name="accessToken">User's access token (OAuth2)</param>
            <param name="nickname">new nickname</param>
            <param name="roles">new roles</param>
            <param name="muted">whether this user has to be muted</param>
            <param name="deaf">whether this user has to be deafened</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.CreateInstantInvite" /> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the <paramref name="user"/> or <paramref name="accessToken"/> is not found.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.DeleteAsync">
            <summary>
            Deletes this guild. Requires the caller to be the owner of the guild.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client is not the owner of the guild.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyAsync(System.Action{DisCatSharp.Net.Models.GuildEditModel})">
            <summary>
            Modifies this guild.
            </summary>
            <param name="action">Action to perform on this guild..</param>
            <returns>The modified guild object.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyCommunitySettingsAsync(System.Boolean,DisCatSharp.Entities.DiscordChannel,DisCatSharp.Entities.DiscordChannel,System.String,System.String,DisCatSharp.Entities.DefaultMessageNotifications,System.String)">
            <summary>
            Modifies the community settings async.
            This sets <see cref="F:DisCatSharp.Entities.VerificationLevel.High"/> if not highest and <see cref="F:DisCatSharp.Entities.ExplicitContentFilter.AllMembers"/>.
            </summary>
            <param name="enabled">If true, enable <see cref="P:DisCatSharp.Entities.GuildFeatures.HasCommunityEnabled"/>.</param>
            <param name="rulesChannel">The rules channel.</param>
            <param name="publicUpdatesChannel">The public updates channel.</param>
            <param name="preferredLocale">The preferred locale. Defaults to en-US.</param>
            <param name="description">The description.</param>
            <param name="defaultMessageNotifications">The default message notifications. Defaults to <see cref="F:DisCatSharp.Entities.DefaultMessageNotifications.MentionsOnly"/></param>
            <param name="reason">The auditlog reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.TimeoutAsync(System.UInt64,System.DateTimeOffset,System.String)">
            <summary>
            Timeout a specified member in this guild.
            </summary>
            <param name="memberId">Member to timeout.</param>
            <param name="until">The datetime offset to time out the user. Up to 28 days.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ModerateMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.TimeoutAsync(System.UInt64,System.TimeSpan,System.String)">
            <summary>
            Timeout a specified member in this guild.
            </summary>
            <param name="memberId">Member to timeout.</param>
            <param name="until">The timespan to time out the user. Up to 28 days.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ModerateMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.TimeoutAsync(System.UInt64,System.DateTime,System.String)">
            <summary>
            Timeout a specified member in this guild.
            </summary>
            <param name="memberId">Member to timeout.</param>
            <param name="until">The datetime to time out the user. Up to 28 days.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ModerateMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.RemoveTimeoutAsync(System.UInt64,System.String)">
            <summary>
            Removes the timeout from a specified member in this guild.
            </summary>
            <param name="memberId">Member to remove the timeout from.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ModerateMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.BanMemberAsync(DisCatSharp.Entities.DiscordMember,System.Int32,System.String)">
            <summary>
            Bans a specified member from this guild.
            </summary>
            <param name="member">Member to ban.</param>
            <param name="deleteMessageDays">How many days to remove messages from.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.BanMemberAsync(System.UInt64,System.Int32,System.String)">
            <summary>
            Bans a specified user by ID. This doesn't require the user to be in this guild.
            </summary>
            <param name="userId">ID of the user to ban.</param>
            <param name="deleteMessageDays">How many days to remove messages from.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.UnbanMemberAsync(DisCatSharp.Entities.DiscordUser,System.String)">
            <summary>
            Unbans a user from this guild.
            </summary>
            <param name="user">User to unban.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the user does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.UnbanMemberAsync(System.UInt64,System.String)">
            <summary>
            Unbans a user by ID.
            </summary>
            <param name="userId">ID of the user to unban.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the user does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.LeaveAsync">
            <summary>
            Leaves this guild.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetBansAsync(System.Nullable{System.Int32},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets the bans for this guild, allowing for pagination.
            </summary>
            <param name="limit">Maximum number of bans to fetch. Max 1000. Defaults to 1000.</param>
            <param name="before">The Id of the user before which to fetch the bans. Overrides <paramref name="after"/> if both are present.</param>
            <param name="after">The Id of the user after which to fetch the bans.</param>
            <returns>Collection of bans in this guild in ascending order by user id.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetBanAsync(System.UInt64)">
            <summary>
            Gets a ban for a specific user.
            </summary>
            <param name="userId">The Id of the user to get the ban for.</param>
            <returns>The requested ban object.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the specified user is not banned.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetBanAsync(DisCatSharp.Entities.DiscordUser)">
            <summary>
            Gets a ban for a specific user.
            </summary>
            <param name="user">The user to get the ban for.</param>
            <returns>The requested ban object.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the specified user is not banned.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateScheduledEventAsync(System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},DisCatSharp.Entities.DiscordChannel,DisCatSharp.Entities.DiscordScheduledEventEntityMetadata,System.String,DisCatSharp.ScheduledEventEntityType,DisCatSharp.Entities.Optional{System.IO.Stream},System.String)">
            <summary>
            Creates a scheduled event.
            </summary>
            <param name="name">The name.</param>
            <param name="scheduledStartTime">The scheduled start time.</param>
            <param name="scheduledEndTime">The scheduled end time.</param>
            <param name="channel">The channel.</param>
            <param name="metadata">The metadata.</param>
            <param name="description">The description.</param>
            <param name="type">The type.</param>
            <param name="coverImage">The cover image.</param>
            <param name="reason">The reason.</param>
            <returns>A scheduled event.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateExternalScheduledEventAsync(System.String,System.DateTimeOffset,System.DateTimeOffset,System.String,System.String,DisCatSharp.Entities.Optional{System.IO.Stream},System.String)">
            <summary>
            Creates a scheduled event with type <see cref="F:DisCatSharp.ScheduledEventEntityType.External"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="scheduledStartTime">The scheduled start time.</param>
            <param name="scheduledEndTime">The scheduled end time.</param>
            <param name="location">The location of the external event.</param>
            <param name="description">The description.</param>
            <param name="coverImage">The cover image.</param>
            <param name="reason">The reason.</param>
            <returns>A scheduled event.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetScheduledEventAsync(System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Gets a specific scheduled events.
            </summary>
            <param name="scheduledEventId">The Id of the event to get.</param>
            <param name="withUserCount">Whether to include user count.</param>
            <returns>A scheduled event.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetScheduledEventAsync(DisCatSharp.Entities.DiscordScheduledEvent,System.Nullable{System.Boolean})">
            <summary>
            Gets a specific scheduled events.
            </summary>
            <param name="scheduledEvent">The event to get.</param>
            <param name="withUserCount">Whether to include user count.</param>
            <returns>A sheduled event.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetScheduledEventsAsync(System.Nullable{System.Boolean})">
            <summary>
            Gets the guilds scheduled events.
            </summary>
            <param name="withUserCount">Whether to include user count.</param>
            <returns>A list of the guilds scheduled events.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateTextChannelAsync(System.String,DisCatSharp.Entities.DiscordChannel,DisCatSharp.Entities.Optional{System.String},System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordOverwriteBuilder},System.Nullable{System.Boolean},DisCatSharp.Entities.Optional{System.Nullable{System.Int32}},DisCatSharp.ThreadAutoArchiveDuration,System.String)">
            <summary>
            Creates a new text channel in this guild.
            </summary>
            <param name="name">Name of the new channel.</param>
            <param name="parent">Category to put this channel in.</param>
            <param name="topic">Topic of the channel.</param>
            <param name="overwrites">Permission overwrites for this channel.</param>
            <param name="nsfw">Whether the channel is to be flagged as not safe for work.</param>
            <param name="perUserRateLimit">Slow mode timeout for users.</param>
            <param name="defaultAutoArchiveDuration">The default auto archive duration for new threads.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created channel.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateChannelCategoryAsync(System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordOverwriteBuilder},System.String)">
            <summary>
            Creates a new channel category in this guild.
            </summary>
            <param name="name">Name of the new category.</param>
            <param name="overwrites">Permission overwrites for this category.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created channel category.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateStageChannelAsync(System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordOverwriteBuilder},System.String)">
            <summary>
            Creates a new stage channel in this guild.
            </summary>
            <param name="name">Name of the new stage channel.</param>
            <param name="overwrites">Permission overwrites for this stage channel.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created stage channel.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/>.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the guilds has not enabled community.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateNewsChannelAsync(System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordOverwriteBuilder},System.String,DisCatSharp.ThreadAutoArchiveDuration)">
            <summary>
            Creates a new news channel in this guild.
            </summary>
            <param name="name">Name of the new news channel.</param>
            <param name="overwrites">Permission overwrites for this news channel.</param>
            <param name="defaultAutoArchiveDuration">The default auto archive duration for new threads.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created news channel.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/>.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the guilds has not enabled community.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateVoiceChannelAsync(System.String,DisCatSharp.Entities.DiscordChannel,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordOverwriteBuilder},System.Nullable{DisCatSharp.VideoQualityMode},System.String)">
            <summary>
            Creates a new voice channel in this guild.
            </summary>
            <param name="name">Name of the new channel.</param>
            <param name="parent">Category to put this channel in.</param>
            <param name="bitrate">Bitrate of the channel.</param>
            <param name="userLimit">Maximum number of users in the channel.</param>
            <param name="overwrites">Permission overwrites for this channel.</param>
            <param name="qualityMode">Video quality mode of the channel.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created channel.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateChannelAsync(System.String,DisCatSharp.ChannelType,DisCatSharp.Entities.DiscordChannel,DisCatSharp.Entities.Optional{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordOverwriteBuilder},System.Nullable{System.Boolean},DisCatSharp.Entities.Optional{System.Nullable{System.Int32}},System.Nullable{DisCatSharp.VideoQualityMode},System.Nullable{DisCatSharp.ThreadAutoArchiveDuration},System.String)">
            <summary>
            Creates a new channel in this guild.
            </summary>
            <param name="name">Name of the new channel.</param>
            <param name="type">Type of the new channel.</param>
            <param name="parent">Category to put this channel in.</param>
            <param name="topic">Topic of the channel.</param>
            <param name="bitrate">Bitrate of the channel. Applies to voice only.</param>
            <param name="userLimit">Maximum number of users in the channel. Applies to voice only.</param>
            <param name="overwrites">Permission overwrites for this channel.</param>
            <param name="nsfw">Whether the channel is to be flagged as not safe for work. Applies to text only.</param>
            <param name="perUserRateLimit">Slow mode timeout for users.</param>
            <param name="qualityMode">Video quality mode of the channel. Applies to voice only.</param>
            <param name="defaultAutoArchiveDuration">The default auto archive duration for new threads.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created channel.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetActiveThreadsAsync">
            <summary>
            Gets active threads. Can contain more threads.
            If the result's value 'HasMore' is true, you need to recall this function to get older threads.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.DeleteAllChannelsAsync">
            <summary>
            <para>Deletes all channels in this guild.</para>
            <para>Note that this is irreversible. Use carefully!</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetPruneCountAsync(System.Int32,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordRole})">
            <summary>
            Estimates the number of users to be pruned.
            </summary>
            <param name="days">Minimum number of inactivity days required for users to be pruned. Defaults to 7.</param>
            <param name="includedRoles">The roles to be included in the prune.</param>
            <returns>Number of users that will be pruned.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.KickMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.PruneAsync(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordRole},System.String)">
            <summary>
            Prunes inactive users from this guild.
            </summary>
            <param name="days">Minimum number of inactivity days required for users to be pruned. Defaults to 7.</param>
            <param name="computePruneCount">Whether to return the prune count after this method completes. This is discouraged for larger guilds.</param>
            <param name="includedRoles">The roles to be included in the prune.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>Number of users pruned.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetIntegrationsAsync">
            <summary>
            Gets integrations attached to this guild.
            </summary>
            <returns>Collection of integrations attached to this guild.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.AttachUserIntegrationAsync(DisCatSharp.Entities.DiscordIntegration)">
            <summary>
            Attaches an integration from current user to this guild.
            </summary>
            <param name="integration">Integration to attach.</param>
            <returns>The integration after being attached to the guild.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyIntegrationAsync(DisCatSharp.Entities.DiscordIntegration,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Modifies an integration in this guild.
            </summary>
            <param name="integration">Integration to modify.</param>
            <param name="expireBehaviour">Number of days after which the integration expires.</param>
            <param name="expireGracePeriod">Length of grace period which allows for renewing the integration.</param>
            <param name="enableEmoticons">Whether emotes should be synced from this integration.</param>
            <returns>The modified integration.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.DeleteIntegrationAsync(DisCatSharp.Entities.DiscordIntegration)">
            <summary>
            Removes an integration from this guild.
            </summary>
            <param name="integration">Integration to remove.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.SyncIntegrationAsync(DisCatSharp.Entities.DiscordIntegration)">
            <summary>
            Forces re-synchronization of an integration for this guild.
            </summary>
            <param name="integration">Integration to synchronize.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the guild does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ListVoiceRegionsAsync">
            <summary>
            Gets the voice regions for this guild.
            </summary>
            <returns>Voice regions available for this guild.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetInvite(System.String)">
            <summary>
            Gets an invite from this guild from an invite code.
            </summary>
            <param name="code">The invite code</param>
            <returns>An invite, or null if not in cache.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetInvitesAsync">
            <summary>
            Gets all the invites created for all the channels in this guild.
            </summary>
            <returns>A collection of invites.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetVanityInviteAsync">
            <summary>
            Gets the vanity invite for this guild.
            </summary>
            <returns>A partial vanity invite.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetWebhooksAsync">
            <summary>
            Gets all the webhooks created for all the channels in this guild.
            </summary>
            <returns>A collection of webhooks this guild has.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetWidgetImage(DisCatSharp.Entities.WidgetType)">
            <summary>
            Gets this guild's widget image.
            </summary>
            <param name="bannerType">The format of the widget.</param>
            <returns>The URL of the widget image.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetMemberAsync(System.UInt64)">
            <summary>
            Gets a member of this guild by their user ID.
            </summary>
            <param name="userId">ID of the member to get.</param>
            <returns>The requested member.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetAllMembersAsync">
            <summary>
            Retrieves a full list of members from Discord. This method will bypass cache.
            </summary>
            <returns>A collection of all members in this guild.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.RequestMembersAsync(System.String,System.Int32,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Requests that Discord send a list of guild members based on the specified arguments. This method will fire the <see cref="E:DisCatSharp.DiscordClient.GuildMembersChunked"/> event.
            <para>If no arguments aside from <paramref name="presences"/> and <paramref name="nonce"/> are specified, this will request all guild members.</para>
            </summary>
            <param name="query">Filters the returned members based on what the username starts with. Either this or <paramref name="userIds"/> must not be null.
            The <paramref name="limit"/> must also be greater than 0 if this is specified.</param>
            <param name="limit">Total number of members to request. This must be greater than 0 if <paramref name="query"/> is specified.</param>
            <param name="presences">Whether to include the <see cref="P:DisCatSharp.EventArgs.GuildMembersChunkEventArgs.Presences"/> associated with the fetched members.</param>
            <param name="userIds">Whether to limit the request to the specified user ids. Either this or <paramref name="query"/> must not be null.</param>
            <param name="nonce">The unique string to identify the response.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetChannelsAsync">
            <summary>
            Gets all the channels this guild has.
            </summary>
            <returns>A collection of this guild's channels.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateRoleAsync(System.String,System.Nullable{DisCatSharp.Permissions},System.Nullable{DisCatSharp.Entities.DiscordColor},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Creates a new role in this guild.
            </summary>
            <param name="name">Name of the role.</param>
            <param name="permissions">Permissions for the role.</param>
            <param name="color">Color for the role.</param>
            <param name="hoist">Whether the role is to be hoisted.</param>
            <param name="mentionable">Whether the role is to be mentionable.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The newly-created role.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetRole(System.UInt64)">
            <summary>
            Gets a role from this guild by its ID.
            </summary>
            <param name="id">ID of the role to get.</param>
            <returns>Requested role.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetChannel(System.UInt64)">
            <summary>
            Gets a channel from this guild by its ID.
            </summary>
            <param name="id">ID of the channel to get.</param>
            <returns>Requested channel.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetThread(System.UInt64)">
            <summary>
            Gets a thread from this guild by its ID.
            </summary>
            <param name="id">ID of the thread to get.</param>
            <returns>Requested thread.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetEmojisAsync">
            <summary>
            Gets all of this guild's custom emojis.
            </summary>
            <returns>All of this guild's custom emojis.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetEmojiAsync(System.UInt64)">
            <summary>
            Gets this guild's specified custom emoji.
            </summary>
            <param name="id">ID of the emoji to get.</param>
            <returns>The requested custom emoji.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateEmojiAsync(System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordRole},System.String)">
            <summary>
            Creates a new custom emoji for this guild.
            </summary>
            <param name="name">Name of the new emoji.</param>
            <param name="image">Image to use as the emoji.</param>
            <param name="roles">Roles for which the emoji will be available. This works only if your application is whitelisted as integration.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The newly-created emoji.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyEmojiAsync(DisCatSharp.Entities.DiscordGuildEmoji,System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordRole},System.String)">
            <summary>
            Modifies a this guild's custom emoji.
            </summary>
            <param name="emoji">Emoji to modify.</param>
            <param name="name">New name for the emoji.</param>
            <param name="roles">Roles for which the emoji will be available. This works only if your application is whitelisted as integration.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The modified emoji.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.DeleteEmojiAsync(DisCatSharp.Entities.DiscordGuildEmoji,System.String)">
            <summary>
            Deletes this guild's custom emoji.
            </summary>
            <param name="emoji">Emoji to delete.</param>
            <param name="reason">Reason for audit log.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetStickersAsync">
            <summary>
            Gets all of this guild's custom stickers.
            </summary>
            <returns>All of this guild's custom stickers.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetStickerAsync(System.UInt64)">
            <summary>
            Gets a sticker
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the sticker could not be found.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.ArgumentException">Sticker does not belong to a guild.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateStickerAsync(System.String,System.String,DisCatSharp.Entities.DiscordEmoji,System.IO.Stream,DisCatSharp.Entities.StickerFormat,System.String)">
            <summary>
            Creates a sticker
            </summary>
            <param name="name">The name of the sticker.</param>
            <param name="description">The optional description of the sticker.</param>
            <param name="emoji">The emoji to associate the sticker with.</param>
            <param name="format">The file format the sticker is written in.</param>
            <param name="file">The sticker.</param>
            <param name="reason">Audit log reason</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyStickerAsync(System.UInt64,DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordEmoji},System.String)">
            <summary>
            Modifies a sticker
            </summary>
            <param name="sticker">The id of the sticker to modify</param>
            <param name="name">The name of the sticker</param>
            <param name="description">The description of the sticker</param>
            <param name="emoji">The emoji to associate with this sticker.</param>
            <param name="reason">Audit log reason</param>
            <returns>A sticker object</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the sticker could not be found.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.ArgumentException">Sticker does not belong to a guild.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyStickerAsync(DisCatSharp.Entities.DiscordSticker,DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordEmoji},System.String)">
            <summary>
            Modifies a sticker
            </summary>
            <param name="sticker">The sticker to modify</param>
            <param name="name">The name of the sticker</param>
            <param name="description">The description of the sticker</param>
            <param name="emoji">The emoji to associate with this sticker.</param>
            <param name="reason">Audit log reason</param>
            <returns>A sticker object</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the sticker could not be found.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.ArgumentException">Sticker does not belong to a guild.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.DeleteStickerAsync(System.UInt64,System.String)">
            <summary>
            Deletes a sticker
            </summary>
            <param name="sticker">Id of sticker to delete</param>
            <param name="reason">Audit log reason</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the sticker could not be found.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.ArgumentException">Sticker does not belong to a guild.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.DeleteStickerAsync(DisCatSharp.Entities.DiscordSticker,System.String)">
            <summary>
            Deletes a sticker
            </summary>
            <param name="sticker">Sticker to delete</param>
            <param name="reason">Audit log reason</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the sticker could not be found.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.ArgumentException">Sticker does not belong to a guild.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetDefaultChannel">
            <summary>
            <para>Gets the default channel for this guild.</para>
            <para>Default channel is the first channel current member can see.</para>
            </summary>
            <returns>This member's default guild.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetWidgetAsync">
            <summary>
            Gets the guild's widget
            </summary>
            <returns>The guild's widget</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetWidgetSettingsAsync">
            <summary>
            Gets the guild's widget settings
            </summary>
            <returns>The guild's widget settings</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyWidgetSettingsAsync(System.Nullable{System.Boolean},DisCatSharp.Entities.DiscordChannel,System.String)">
            <summary>
            Modifies the guild's widget settings
            </summary>
            <param name="isEnabled">If the widget is enabled or not</param>
            <param name="channel">Widget channel</param>
            <param name="reason">Reason the widget settings were modified</param>
            <returns>The newly modified widget settings</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetTemplatesAsync">
            <summary>
            Gets all of this guild's templates.
            </summary>
            <returns>All of the guild's templates.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateTemplateAsync(System.String,System.String)">
            <summary>
            Creates a guild template.
            </summary>
            <param name="name">Name of the template.</param>
            <param name="description">Description of the template.</param>
            <returns>The template created.</returns>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Throws when a template already exists for the guild or a null parameter is provided for the name.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.SyncTemplateAsync(System.String)">
            <summary>
            Syncs the template to the current guild's state.
            </summary>
            <param name="code">The code of the template to sync.</param>
            <returns>The template synced.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Throws when the template for the code cannot be found</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyTemplateAsync(System.String,System.String,System.String)">
            <summary>
            Modifies the template's metadata.
            </summary>
            <param name="code">The template's code.</param>
            <param name="name">Name of the template.</param>
            <param name="description">Description of the template.</param>
            <returns>The template modified.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Throws when the template for the code cannot be found</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.DeleteTemplateAsync(System.String)">
            <summary>
            Deletes the template.
            </summary>
            <param name="code">The code of the template to delete.</param>
            <returns>The deleted template.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Throws when the template for the code cannot be found</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Throws when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetMembershipScreeningFormAsync">
            <summary>
            Gets this guild's membership screening form.
            </summary>
            <returns>This guild's membership screening form.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyMembershipScreeningFormAsync(System.Action{DisCatSharp.Net.Models.MembershipScreeningEditModel})">
            <summary>
            Modifies this guild's membership screening form.
            </summary>
            <param name="action">Action to perform</param>
            <returns>The modified screening form.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client doesn't have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission, or community is not enabled on this guild.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetApplicationCommandsAsync">
            <summary>
            Gets all the application commands in this guild.
            </summary>
            <returns>A list of application commands in this guild.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.BulkOverwriteApplicationCommandsAsync(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommand})">
            <summary>
            Overwrites the existing application commands in this guild. New commands are automatically created and missing commands are automatically delete
            </summary>
            <param name="commands">The list of commands to overwrite with.</param>
            <returns>The list of guild commands</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.CreateApplicationCommandAsync(DisCatSharp.Entities.DiscordApplicationCommand)">
            <summary>
            Creates or overwrites a application command in this guild.
            </summary>
            <param name="command">The command to create.</param>
            <returns>The created command.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.EditApplicationCommandAsync(System.UInt64,System.Action{DisCatSharp.Net.Models.ApplicationCommandEditModel})">
            <summary>
            Edits a application command in this guild.
            </summary>
            <param name="commandId">The id of the command to edit.</param>
            <param name="action">Action to perform.</param>
            <returns>The edit command.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetWelcomeScreenAsync">
            <summary>
            Gets this guild's welcome screen.
            </summary>
            <returns>This guild's welcome screen object.</returns>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ModifyWelcomeScreenAsync(System.Action{DisCatSharp.Net.Models.WelcomeScreenEditModel})">
            <summary>
            Modifies this guild's welcome screen.
            </summary>
            <param name="action">Action to perform.</param>
            <returns>The modified welcome screen.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client doesn't have the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission, or community is not enabled on this guild.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.ToString">
            <summary>
            Returns a string representation of this guild.
            </summary>
            <returns>String representation of this guild.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordGuild"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordGuild"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.Equals(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordGuild"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordGuild"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordGuild"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordGuild"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordGuild"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordGuild"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordGuild"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.op_Equality(DisCatSharp.Entities.DiscordGuild,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordGuild"/> objects are equal.
            </summary>
            <param name="e1">First guild to compare.</param>
            <param name="e2">Second guild to compare.</param>
            <returns>Whether the two guilds are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuild.op_Inequality(DisCatSharp.Entities.DiscordGuild,DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordGuild"/> objects are not equal.
            </summary>
            <param name="e1">First guild to compare.</param>
            <param name="e2">Second guild to compare.</param>
            <returns>Whether the two guilds are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.VerificationLevel">
            <summary>
            Represents guild verification level.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.VerificationLevel.None">
            <summary>
            No verification. Anyone can join and chat right away.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.VerificationLevel.Low">
            <summary>
            Low verification level. Users are required to have a verified email attached to their account in order to be able to chat.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.VerificationLevel.Medium">
            <summary>
            Medium verification level. Users are required to have a verified email attached to their account, and account age need to be at least 5 minutes in order to be able to chat.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.VerificationLevel.High">
            <summary>
            High verification level. Users are required to have a verified email attached to their account, account age need to be at least 5 minutes, and they need to be in the server for at least 10 minutes in order to be able to chat.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.VerificationLevel.Highest">
            <summary>
            Highest verification level. Users are required to have a verified phone number attached to their account.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DefaultMessageNotifications">
            <summary>
            Represents default notification level for a guild.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DefaultMessageNotifications.AllMessages">
            <summary>
            All messages will trigger push notifications.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DefaultMessageNotifications.MentionsOnly">
            <summary>
            Only messages that mention the user (or a role he's in) will trigger push notifications.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.MfaLevel">
            <summary>
            Represents multi-factor authentication level required by a guild to use administrator functionality.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.MfaLevel.Disabled">
            <summary>
            Multi-factor authentication is not required to use administrator functionality.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.MfaLevel.Enabled">
            <summary>
            Multi-factor authentication is required to use administrator functionality.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.ExplicitContentFilter">
            <summary>
            Represents the value of explicit content filter in a guild.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ExplicitContentFilter.Disabled">
            <summary>
            Explicit content filter is disabled.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ExplicitContentFilter.MembersWithoutRoles">
            <summary>
            Only messages from members without any roles are scanned.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ExplicitContentFilter.AllMembers">
            <summary>
            Messages from all members are scanned.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.WidgetType">
            <summary>
            Represents the formats for a guild widget.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.WidgetType.Shield">
            <summary>
            The widget is represented in shield format.
            <para>This is the default widget type.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.WidgetType.Banner1">
            <summary>
            The widget is represented as the first banner type.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.WidgetType.Banner2">
            <summary>
            The widget is represented as the second banner type.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.WidgetType.Banner3">
            <summary>
            The widget is represented as the third banner type.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.WidgetType.Banner4">
            <summary>
            The widget is represented in the fourth banner type.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.GuildFeatures">
            <summary>
            Represents the guild features.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetAnimatedIcon">
            <summary>
            Guild has access to set an animated guild icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetBanner">
            <summary>
            Guild has access to set a guild banner image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanCreateStoreChannels">
            <summary>
            Guild has access to use commerce features (i.e. create store channels)
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasCommunityEnabled">
            <summary>
            Guild can enable Welcome Screen, Membership Screening, Stage Channels, News Channels and receives community updates.
            Furthermore the guild can apply as a partner and for the discovery (if the prerequisites are given).
            <see cref="F:DisCatSharp.ChannelType.Stage"/> and <see cref="F:DisCatSharp.ChannelType.News"/> is usable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.IsDiscoverable">
            <summary>
            Guild is able to be discovered in the discovery.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.IsFeatureable">
            <summary>
            Guild is able to be featured in the discovery.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetInviteSplash">
            <summary>
            Guild has access to set an invite splash background.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasMembershipScreeningEnabled">
            <summary>
            Guild has enabled Membership Screening.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanCreateNewsChannels">
            <summary>
            Guild has access to create news channels.
            <see cref="F:DisCatSharp.ChannelType.News"/> is usable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.IsPartnered">
            <summary>
            Guild is partnered.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanUploadMoreEmojis">
            <summary>
            Guild has increased custom emoji slots.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasPreviewEnabled">
            <summary>
            Guild can be previewed before joining via Membership Screening or the discovery.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetVanityUrl">
            <summary>
            Guild has access to set a vanity URL.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.IsVerified">
            <summary>
            Guild is verified.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanAccessVipRegions">
            <summary>
            Guild has access to set 384kbps bitrate in voice (previously VIP voice servers).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasWelcomeScreenEnabled">
            <summary>
            Guild has enabled the welcome screen.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasTicketedEventsEnabled">
            <summary>
            Guild has enabled ticketed events.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasMonetizationEnabled">
            <summary>
            Guild has enabled monetization.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanUploadMoreStickers">
            <summary>
            Guild has increased custom sticker slots.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetThreadArchiveDurationThreeDays">
            <summary>
            Guild has access to the three day archive time for threads.
            Needs Premium Tier 1 (<see cref="F:DisCatSharp.PremiumTier.TierOne"/>).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetThreadArchiveDurationSevenDays">
            <summary>
            Guild has access to the seven day archive time for threads.
            Needs Premium Tier 2 (<see cref="F:DisCatSharp.PremiumTier.TierTwo"/>).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanCreatePrivateThreads">
            <summary>
            Guild has access to create private threads.
            Needs Premium Tier 2 (<see cref="F:DisCatSharp.PremiumTier.TierTwo"/>).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.IsHub">
            <summary>
            Guild is a hub.
            <see cref="F:DisCatSharp.ChannelType.GuildDirectory"/> is usable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasDirectoryEntry">
            <summary>
            Guild is in a hub.
            https://github.com/discord/discord-api-docs/pull/3757/commits/4932d92c9d0c783861bc715bf7ebbabb15114e34
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.IsLinkedToHub">
            <summary>
            Guild is linked to a hub.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasThreadTestingEnabled">
            <summary>
            Guild has full access to threads.
            Old Feature.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasThreadsEnabled">
            <summary>
            Guild has access to threads.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetRoleIcons">
            <summary>
            Guild can set role icons.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasNewThreadPermissions">
            <summary>
            Guild has the new thread permissions.
            Old Feature.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetThreadDefaultAutoArchiveDuration">
            <summary>
            Guild can set thread default auto archive duration.
            Old Feature.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasRoleSubscriptionsEnabled">
            <summary>
            Guild has enabled role subsriptions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.RoleSubscriptionsIsAvaiableForPurchase">
            <summary>
            Guild role subsriptions as purchaseable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.PremiumTierThreeOverride">
            <summary>
            Guild has premium tier 3 override.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.TextInVoiceEnabled">
            <summary>
            Guild has access to text in voice.
            Restricted to <see cref="P:DisCatSharp.Entities.GuildFeatures.IsStaffOnly"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetAnimatedBanner">
            <summary>
            Guild can set an animated banner.
            Needs Premium Tier 3 (<see cref="F:DisCatSharp.PremiumTier.TierThree"/>).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetChannelBanner">
            <summary>
            Guild can set an animated banner.
            Needs Premium Tier 3 (<see cref="F:DisCatSharp.PremiumTier.TierThree"/>).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.HasMemberProfiles">
            <summary>
            Allows members to customize their avatar, banner and bio for that server.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.IsStaffOnly">
            <summary>
            Guild is restricted to users with the <see cref="F:DisCatSharp.UserFlags.Staff"/> badge.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.CanSetupAutoModeration">
            <summary>
            Guild can use and setup the experimental auto moderation feature.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.GuildFeatures.FeatureString">
            <summary>
            String of guild features.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.GuildFeatures.#ctor(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Checks the guild features and constructs a new <see cref="T:DisCatSharp.Entities.GuildFeatures"/> object.
            </summary>
            <param name="guild">Guild to check</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildEmoji">
            <summary>
            Represents a guild emoji.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildEmoji.User">
            <summary>
            Gets the user that created this emoji.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildEmoji.Guild">
            <summary>
            Gets the guild to which this emoji belongs.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildEmoji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordGuildEmoji"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildEmoji.ModifyAsync(System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordRole},System.String)">
            <summary>
            Modifies this emoji.
            </summary>
            <param name="name">New name for this emoji.</param>
            <param name="roles">Roles for which this emoji will be available. This works only if your application is whitelisted as integration.</param>
            <param name="reason">Reason for audit log.</param>
            <returns>The modified emoji.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildEmoji.DeleteAsync(System.String)">
            <summary>
            Deletes this emoji.
            </summary>
            <param name="reason">Reason for audit log.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildMembershipScreening">
            <summary>
            Represents a guild's membership screening form.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildMembershipScreening.Version">
            <summary>
            Gets when the fields were last updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildMembershipScreening.Fields">
            <summary>
            Gets the steps in the screening form.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildMembershipScreening.Description">
            <summary>
            Gets the server description shown in the screening form.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildMembershipScreeningField">
            <summary>
            Represents a field in a guild's membership screening form
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildMembershipScreeningField.Type">
            <summary>
            Gets the type of the field.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildMembershipScreeningField.Label">
            <summary>
            Gets the title of the field.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildMembershipScreeningField.Values">
            <summary>
            Gets the list of rules
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildMembershipScreeningField.IsRequired">
            <summary>
            Gets whether the user has to fill out this field
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildMembershipScreeningField.#ctor(DisCatSharp.MembershipScreeningFieldType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordGuildMembershipScreeningField"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="label">The label.</param>
            <param name="values">The values.</param>
            <param name="required">If true, required.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildMembershipScreeningField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordGuildMembershipScreeningField"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildPreview">
            <summary>
            Represents the guild preview.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.Name">
            <summary>
            Gets the guild name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.IconHash">
            <summary>
            Gets the guild icon's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.IconUrl">
            <summary>
            Gets the guild icon's url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.SplashHash">
            <summary>
            Gets the guild splash's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.SplashUrl">
            <summary>
            Gets the guild splash's url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.DiscoverySplashHash">
            <summary>
            Gets the guild discovery splash's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.DiscoverySplashUrl">
            <summary>
            Gets the guild discovery splash's url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.Emojis">
            <summary>
            Gets a collection of this guild's emojis.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.Features">
            <summary>
            Gets a collection of this guild's features.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.ApproximateMemberCount">
            <summary>
            Gets the approximate member count.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.ApproximatePresenceCount">
            <summary>
            Gets the approximate presence count.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.Description">
            <summary>
            Gets the description for the guild, if the guild is discoverable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.SystemChannelFlags">
            <summary>
            Gets the system channel flags for the guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildPreview.HubType">
            <summary>
            Gets this hub type for the guild, if the guild is a hub.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildPreview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordGuildPreview"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildTemplate">
            <summary>
            Represents a guild template.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.Code">
            <summary>
            Gets the template code.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.Name">
            <summary>
            Gets the name of the template.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.UsageCount">
            <summary>
            Gets the number of times the template has been used.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.CreatorId">
            <summary>
            Gets the ID of the creator of the template.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.Creator">
            <summary>
            Gets the creator of the template.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.CreatedAt">
            <summary>
            Date the template was created.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.UpdatedAt">
            <summary>
            Date the template was updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.SourceGuildId">
            <summary>
            Gets the ID of the source guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.SourceGuild">
            <summary>
            Gets the source guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.IsDirty">
            <summary>
            Gets whether the template has unsynced changes.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildTemplate.IsUnsynced">
            <summary>
            Gets whether the template has unsynced changes.
            </summary>
            <remarks><see cref="P:DisCatSharp.Entities.DiscordGuildTemplate.IsDirty"/></remarks>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildWelcomeScreen">
            <summary>
            Represents a discord welcome screen object.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildWelcomeScreen.Description">
            <summary>
            Gets the server description shown in the welcome screen.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildWelcomeScreen.WelcomeChannels">
            <summary>
            Gets the channels shown in the welcome screen.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordGuildWelcomeScreenChannel">
            <summary>
            Represents a channel in a welcome screen
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildWelcomeScreenChannel.ChannelId">
            <summary>
            Gets the id of the channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildWelcomeScreenChannel.Description">
            <summary>
            Gets the description shown for the channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildWelcomeScreenChannel.EmojiId">
            <summary>
            Gets the emoji id if the emoji is custom, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordGuildWelcomeScreenChannel.EmojiName">
            <summary>
            Gets the name of the emoji if custom or the unicode character if standard, when applicable.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordGuildWelcomeScreenChannel.#ctor(System.UInt64,System.String,DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordGuildWelcomeScreenChannel"/> class.
            </summary>
            <param name="channelId">The channel id.</param>
            <param name="description">The description.</param>
            <param name="emoji">The emoji.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordMember">
            <summary>
            Represents a Discord guild member.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMember"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.#ctor(DisCatSharp.Entities.DiscordUser)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMember"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.#ctor(DisCatSharp.Net.Abstractions.TransportMember)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMember"/> class.
            </summary>
            <param name="mbr">The mbr.</param>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.GuildAvatarHash">
            <summary>
            Gets the members avatar hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.GuildAvatarUrl">
            <summary>
            Gets the members avatar URL.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.GuildBannerHash">
            <summary>
            Gets the members banner hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.GuildBannerUrl">
            <summary>
            Gets the members banner URL.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.BannerColor">
            <summary>
            The color of this member's banner. Mutually exclusive with <see cref="P:DisCatSharp.Entities.DiscordMember.GuildBannerHash"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Nickname">
            <summary>
            Gets this member's nickname.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.GuildBio">
            <summary>
            Gets the members guild bio.
            This is not available to bots tho.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.MemberFlags">
            <summary>
            Gets the members flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.DisplayName">
            <summary>
            Gets this member's display name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.RoleIds">
            <summary>
            List of role ids
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Roles">
            <summary>
            Gets the list of roles associated with this member.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Color">
            <summary>
            Gets the color associated with this user's top color-giving role, otherwise 0 (no color).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.JoinedAt">
            <summary>
            Date the user joined the guild
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.PremiumSince">
            <summary>
            Date the user started boosting this server
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.CommunicationDisabledUntil">
            <summary>
            Date until the can communicate again.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.IsDeafened">
            <summary>
            If the user is deafened
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.IsMuted">
            <summary>
            If the user is muted
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.IsPending">
            <summary>
            Whether the user has not passed the guild's Membership Screening requirements yet.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.VoiceState">
            <summary>
            Gets this member's voice state.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Guild">
            <summary>
            Gets the guild of which this member is a part of.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.IsOwner">
            <summary>
            Gets whether this member is the Guild owner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Hierarchy">
            <summary>
            Gets the member's position in the role hierarchy, which is the member's highest role's position. Returns <see cref="F:System.Int32.MaxValue"/> for the guild's owner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Permissions">
            <summary>
            Gets the permissions for the current member.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.User">
            <summary>
            Gets the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Username">
            <summary>
            Gets this member's username.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Discriminator">
            <summary>
            Gets the member's 4-digit discriminator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.AvatarHash">
            <summary>
            Gets the member's avatar hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.BannerHash">
            <summary>
            Gets the member's banner hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.IsBot">
            <summary>
            Gets whether the member is a bot.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Email">
            <summary>
            Gets the member's email address.
            <para>This is only present in OAuth.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.MfaEnabled">
            <summary>
            Gets whether the member has multi-factor authentication enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Verified">
            <summary>
            Gets whether the member is verified.
            <para>This is only present in OAuth.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Locale">
            <summary>
            Gets the member's chosen language
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.OAuthFlags">
            <summary>
            Gets the user's flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMember.Flags">
            <summary>
            Gets the member's flags for OAuth.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.CreateDmChannelAsync">
            <summary>
            Creates a direct message channel to this member.
            </summary>
            <returns>Direct message channel to this member.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.SendMessageAsync(System.String)">
            <summary>
            Sends a direct message to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="content">Content of the message to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.SendMessageAsync(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Sends a direct message to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.SendMessageAsync(System.String,DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Sends a direct message to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="content">Content of the message to send.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.SendMessageAsync(DisCatSharp.Entities.DiscordMessageBuilder)">
            <summary>
            Sends a direct message to this member. Creates a direct message channel if one does not exist already.
            </summary>
            <param name="message">Builder to with the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the member has the bot blocked, the member is no longer in the guild, or if the member has Allow DM from server members off.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.SetMuteAsync(System.Boolean,System.String)">
            <summary>
            Sets this member's voice mute status.
            </summary>
            <param name="mute">Whether the member is to be muted.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.MuteMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.SetDeafAsync(System.Boolean,System.String)">
            <summary>
            Sets this member's voice deaf status.
            </summary>
            <param name="deaf">Whether the member is to be deafened.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.DeafenMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.ModifyAsync(System.Action{DisCatSharp.Net.Models.MemberEditModel})">
            <summary>
            Modifies this member.
            </summary>
            <param name="action">Action to perform on this member.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageNicknames"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.TimeoutAsync(System.DateTimeOffset,System.String)">
            <summary>
            Adds a timeout to a member.
            </summary>
            <param name="until">The datetime offset to time out the user. Up to 28 days.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ModerateMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.TimeoutAsync(System.TimeSpan,System.String)">
            <summary>
            Adds a timeout to a member.
            </summary>
            <param name="until">The timespan to time out the user. Up to 28 days.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ModerateMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.TimeoutAsync(System.DateTime,System.String)">
            <summary>
            Adds a timeout to a member.
            </summary>
            <param name="until">The datetime to time out the user. Up to 28 days.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ModerateMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.RemoveTimeoutAsync(System.String)">
            <summary>
            Removes the timeout from a member.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ModerateMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.GrantRoleAsync(DisCatSharp.Entities.DiscordRole,System.String)">
            <summary>
            Grants a role to the member.
            </summary>
            <param name="role">Role to grant.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.RevokeRoleAsync(DisCatSharp.Entities.DiscordRole,System.String)">
            <summary>
            Revokes a role from a member.
            </summary>
            <param name="role">Role to revoke.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.ReplaceRolesAsync(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordRole},System.String)">
            <summary>
            Sets the member's roles to ones specified.
            </summary>
            <param name="roles">Roles to set.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.BanAsync(System.Int32,System.String)">
            <summary>
            Bans this member from their guild.
            </summary>
            <param name="deleteMessageDays">How many days to remove messages from.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.UnbanAsync(System.String)">
            <summary>
            Unbans this member from their guild.
            </summary>
            <exception cref = "T:DisCatSharp.Exceptions.UnauthorizedException" > Thrown when the client does not have the<see cref="F:DisCatSharp.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.RemoveAsync(System.String)">
            <summary>
            Kicks this member from their guild.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <remarks>[alias="KickAsync"]</remarks>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.KickMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.PlaceInAsync(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Moves this member to the specified voice channel
            </summary>
            <param name="channel"></param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.MoveMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.UpdateVoiceStateAsync(DisCatSharp.Entities.DiscordChannel,System.Nullable{System.Boolean})">
            <summary>
            Updates the member's suppress state in a stage channel.
            </summary>
            <param name="channel">The channel the member is currently in.</param>
            <param name="suppress">Toggles the member's suppress state.</param>
            <exception cref="T:System.ArgumentException">Thrown when the channel in not a voice channel.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.MakeSpeakerAsync">
            <summary>
            Makes the user a speaker.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the user is not inside an stage channel.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.MuteMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.MoveToAudienceAsync">
            <summary>
            Moves the user to audience.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the user is not inside an stage channel.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.MuteMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.PermissionsIn(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Calculates permissions in a given channel for this member.
            </summary>
            <param name="channel">Channel to calculate permissions for.</param>
            <returns>Calculated permissions for this member in the channel.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.GetPermissions">
            <summary>
            Get's the current member's roles based on the sum of the permissions of their given roles.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.ToString">
            <summary>
            Returns a string representation of this member.
            </summary>
            <returns>String representation of this member.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordMember"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordMember"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.Equals(DisCatSharp.Entities.DiscordMember)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordMember"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordMember"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordMember"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordMember"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordMember"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordMember"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordMember"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.op_Equality(DisCatSharp.Entities.DiscordMember,DisCatSharp.Entities.DiscordMember)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordMember"/> objects are equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMember.op_Inequality(DisCatSharp.Entities.DiscordMember,DisCatSharp.Entities.DiscordMember)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordMember"/> objects are not equal.
            </summary>
            <param name="e1">First member to compare.</param>
            <param name="e2">Second member to compare.</param>
            <returns>Whether the two members are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordRole">
            <summary>
            Represents a discord role, to which users can be assigned.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.Name">
            <summary>
            Gets the name of this role.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.Color">
            <summary>
            Gets the color of this role.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.IsHoisted">
            <summary>
            Gets whether this role is hoisted.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.Position">
            <summary>
            Gets the position of this role in the role hierarchy.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.Permissions">
            <summary>
            Gets the permissions set for this role.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.IsManaged">
            <summary>
            Gets whether this role is managed by an integration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.IsMentionable">
            <summary>
            Gets whether this role is mentionable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.Tags">
            <summary>
            Gets the tags this role has.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.IconHash">
            <summary>
            Gets the role icon's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.IconUrl">
            <summary>
            Gets the role icon's url.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordRole.UnicodeEmojiString">
            <summary>
            Gets the role unicode_emoji.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.UnicodeEmoji">
            <summary>
            Gets the unicode emoji.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.Flags">
            <summary>
            Gets the role flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRole.Mention">
            <summary>
            Gets a mention string for this role. If the role is mentionable, this string will mention all the users that belong to this role.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.ModifyPositionAsync(System.Int32,System.String)">
            <summary>
            Modifies this role's position.
            </summary>
            <param name="position">New position</param>
            <param name="reason">Reason why we moved it</param>
            <returns></returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.ModifyAsync(System.String,System.Nullable{DisCatSharp.Permissions},System.Nullable{DisCatSharp.Entities.DiscordColor},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Updates this role.
            </summary>
            <param name="name">New role name.</param>
            <param name="permissions">New role permissions.</param>
            <param name="color">New role color.</param>
            <param name="hoist">New role hoist.</param>
            <param name="mentionable">Whether this role is mentionable.</param>
            <param name="reason">Audit log reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.ModifyAsync(System.Action{DisCatSharp.Net.Models.RoleEditModel})">
            <summary>
            Updates this role.
            </summary>
            <param name="action">The action.</param>
            <exception cref = "T:DisCatSharp.Exceptions.UnauthorizedException" > Thrown when the client does not have the<see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.DeleteAsync(System.String)">
            <summary>
            Deletes this role.
            </summary>
            <param name="reason">Reason as to why this role has been deleted.</param>
            <returns></returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageRoles"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the role does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordRole"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.CheckPermission(DisCatSharp.Permissions)">
            <summary>
            Checks whether this role has specific permissions.
            </summary>
            <param name="permission">Permissions to check for.</param>
            <returns>Whether the permissions are allowed or not.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.ToString">
            <summary>
            Returns a string representation of this role.
            </summary>
            <returns>String representation of this role.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordRole"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordRole"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.Equals(DisCatSharp.Entities.DiscordRole)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordRole"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordRole"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordRole"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordRole"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordRole"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordRole"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordRole"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.op_Equality(DisCatSharp.Entities.DiscordRole,DisCatSharp.Entities.DiscordRole)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordRole"/> objects are equal.
            </summary>
            <param name="e1">First role to compare.</param>
            <param name="e2">Second role to compare.</param>
            <returns>Whether the two roles are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRole.op_Inequality(DisCatSharp.Entities.DiscordRole,DisCatSharp.Entities.DiscordRole)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordRole"/> objects are not equal.
            </summary>
            <param name="e1">First role to compare.</param>
            <param name="e2">Second role to compare.</param>
            <returns>Whether the two roles are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordRoleTags">
            <summary>
            Represents a discord role tags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRoleTags.BotId">
            <summary>
            Gets the id of the bot this role belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRoleTags.IntegrationId">
            <summary>
            Gets the id of the integration this role belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRoleTags.IsPremiumSubscriber">
            <summary>
            Gets whether this is the guild's premium subscriber role.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordScheduledEvent">
            <summary>
            Represents an scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.GuildId">
            <summary>
            Gets the guild id of the associated scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.Guild">
            <summary>
            Gets the guild to which this scheduled event belongs.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.Channel">
            <summary>
            Gets the associated channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.ChannelId">
            <summary>
            Gets id of the associated channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.CreatorId">
            <summary>
            Gets the ID of the user that created the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.Creator">
            <summary>
            Gets the user that created the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.CreatorMember">
            <summary>
            Gets the member that created the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.Name">
            <summary>
            Gets the name of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.Description">
            <summary>
            Gets the description of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.CoverImageHash">
            <summary>
            Gets this event's cover hash, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.CoverImageUrl">
            <summary>
            Gets this event's cover in url form.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.ScheduledStartTime">
            <summary>
            Gets the scheduled start time of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.ScheduledStartTimeRaw">
            <summary>
            Gets the scheduled start time of the scheduled event as raw string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.ScheduledEndTime">
            <summary>
            Gets the scheduled end time of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.ScheduledEndTimeRaw">
            <summary>
            Gets the scheduled end time of the scheduled event as raw string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.PrivacyLevel">
            <summary>
            Gets the privacy level of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.Status">
            <summary>
            Gets the status of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.EntityId">
            <summary>
            Gets id of the entity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.EntityMetadata">
            <summary>
            Gets metadata of the entity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEvent.UserCount">
            <summary>
            Gets the total number of users subscribed to the scheduled event.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.ModifyAsync(System.Action{DisCatSharp.Net.Models.ScheduledEventEditModel})">
            <summary>
            Modifies the current scheduled event.
            </summary>
            <param name="action">Action to perform on this thread</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEvents"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the event does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.StartAsync(System.String)">
            <summary>
            Starts the current scheduled event.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEvents"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the event does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.CancelAsync(System.String)">
            <summary>
            Cancels the current scheduled event.
            </summary>
            <param name="reason">The audit log reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEvents"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the event does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.EndAsync(System.String)">
            <summary>
            Ends the current scheduled event.
            </summary>
            <param name="reason">The audit log reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEvents"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the event does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.GetUsersAsync(System.Nullable{System.Int32},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Gets a list of users RSVP'd to the scheduled event.
            </summary>
            <param name="limit">The limit how many users to receive from the event. Defaults to 100. Max 100.</param>
            <param name="before">Get results of <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/> before the given snowflake.</param>
            <param name="after">Get results of <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/> after the given snowflake.</param>
            <param name="withMember">Whether to include guild member data.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the correct permissions.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the event does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.DeleteAsync(System.String)">
            <summary>
            Deletes a scheduled event.
            </summary>
            <param name="reason">The audit log reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEvents"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the event does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.Equals(DisCatSharp.Entities.DiscordScheduledEvent)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.op_Equality(DisCatSharp.Entities.DiscordScheduledEvent,DisCatSharp.Entities.DiscordScheduledEvent)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/> objects are equal.
            </summary>
            <param name="e1">First event to compare.</param>
            <param name="e2">Second event to compare.</param>
            <returns>Whether the two events are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEvent.op_Inequality(DisCatSharp.Entities.DiscordScheduledEvent,DisCatSharp.Entities.DiscordScheduledEvent)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordScheduledEvent"/> objects are not equal.
            </summary>
            <param name="e1">First event to compare.</param>
            <param name="e2">Second event to compare.</param>
            <returns>Whether the two events are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordScheduledEventEntityMetadata">
            <summary>
            Represents an scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEventEntityMetadata.Location">
            <summary>
            External location if event type is <see cref="F:DisCatSharp.ScheduledEventEntityType.External"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEventEntityMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordScheduledEventEntityMetadata"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEventEntityMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordScheduledEventEntityMetadata"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordScheduledEventUser">
            <summary>
            The discord scheduled event user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEventUser.Discord">
            <summary>
            Gets the client instance this object is tied to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEventUser.User">
            <summary>
            Gets the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEventUser.Member">
            <summary>
            Gets the member.
            Only applicable when requested with `with_member`.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEventUser.ScheduledEvent">
            <summary>
            Gets the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEventUser.EventId">
            <summary>
            Gets or sets the event id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordScheduledEventUser.GuildId">
            <summary>
            Gets or sets the guild id.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEventUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEventUser.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEventUser.Equals(DisCatSharp.Entities.DiscordScheduledEventUser)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEventUser.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEventUser.op_Equality(DisCatSharp.Entities.DiscordScheduledEventUser,DisCatSharp.Entities.DiscordScheduledEventUser)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/> objects are equal.
            </summary>
            <param name="e1">First event to compare.</param>
            <param name="e2">Second event to compare.</param>
            <returns>Whether the two events are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordScheduledEventUser.op_Inequality(DisCatSharp.Entities.DiscordScheduledEventUser,DisCatSharp.Entities.DiscordScheduledEventUser)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordScheduledEventUser"/> objects are not equal.
            </summary>
            <param name="e1">First event to compare.</param>
            <param name="e2">Second event to compare.</param>
            <returns>Whether the two events are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordIntegration">
            <summary>
            Represents a Discord integration. These appear on the profile as linked 3rd party accounts.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.Name">
            <summary>
            Gets the integration name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.Type">
            <summary>
            Gets the integration type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.IsEnabled">
            <summary>
            Gets whether this integration is enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.IsSyncing">
            <summary>
            Gets whether this integration is syncing.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.RoleId">
            <summary>
            Gets ID of the role this integration uses for subscribers.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.ExpireBehavior">
            <summary>
            Gets the expiration behaviour.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.ExpireGracePeriod">
            <summary>
            Gets the grace period before expiring subscribers.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.User">
            <summary>
            Gets the user that owns this integration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.Account">
            <summary>
            Gets the 3rd party service account for this integration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegration.SyncedAt">
            <summary>
            Gets the date and time this integration was last synced.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordIntegration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordIntegration"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordIntegrationAccount">
            <summary>
            Represents a Discord integration account.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegrationAccount.Id">
            <summary>
            Gets the ID of the account.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordIntegrationAccount.Name">
            <summary>
            Gets the name of the account.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordIntegrationAccount.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordIntegrationAccount"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordButtonComponent">
            <summary>
            Represents a button that can be pressed. Fires <see cref="E:DisCatSharp.DiscordClient.ComponentInteractionCreated"/> event when pressed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordButtonComponent.Style">
            <summary>
            The style of the button.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordButtonComponent.Label">
            <summary>
            The text to apply to the button. If this is not specified <see cref="P:DisCatSharp.Entities.DiscordButtonComponent.Emoji"/> becomes required.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordButtonComponent.Disabled">
            <summary>
            Whether this button can be pressed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordButtonComponent.Emoji">
            <summary>
            The emoji to add to the button. Can be used in conjunction with a label, or as standalone. Must be added if label is not specified.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordButtonComponent.Enable">
            <summary>
            Enables this component if it was disabled before.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordButtonComponent.Disable">
            <summary>
            Disables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordButtonComponent.#ctor">
            <summary>
            Constructs a new <see cref="T:DisCatSharp.Entities.DiscordButtonComponent"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordButtonComponent.#ctor(DisCatSharp.Entities.DiscordButtonComponent)">
            <summary>
            Constructs a new button based on another button.
            </summary>
            <param name="other">The button to copy.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordButtonComponent.#ctor(DisCatSharp.Enums.ButtonStyle,System.String,System.String,System.Boolean,DisCatSharp.Entities.DiscordComponentEmoji)">
            <summary>
            Constructs a new button with the specified options.
            </summary>
            <param name="style">The style/color of the button.</param>
            <param name="customId">The Id to assign to the button. This is sent back when a user presses it.</param>
            <param name="label">The text to display on the button, up to 80 characters. Can be left blank if <paramref name="emoji"/>is set.</param>
            <param name="disabled">Whether this button should be initialized as being disabled. User sees a greyed out button that cannot be interacted with.</param>
            <param name="emoji">The emoji to add to the button. This is required if <paramref name="label"/> is empty or null.</param>
            <exception cref="T:System.ArgumentException">Is thrown when neither the <paramref name="emoji"/> nor the <paramref name="label"/> is set.</exception>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordLinkButtonComponent">
            <summary>
            Represents a link button. Clicking a link button does not send an interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordLinkButtonComponent.Url">
            <summary>
            The url to open when pressing this button.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordLinkButtonComponent.Label">
            <summary>
            The text to add to this button. If this is not specified, <see cref="P:DisCatSharp.Entities.DiscordLinkButtonComponent.Emoji"/> must be.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordLinkButtonComponent.Disabled">
            <summary>
            Whether this button can be pressed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordLinkButtonComponent.Emoji">
            <summary>
            The emoji to add to the button. Can be used in conjunction with a label, or as standalone. Must be added if label is not specified.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordLinkButtonComponent.Style">
            <summary>
            Gets the style.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordLinkButtonComponent.Enable">
            <summary>
            Enables this component if it was disabled before.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordLinkButtonComponent.Disable">
            <summary>
            Disables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordLinkButtonComponent.#ctor(System.String,System.String,System.Boolean,DisCatSharp.Entities.DiscordComponentEmoji)">
            <summary>
            Constructs a new <see cref="T:DisCatSharp.Entities.DiscordLinkButtonComponent"/>. This type of button does not send back and interaction when pressed.
            </summary>
            <param name="url">The url to set the button to.</param>
            <param name="label">The text to display on the button. Can be left blank if <paramref name="emoji"/> is set.</param>
            <param name="disabled">Whether or not this button can be pressed.</param>
            <param name="emoji">The emoji to set with this button. This is required if <paramref name="label"/> is null or empty.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordLinkButtonComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordLinkButtonComponent"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordActionRowComponent">
            <summary>
            Represents a row of components. Action rows can have up to five components.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActionRowComponent.Components">
            <summary>
            The components contained within the action row.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordActionRowComponent.#ctor(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordComponent})">
            <summary>
            Constructs a new <see cref="T:DisCatSharp.Entities.DiscordActionRowComponent"/>.
            </summary>
            <param name="components">List of components</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordActionRowComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordActionRowComponent"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordActionRowComponentResult">
            <summary>
            Represents a <see cref="T:DisCatSharp.Entities.DiscordActionRowComponentResult"/> resolved from a <see cref="F:DisCatSharp.Enums.ApplicationCommandType.ModalSubmit"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActionRowComponentResult.Type">
            <summary>
            The type of component this represents.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActionRowComponentResult.Components">
            <summary>
            The components contained within the resolved action row.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordActionRowComponentResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordActionRowComponentResult"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordComponent">
            <summary>
            A component to attach to a message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordComponent.Type">
            <summary>
            The type of component this represents.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordComponent.CustomId">
            <summary>
            The Id of this component, if applicable. Not applicable on ActionRow(s) and link buttons.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordComponent"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordComponentResult">
            <summary>
            Represents a <see cref="T:DisCatSharp.Entities.DiscordComponentResult"/> resolved within an <see cref="T:DisCatSharp.Entities.DiscordActionRowComponentResult"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordComponentResult.Type">
            <summary>
            The type of component this represents.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordComponentResult.CustomId">
            <summary>
            The Id of this component, if applicable. Not applicable on ActionRow(s) and link buttons.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordComponentResult.Value">
            <summary>
            The Id of this component, if applicable. Not applicable on ActionRow(s) and link buttons.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordComponentResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordComponentResult"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordComponentEmoji">
            <summary>
            Represents an emoji to add to a component.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordComponentEmoji.Id">
            <summary>
            The Id of the emoji to use.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordComponentEmoji.Name">
            <summary>
            The name of the emoji to use. Ignored if <see cref="P:DisCatSharp.Entities.DiscordComponentEmoji.Id"/> is set.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordComponentEmoji.#ctor">
            <summary>
            Constructs a new component emoji to add to a <see cref="T:DisCatSharp.Entities.DiscordComponent"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordComponentEmoji.#ctor(System.UInt64)">
            <summary>
            Constructs a new component emoji from an emoji Id.
            </summary>
            <param name="id">The Id of the emoji to use. Any valid emoji Id can be passed.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordComponentEmoji.#ctor(System.String)">
            <summary>
            Constructs a new component emoji from unicode.
            </summary>
            <param name="name">The unicode emoji to set.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordComponentEmoji.#ctor(DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Constructs a new component emoji from an existing <see cref="T:DisCatSharp.Entities.DiscordEmoji"/>.
            </summary>
            <param name="emoji">The emoji to use.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordSelectComponent">
            <summary>
            A select menu with multiple options to choose from.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponent.Options">
            <summary>
            The options to pick from on this component.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponent.Placeholder">
            <summary>
            The text to show when no option is selected.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponent.MinimumSelectedValues">
            <summary>
            The minimum amount of options that can be selected. Must be less than or equal to <see cref="P:DisCatSharp.Entities.DiscordSelectComponent.MaximumSelectedValues"/>. Defaults to one.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponent.MaximumSelectedValues">
            <summary>
            The maximum amount of options that can be selected. Must be greater than or equal to zero or <see cref="P:DisCatSharp.Entities.DiscordSelectComponent.MinimumSelectedValues"/>. Defaults to one.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponent.Disabled">
            <summary>
            Whether this select can be used.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSelectComponent.Enable">
            <summary>
            Enables this component if it was disabled before.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSelectComponent.Disable">
            <summary>
            Disables this component.
            </summary>
            <returns>The current component.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSelectComponent.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordSelectComponentOption},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:DisCatSharp.Entities.DiscordSelectComponent"/>.
            </summary>
            <param name="customId">The Id to assign to the button. This is sent back when a user presses it.</param>
            <param name="options">Array of options</param>
            <param name="placeholder">Text to show if no option is selected.</param>
            <param name="minOptions">Minimum count of selectable options.</param>
            <param name="maxOptions">Maximum count of selectable options.</param>
            <param name="disabled">Whether this button should be initialized as being disabled. User sees a greyed out button that cannot be interacted with.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSelectComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordSelectComponent"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordSelectComponentOption">
            <summary>
            Represents options for <see cref="T:DisCatSharp.Entities.DiscordSelectComponent"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponentOption.Label">
            <summary>
            The label to add. This is required.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponentOption.Value">
            <summary>
            The value of this option. Akin to the Custom Id of components.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponentOption.Default">
            <summary>
            Whether this option is default. If true, this option will be pre-selected. Defaults to false.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponentOption.Description">
            <summary>
            The description of this option. This is optional.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSelectComponentOption.Emoji">
            <summary>
            The emoji of this option. This is optional.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSelectComponentOption.#ctor(System.String,System.String,System.String,System.Boolean,DisCatSharp.Entities.DiscordComponentEmoji)">
            <summary>
            Constructs a new <see cref="T:DisCatSharp.Entities.DiscordSelectComponentOption"/>.
            </summary>
            <param name="label">The label of this option.</param>
            <param name="value">The value of this option.</param>
            <param name="description">Description of the option.</param>
            <param name="isDefault">Whether this option is default. If true, this option will be pre-selected.</param>
            <param name="emoji">The emoji to set with this option.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordTextComponent">
            <summary>
            Represents a text component that can be submitted. Fires <see cref="E:DisCatSharp.DiscordClient.ComponentInteractionCreated"/> event when submitted.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTextComponent.Style">
            <summary>
            The style of the text component.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTextComponent.Label">
            <summary>
            The text description to apply to the text component.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTextComponent.Placeholder">
            <summary>
            The placeholder for the text component.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTextComponent.Value">
            <summary>
            The pre-filled value for the text component.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTextComponent.MinLength">
            <summary>
            The minimal length of text input.
            Defaults to 0.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTextComponent.MaxLength">
            <summary>
            The maximal length of text input.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTextComponent.Required">
            <summary>
            Whether this text component is required.
            Defaults to true.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTextComponent.#ctor">
            <summary>
            Constructs a new <see cref="T:DisCatSharp.Entities.DiscordTextComponent"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTextComponent.#ctor(DisCatSharp.Entities.DiscordTextComponent)">
            <summary>
            Constucts a new text component based on another text component.
            </summary>
            <param name="other">The button to copy.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTextComponent.#ctor(DisCatSharp.Enums.TextComponentStyle,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.String)">
            <summary>
            Constructs a new text component field with the specified options.
            </summary>
            <param name="style">The style of the text component.</param>
            <param name="customId">The Id to assign to the text component. This is sent back when a user presses it.</param>
            <param name="label">The text to display before the text component, up to 80 characters. Required, but set to null to avoid breaking change.</param>
            <param name="placeholder">The placeholder for the text input.</param>
            <param name="minLength">The minimal length of text input.</param>
            <param name="maxLength">The maximal length of text input.</param>
            <param name="required">Whether this text component should be required.</param>
            <param name="defaultValue">Pre-filled value for text field.</param>
            <exception cref="T:System.ArgumentException">Is thrown when no label is set.</exception>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordFollowupMessageBuilder">
            <summary>
            Constructs a followup message to an interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowupMessageBuilder.IsTts">
            <summary>
            Whether this followup message is text-to-speech.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowupMessageBuilder.IsEphemeral">
            <summary>
            Whether this followup message should be ephemeral.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowupMessageBuilder.Flags">
            <summary>
            Indicates this message is ephemeral.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowupMessageBuilder.Content">
            <summary>
            Message to send on followup message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowupMessageBuilder.Embeds">
            <summary>
            Embeds to send on followup message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowupMessageBuilder.Files">
            <summary>
            Files to send on this followup message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowupMessageBuilder.Components">
            <summary>
            Components to send on this followup message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordFollowupMessageBuilder.Mentions">
            <summary>
            Mentions to send on this followup message.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddComponents(DisCatSharp.Entities.DiscordComponent[])">
            <summary>
            Appends a collection of components to the message.
            </summary>
            <param name="components">The collection of components to add.</param>
            <returns>The builder to chain calls with.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="components"/> contained more than 5 components.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordActionRowComponent})">
            <summary>
            Appends several rows of components to the message
            </summary>
            <param name="components">The rows of components to add, holding up to five each.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordComponent})">
            <summary>
            Appends a collection of components to the message.
            </summary>
            <param name="components">The collection of components to add.</param>
            <returns>The builder to chain calls with.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="components"/> contained more than 5 components.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.WithTts(System.Boolean)">
            <summary>
            Indicates if the followup message must use text-to-speech.
            </summary>
            <param name="tts">Text-to-speech</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.WithContent(System.String)">
            <summary>
            Sets the message to send with the followup message..
            </summary>
            <param name="content">Message to send.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddEmbed(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Adds an embed to the followup message.
            </summary>
            <param name="embed">Embed to add.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddEmbeds(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmbed})">
            <summary>
            Adds the given embeds to the followup message.
            </summary>
            <param name="embeds">Embeds to add.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddFile(System.String,System.IO.Stream,System.Boolean,System.String)">
            <summary>
            Adds a file to the followup message.
            </summary>
            <param name="filename">Name of the file.</param>
            <param name="data">File data.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <param name="description">Description of the file.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddFile(System.IO.FileStream,System.Boolean,System.String)">
            <summary>
            Sets if the message has files to be sent.
            </summary>
            <param name="stream">The Stream to the file.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <param name="description">Description of the file.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddFiles(System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.Boolean)">
            <summary>
            Adds the given files to the followup message.
            </summary>
            <param name="files">Dictionary of file name and file data.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddMention(DisCatSharp.Entities.IMention)">
            <summary>
            Adds the mention to the mentions to parse, etc. with the followup message.
            </summary>
            <param name="mention">Mention to add.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AddMentions(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.IMention})">
            <summary>
            Adds the mentions to the mentions to parse, etc. with the followup message.
            </summary>
            <param name="mentions">Mentions to add.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.AsEphemeral(System.Boolean)">
            <summary>
            Sets the followup message to be ephemeral.
            </summary>
            <param name="ephemeral">Whether the followup should be ephemeral. Defaults to true.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.ClearComponents">
            <summary>
            Clears all message components on this builder.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.Clear">
            <summary>
            Allows for clearing the Followup Message builder so that it can be used again to send a new message.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordFollowupMessageBuilder.Validate">
            <summary>
            Validates the builder.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInteraction">
            <summary>
            Represents an interaction that was invoked.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.Type">
            <summary>
            Gets the type of interaction invoked.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.Data">
            <summary>
            Gets the command data for this interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.GuildId">
            <summary>
            Gets the Id of the guild that invoked this interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.Guild">
            <summary>
            Gets the guild that invoked this interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.ChannelId">
            <summary>
            Gets the Id of the channel that invoked this interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.Channel">
            <summary>
            Gets the channel that invoked this interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.User">
            <summary>
            Gets the user that invoked this interaction.
            <para>This can be cast to a <see cref="T:DisCatSharp.Entities.DiscordMember"/> if created in a guild.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.Token">
            <summary>
            Gets the continuation token for responding to this interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.Version">
            <summary>
            Gets the version number for this interaction type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.ApplicationId">
            <summary>
            Gets the ID of the application that created this interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.Message">
            <summary>
            The message this interaction was created with, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.Locale">
            <summary>
            Gets the invoking user locale.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteraction.GuildLocale">
            <summary>
            Gets the guild locale if applicable.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteraction.CreateResponseAsync(DisCatSharp.InteractionResponseType,DisCatSharp.Entities.DiscordInteractionResponseBuilder)">
            <summary>
            Creates a response to this interaction.
            </summary>
            <param name="type">The type of the response.</param>
            <param name="builder">The data, if any, to send.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteraction.CreateInteractionModalResponseAsync(DisCatSharp.Entities.DiscordInteractionModalBuilder)">
            <summary>
            Creates a modal response to this interaction.
            </summary>
            <param name="builder">The data to send.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteraction.GetOriginalResponseAsync">
            <summary>
            Gets the original interaction response.
            </summary>
            <returns>The original message that was sent. This <b>does not work on ephemeral messages.</b></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteraction.EditOriginalResponseAsync(DisCatSharp.Entities.DiscordWebhookBuilder)">
            <summary>
            Edits the original interaction response.
            </summary>
            <param name="builder">The webhook builder.</param>
            <returns>The edited <see cref="T:DisCatSharp.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteraction.DeleteOriginalResponseAsync">
            <summary>
            Deletes the original interaction response.
            </summary>>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteraction.CreateFollowupMessageAsync(DisCatSharp.Entities.DiscordFollowupMessageBuilder)">
            <summary>
            Creates a follow up message to this interaction.
            </summary>
            <param name="builder">The webhook builder.</param>
            <returns>The created <see cref="T:DisCatSharp.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteraction.GetFollowupMessageAsync(System.UInt64)">
            <summary>
            Gets a follow up message.
            </summary>
            <param name="messageId">The id of the follow up message.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteraction.EditFollowupMessageAsync(System.UInt64,DisCatSharp.Entities.DiscordWebhookBuilder)">
            <summary>
            Edits a follow up message.
            </summary>
            <param name="messageId">The id of the follow up message.</param>
            <param name="builder">The webhook builder.</param>
            <returns>The edited <see cref="T:DisCatSharp.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteraction.DeleteFollowupMessageAsync(System.UInt64)">
            <summary>
            Deletes a follow up message.
            </summary>
            <param name="messageId">The id of the follow up message.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInteractionApplicationCommandCallbackData">
            <summary>
            Represents a interactions application command callback data.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandCallbackData.IsTts">
            <summary>
            Whether this message is text to speech.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandCallbackData.Content">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandCallbackData.Embeds">
            <summary>
            Gets the embeds.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandCallbackData.Mentions">
            <summary>
            Gets the mentions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandCallbackData.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandCallbackData.Components">
            <summary>
            Gets the components.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandCallbackData.Choices">
            <summary>
            Gets the autocomplete choices.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandCallbackData.Attachments">
            <summary>
            Gets the attachments.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInteractionApplicationCommandModalCallbackData">
            <summary>
            Represents a interactions application command callback data.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandModalCallbackData.CustomId">
            <summary>
            Gets the custom id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandModalCallbackData.Title">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionApplicationCommandModalCallbackData.ModalComponents">
            <summary>
            Gets the components.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInteractionData">
            <summary>
            Represents the inner data payload of a <see cref="T:DisCatSharp.Entities.DiscordInteraction"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionData.Name">
            <summary>
            Gets the name of the invoked interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionData.Options">
            <summary>
            Gets the parameters and values of the invoked interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionData.Components">
            <summary>
            Gets the components (Applicable to modal submits).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionData.Resolved">
            <summary>
            Gets the Discord snowflake objects resolved from this interaction's arguments.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionData.CustomId">
            <summary>
            The Id of the component that invoked this interaction, if applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionData.Target">
            <summary>
            The Id of the target. Applicable for context menus.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionData.ComponentType">
            <summary>
            The type of component that invoked this interaction, if applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionData.Values">
            <summary>
            Gets the values of the interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionData.Type">
            <summary>
            Gets the type of the interaction.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInteractionDataOption">
            <summary>
            Represents parameters for interaction commands.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionDataOption.Name">
            <summary>
            Gets the name of this interaction parameter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionDataOption.Type">
            <summary>
            Gets the type of this interaction parameter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionDataOption.Focused">
            <summary>
            Whether this option is currently focused by the user.
            Only applicable for autocomplete option choices.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionDataOption.RawValue">
            <summary>
            Gets the value of this interaction parameter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionDataOption.Value">
            <summary>
            Gets the value of this interaction parameter.
            <para>This can be cast to a <see langword="long"/>, <see langword="bool"></see>, <see langword="string"></see>, <see langword="double"></see> or <see langword="ulong"/> depending on the <see cref="T:System.Type"/></para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionDataOption.Options">
            <summary>
            Gets the additional parameters if this parameter is a subcommand.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInteractionModalBuilder">
            <summary>
            Constructs an interaction modal response.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionModalBuilder.Title">
            <summary>
            Title of modal.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionModalBuilder.CustomId">
            <summary>
            Custom id of modal.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionModalBuilder.ModalComponents">
            <summary>
            Components to send on this interaction response.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionModalBuilder.#ctor">
            <summary>
            Constructs a new empty interaction modal builder.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionModalBuilder.AddModalComponents(DisCatSharp.Entities.DiscordTextComponent[])">
            <summary>
            Appends a collection of components to the builder. Each call will append to a new row.
            </summary>
            <param name="components">The components to append. Up to five.</param>
            <returns>The current builder to chain calls with.</returns>
            <exception cref="T:System.ArgumentException">Thrown when passing more than 5 components.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionModalBuilder.AddTextComponent(DisCatSharp.Entities.DiscordTextComponent)">
            <summary>
            Appends a text component to the builder.
            </summary>
            <param name="component">The component to append.</param>
            <returns>The current builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionModalBuilder.AddModalComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordActionRowComponent})">
            <summary>
            Appends several rows of components to the message
            </summary>
            <param name="components">The rows of components to add, holding up to five each.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionModalBuilder.AddModalComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordTextComponent})">
            <summary>
            Appends a collection of components to the builder. Each call will append to a new row.
            If you add a <see cref="T:DisCatSharp.Entities.DiscordTextComponent"></see> you can only add one.
            </summary>
            <param name="components">The components to append. Up to five.</param>
            <returns>The current builder to chain calls with.</returns>
            <exception cref="T:System.ArgumentException">Thrown when passing more than 5 components.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionModalBuilder.ClearComponents">
            <summary>
            Clears all message components on this builder.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionModalBuilder.Clear">
            <summary>
            Allows for clearing the Interaction Response Builder so that it can be used again to send a new response.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInteractionResolvedCollection">
            <summary>
            Represents a collection of Discord snowflake objects resolved from interaction arguments.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResolvedCollection.Users">
            <summary>
            Gets the resolved user objects, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResolvedCollection.Members">
            <summary>
            Gets the resolved member objects, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResolvedCollection.Channels">
            <summary>
            Gets the resolved channel objects, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResolvedCollection.Roles">
            <summary>
            Gets the resolved role objects, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResolvedCollection.Messages">
            <summary>
            Gets the resolved message objects, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResolvedCollection.Attachments">
            <summary>
            Gets the resolved attachments objects, if any.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInteractionResponseBuilder">
            <summary>
            Constructs an interaction response.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResponseBuilder.IsTts">
            <summary>
            Whether this interaction response is text-to-speech.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResponseBuilder.IsEphemeral">
            <summary>
            Whether this interaction response should be ephemeral.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResponseBuilder.Content">
            <summary>
            Content of the message to send.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResponseBuilder.Embeds">
            <summary>
            Embeds to send on this interaction response.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResponseBuilder.Files">
            <summary>
            Files to send on this interaction response.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResponseBuilder.Components">
            <summary>
            Components to send on this interaction response.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResponseBuilder.Choices">
            <summary>
            The choices to send on this interaction response.
            Mutually exclusive with content, embed, and components.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInteractionResponseBuilder.Mentions">
            <summary>
            Mentions to send on this interaction response.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.#ctor">
            <summary>
            Constructs a new empty interaction response builder.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.#ctor(DisCatSharp.Entities.DiscordMessageBuilder)">
            <summary>
            Constructs a new <see cref="T:DisCatSharp.Entities.DiscordInteractionResponseBuilder"/> based on an existing <see cref="T:DisCatSharp.Entities.DiscordMessageBuilder"/>.
            </summary>
            <param name="builder">The builder to copy.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddComponents(DisCatSharp.Entities.DiscordComponent[])">
            <summary>
            Appends a collection of components to the builder. Each call will append to a new row.
            </summary>
            <param name="components">The components to append. Up to five.</param>
            <returns>The current builder to chain calls with.</returns>
            <exception cref="T:System.ArgumentException">Thrown when passing more than 5 components.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordActionRowComponent})">
            <summary>
            Appends several rows of components to the message
            </summary>
            <param name="components">The rows of components to add, holding up to five each.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordComponent})">
            <summary>
            Appends a collection of components to the builder. Each call will append to a new row.
            </summary>
            <param name="components">The components to append. Up to five.</param>
            <returns>The current builder to chain calls with.</returns>
            <exception cref="T:System.ArgumentException">Thrown when passing more than 5 components.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.WithTts(System.Boolean)">
            <summary>
            Indicates if the interaction response will be text-to-speech.
            </summary>
            <param name="tts">Text-to-speech</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AsEphemeral(System.Boolean)">
            <summary>
            Sets the interaction response to be ephemeral.
            </summary>
            <param name="ephemeral">Whether the response should be ephemeral. Defaults to true.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.WithContent(System.String)">
            <summary>
            Sets the content of the message to send.
            </summary>
            <param name="content">Content to send.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddEmbed(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Adds an embed to send with the interaction response.
            </summary>
            <param name="embed">Embed to add.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddEmbeds(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmbed})">
            <summary>
            Adds the given embeds to send with the interaction response.
            </summary>
            <param name="embeds">Embeds to add.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddFile(System.String,System.IO.Stream,System.Boolean,System.String)">
            <summary>
            Adds a file to the interaction response.
            </summary>
            <param name="filename">Name of the file.</param>
            <param name="data">File data.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <param name="description">Description of the file.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddFile(System.IO.FileStream,System.Boolean,System.String)">
            <summary>
            Sets if the message has files to be sent.
            </summary>
            <param name="stream">The Stream to the file.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <param name="description">Description of the file.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddFiles(System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.Boolean)">
            <summary>
            Adds the given files to the interaction response builder.
            </summary>
            <param name="files">Dictionary of file name and file data.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <returns>The builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddMention(DisCatSharp.Entities.IMention)">
            <summary>
            Adds the mention to the mentions to parse, etc. with the interaction response.
            </summary>
            <param name="mention">Mention to add.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddMentions(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.IMention})">
            <summary>
            Adds the mentions to the mentions to parse, etc. with the interaction response.
            </summary>
            <param name="mentions">Mentions to add.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddAutoCompleteChoice(DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice)">
            <summary>
            Adds a single auto-complete choice to the builder.
            </summary>
            <param name="choice">The choice to add.</param>
            <returns>The current builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddAutoCompleteChoices(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice})">
            <summary>
            Adds auto-complete choices to the builder.
            </summary>
            <param name="choices">The choices to add.</param>
            <returns>The current builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.AddAutoCompleteChoices(DisCatSharp.Entities.DiscordApplicationCommandAutocompleteChoice[])">
            <summary>
            Adds auto-complete choices to the builder.
            </summary>
            <param name="choices">The choices to add.</param>
            <returns>The current builder to chain calls with.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.ClearComponents">
            <summary>
            Clears all message components on this builder.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInteractionResponseBuilder.Clear">
            <summary>
            Allows for clearing the Interaction Response Builder so that it can be used again to send a new response.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInvite">
            <summary>
            Represents a Discord invite.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Discord">
            <summary>
            Gets the base client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Code">
            <summary>
            Gets the invite's code.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Url">
            <summary>
            Gets the invite's url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Uri">
            <summary>
            Gets the invite's url as Uri.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Guild">
            <summary>
            Gets the guild this invite is for.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Channel">
            <summary>
            Gets the channel this invite is for.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.TargetType">
            <summary>
            Gets the target type for the voice channel this invite is for.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Type">
            <summary>
            Gets the type of this invite.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.TargetUser">
            <summary>
            Gets the user that is currently livestreaming.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.TargetApplication">
            <summary>
            Gets the embedded partial application to open for this voice channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.ApproximatePresenceCount">
            <summary>
            Gets the approximate guild online member count for the invite.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.ApproximateMemberCount">
            <summary>
            Gets the approximate guild total member count for the invite.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Inviter">
            <summary>
            Gets the user who created the invite.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Uses">
            <summary>
            Gets the number of times this invite has been used.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.MaxUses">
            <summary>
            Gets the max number of times this invite can be used.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.MaxAge">
            <summary>
            Gets duration in seconds after which the invite expires.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.IsTemporary">
            <summary>
            Gets whether this invite only grants temporary membership.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.CreatedAt">
            <summary>
            Gets the date and time this invite was created.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.ExpiresAt">
            <summary>
            Gets the date and time when this invite expires.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.ExpiredAt">
            <summary>
            Gets the date and time when this invite got expired.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.IsRevoked">
            <summary>
            Gets whether this invite is revoked.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.Stage">
            <summary>
            Gets the stage instance this invite is for.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInvite.GuildScheduledEvent">
            <summary>
            Gets the guild scheduled event data for the invite.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInvite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordInvite"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInvite.DeleteAsync(System.String)">
            <summary>
            Deletes the invite.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageChannels"/> permission or the <see cref="F:DisCatSharp.Permissions.ManageGuild"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInvite.ToString">
            <summary>
            Converts this invite into an invite link.
            </summary>
            <returns>A discord.gg invite link.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInviteChannel">
            <summary>
            Represents the channel to which an invite is linked.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteChannel.Name">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteChannel.Type">
            <summary>
            Gets the type of the channel.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInviteChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordInviteChannel"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInviteGuild">
            <summary>
            Represents a guild to which the user is invited.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.Name">
            <summary>
            Gets the name of the guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.IconHash">
            <summary>
            Gets the guild icon's hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.IconUrl">
            <summary>
            Gets the guild icon's url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.SplashHash">
            <summary>
            Gets the hash of guild's invite splash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.SplashUrl">
            <summary>
            Gets the URL of guild's invite splash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.Banner">
            <summary>
            Gets the guild's banner hash, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.BannerUrl">
            <summary>
            Gets the guild's banner in url form.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.Description">
            <summary>
            Gets the guild description, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.Features">
            <summary>
            Gets a collection of this guild's features.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.VerificationLevel">
            <summary>
            Gets the guild's verification level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.VanityUrlCode">
            <summary>
            Gets vanity URL code for this guild, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.WelcomeScreen">
            <summary>
            Gets the guild's welcome screen, when applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.IsNsfw">
            <summary>
            Gets the guild nsfw status.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteGuild.NsfwLevel">
            <summary>
            Gets the guild nsfw level.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInviteGuild.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordInviteGuild"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordInviteStage">
            <summary>
            Represents a stage instance to which the user is invited.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteStage.Members">
            <summary>
            Gets the members speaking in the Stage.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteStage.ParticipantCount">
            <summary>
            Gets the number of users in the Stage.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteStage.SpeakerCount">
            <summary>
            Gets the number of users speaking in the Stage.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordInviteStage.Topic">
            <summary>
            Gets the topic of the Stage instance.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordInviteStage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordInviteStage"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordAttachment">
            <summary>
            Represents an attachment for a message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAttachment.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAttachment.Description">
            <summary>
            Gets the description of the file.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAttachment.MediaType">
            <summary>
            Gets the media, or MIME, type of the file.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAttachment.FileSize">
            <summary>
            Gets the file size in bytes.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAttachment.Url">
            <summary>
            Gets the URL of the file.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAttachment.ProxyUrl">
            <summary>
            Gets the proxied URL of the file.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAttachment.Height">
            <summary>
            Gets the height. Applicable only if the attachment is an image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAttachment.Width">
            <summary>
            Gets the width. Applicable only if the attachment is an image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordAttachment.Ephemeral">
            <summary>
            Gets whether this attachment is ephemeral.
            Ephemeral attachments will automatically be removed after a set period of time.
            Ephemeral attachments on messages are guaranteed to be available as long as the message itself exists.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordAttachment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordAttachment"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordMentions">
            <summary>
            Handles mentionables.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordMentions.PARSE_USERS">
            <summary>
            Parse users.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordMentions.PARSE_ROLES">
            <summary>
            Parse roles.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordMentions.PARSE_EVERYONE">
            <summary>
            Parse everyone.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMentions.Roles">
            <summary>
            Collection roles to serialize
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMentions.Users">
            <summary>
            Collection of users to serialize
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMentions.Parse">
            <summary>
            The values to be parsed
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMentions.RepliedUser">
            <summary>
            For replies, whether to mention the author of the message being replied to.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMentions.#ctor(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.IMention},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMentions"/> class.
            </summary>
            <param name="mentions">The mentions.</param>
            <param name="mention">If true, mention.</param>
            <param name="repliedUser">If true, replied user.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordMessage">
            <summary>
            Represents a Discord text message.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMessage"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.#ctor(DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMessage"/> class.
            </summary>
            <param name="other">The other message.</param>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Channel">
            <summary>
            Gets the channel in which the message was sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.INTERNAL_THREAD">
            <summary>
            Gets the thread in which the message was sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.ChannelId">
            <summary>
            Gets the ID of the channel in which the message was sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Components">
            <summary>
            Gets the components this message was sent with.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Author">
            <summary>
            Gets the user or member that sent the message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Content">
            <summary>
            Gets the message's content.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Timestamp">
            <summary>
            Gets the message's creation timestamp.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.TimestampRaw">
            <summary>
            Gets the message's creation timestamp as raw string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.EditedTimestamp">
            <summary>
            Gets the message's edit timestamp. Will be null if the message was not edited.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.EditedTimestampRaw">
            <summary>
            Gets the message's edit timestamp as raw string. Will be null if the message was not edited.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.IsEdited">
            <summary>
            Gets whether this message was edited.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.IsTts">
            <summary>
            Gets whether the message is a text-to-speech message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.MentionEveryone">
            <summary>
            Gets whether the message mentions everyone.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.MentionedUsers">
            <summary>
            Gets users or members mentioned by this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.MentionedRoles">
            <summary>
            Gets roles mentioned by this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.MentionedChannels">
            <summary>
            Gets channels mentioned by this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Attachments">
            <summary>
            Gets files attached to this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Embeds">
            <summary>
            Gets embeds attached to this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Reactions">
            <summary>
            Gets reactions used on this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Nonce">
            <summary>
            Gets the nonce sent with the message, if the message was sent by the client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Pinned">
            <summary>
            Gets whether the message is pinned.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.WebhookId">
            <summary>
            Gets the id of the webhook that generated this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Activity">
            <summary>
            Gets the message activity in the Rich Presence embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Application">
            <summary>
            Gets the message application in the Rich Presence embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.ApplicationId">
            <summary>
            Gets the message application id in the Rich Presence embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.InternalReference">
            <summary>
            Gets the internal reference.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Reference">
            <summary>
            Gets the original message reference from the crossposted message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Flags">
            <summary>
            Gets the bitwise flags for this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.WebhookMessage">
            <summary>
            Gets whether the message originated from a webhook.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.JumpLink">
            <summary>
            Gets the jump link to this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Stickers">
            <summary>
            Gets stickers for this message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.GuildId">
            <summary>
            Gets the guild id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.ReferencedMessage">
            <summary>
            Gets the message object for the referenced message
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Interaction">
            <summary>
            Gets whether the message is a response to an interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessage.Thread">
            <summary>
            Gets the thread that was started from this message.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.InternalBuildMessageReference">
            <summary>
            Build the message reference.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.GetMentions">
            <summary>
            Gets the mentions.
            </summary>
            <returns>An array of IMentions.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.PopulateMentions">
            <summary>
            Populates the mentions.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.ModifyAsync(DisCatSharp.Entities.Optional{System.String})">
            <summary>
            Edits the message.
            </summary>
            <param name="content">New content.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.ModifyAsync(DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordEmbed})">
            <summary>
            Edits the message.
            </summary>
            <param name="embed">New embed.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.ModifyAsync(DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordEmbed})">
            <summary>
            Edits the message.
            </summary>
            <param name="content">New content.</param>
            <param name="embed">New embed.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.ModifyAsync(DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmbed}})">
            <summary>
            Edits the message.
            </summary>
            <param name="content">New content.</param>
            <param name="embeds">New embeds.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.ModifyAsync(DisCatSharp.Entities.DiscordMessageBuilder)">
            <summary>
            Edits the message.
            </summary>
            <param name="builder">The builder of the message to edit.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.ModifySuppressionAsync(System.Boolean)">
            <summary>
            Edits the message embed suppression.
            </summary>
            <param name="suppress">Suppress embeds.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.ClearAttachmentsAsync">
            <summary>
            Clears all attachments from the message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.ModifyAsync(System.Action{DisCatSharp.Entities.DiscordMessageBuilder})">
            <summary>
            Edits the message.
            </summary>
            <param name="action">The builder of the message to edit.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client tried to modify a message not sent by them.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.DeleteAsync(System.String)">
            <summary>
            Deletes the message.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.CreateThreadAsync(System.String,DisCatSharp.ThreadAutoArchiveDuration,System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a thread.
            Depending on the <see cref="T:DisCatSharp.ChannelType"/> of the parent channel it's either a <see cref="F:DisCatSharp.ChannelType.PublicThread"/> or a <see cref="F:DisCatSharp.ChannelType.NewsThread"/>.
            </summary>
            <param name="name">The name of the thread.</param>
            <param name="autoArchiveDuration"><see cref="T:DisCatSharp.ThreadAutoArchiveDuration"/> till it gets archived. Defaults to <see cref="F:DisCatSharp.ThreadAutoArchiveDuration.OneHour"/></param>
            <param name="rateLimitPerUser">The per user ratelimit, aka slowdown.</param>
            <param name="reason">The reason.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.CreatePrivateThreads"/> or <see cref="F:DisCatSharp.Permissions.SendMessagesInThreads"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the channel does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the <see cref="T:DisCatSharp.ThreadAutoArchiveDuration"/> cannot be modified.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.PinAsync">
            <summary>
            Pins the message in its channel.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.UnpinAsync">
            <summary>
            Unpins the message in its channel.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.RespondAsync(System.String)">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="content">Message content to respond with.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.RespondAsync(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.RespondAsync(System.String,DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="content">Message content to respond with.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.RespondAsync(DisCatSharp.Entities.DiscordMessageBuilder)">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="builder">The Discord message builder.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.RespondAsync(System.Action{DisCatSharp.Entities.DiscordMessageBuilder})">
            <summary>
            Responds to the message. This produces a reply.
            </summary>
            <param name="action">The Discord message builder.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.CreateReactionAsync(DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Creates a reaction to this message.
            </summary>
            <param name="emoji">The emoji you want to react with, either an emoji or name:id</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AddReactions"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.DeleteOwnReactionAsync(DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Deletes your own reaction
            </summary>
            <param name="emoji">Emoji for the reaction you want to remove, either an emoji or name:id</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.DeleteReactionAsync(DisCatSharp.Entities.DiscordEmoji,DisCatSharp.Entities.DiscordUser,System.String)">
            <summary>
            Deletes another user's reaction.
            </summary>
            <param name="emoji">Emoji for the reaction you want to remove, either an emoji or name:id.</param>
            <param name="user">Member you want to remove the reaction for</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.GetReactionsAsync(DisCatSharp.Entities.DiscordEmoji,System.Int32,System.Nullable{System.UInt64})">
            <summary>
            Gets users that reacted with this emoji.
            </summary>
            <param name="emoji">Emoji to react with.</param>
            <param name="limit">Limit of users to fetch.</param>
            <param name="after">Fetch users after this user's id.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.DeleteAllReactionsAsync(System.String)">
            <summary>
            Deletes all reactions for this message.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.DeleteReactionsEmojiAsync(DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Deletes all reactions of a specific reaction for this message.
            </summary>
            <param name="emoji">The emoji to clear, either an emoji or name:id.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the emoji does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.GetReactionsInternalAsync(DisCatSharp.Entities.DiscordEmoji,System.Int32,System.Nullable{System.UInt64})">
            <summary>
            Gets the reactions.
            </summary>
            <param name="emoji">The emoji to search for.</param>
            <param name="limit">The limit of results.</param>
            <param name="after">Get the reasctions after snowflake.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.ToString">
            <summary>
            Returns a string representation of this message.
            </summary>
            <returns>String representation of this message.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordMessage"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.Equals(DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordMessage"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordMessage"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordMessage"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordMessage"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordMessage"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordMessage"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.op_Equality(DisCatSharp.Entities.DiscordMessage,DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordMessage"/> objects are equal.
            </summary>
            <param name="e1">First message to compare.</param>
            <param name="e2">Second message to compare.</param>
            <returns>Whether the two messages are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessage.op_Inequality(DisCatSharp.Entities.DiscordMessage,DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordMessage"/> objects are not equal.
            </summary>
            <param name="e1">First message to compare.</param>
            <param name="e2">Second message to compare.</param>
            <returns>Whether the two messages are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordMessageActivity">
            <summary>
            Represents a Rich Presence activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageActivity.Type">
            <summary>
            Gets the activity type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageActivity.PartyId">
            <summary>
            Gets the party id of the activity.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageActivity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMessageActivity"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordMessageApplication">
            <summary>
            Represents a Rich Presence application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageApplication.CoverImageUrl">
            <summary>
            Gets the ID of this application's cover image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageApplication.Description">
            <summary>
            Gets the application's description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageApplication.Icon">
            <summary>
            Gets the ID of the application's icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageApplication.Name">
            <summary>
            Gets the application's name.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMessageApplication"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordMessageBuilder">
            <summary>
            Constructs a Message to be sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.Content">
            <summary>
            Gets or Sets the Message to be sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.Embed">
            <summary>
            Gets or sets the embed for the builder. This will always set the builder to have one embed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.Sticker">
            <summary>
            Gets the Sticker to be send.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.Embeds">
            <summary>
            Gets the Embeds to be sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.IsTts">
            <summary>
            Gets or Sets if the message should be TTS.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordMessageBuilder.KeepAttachmentsInternal">
            <summary>
            Whether to keep previous attachments.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.Mentions">
            <summary>
            Gets the Allowed Mentions for the message to be sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.Files">
            <summary>
            Gets the Files to be sent in the Message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.Components">
            <summary>
            Gets the components that will be attached to the message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.Attachments">
            <summary>
            Gets the Attachments to be sent in the Message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.ReplyId">
            <summary>
            Gets the Reply Message ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.MentionOnReply">
            <summary>
            Gets if the Reply should mention the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.Suppressed">
            <summary>
            Gets if the embeds should be suppressed.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageBuilder.FailOnInvalidReply">
            <summary>
            Gets if the Reply will error if the Reply Message Id does not reference a valid message.
            <para>If set to false, invalid replies are send as a regular message.</para>
            <para>Defaults to false.</para>
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.WithContent(System.String)">
            <summary>
            Sets the Content of the Message.
            </summary>
            <param name="content">The content to be set.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.WithSticker(DisCatSharp.Entities.DiscordSticker)">
            <summary>
            Adds a sticker to the message. Sticker must be from current guild.
            </summary>
            <param name="sticker">The sticker to add.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.AddComponents(DisCatSharp.Entities.DiscordComponent[])">
            <summary>
            Adds a row of components to a message, up to 5 components per row, and up to 5 rows per message.
            </summary>
            <param name="components">The components to add to the message.</param>
            <returns>The current builder to be chained.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">No components were passed.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.AddComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordActionRowComponent})">
            <summary>
            Appends several rows of components to the message
            </summary>
            <param name="components">The rows of components to add, holding up to five each.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.AddComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordComponent})">
            <summary>
            Adds a row of components to a message, up to 5 components per row, and up to 5 rows per message.
            </summary>
            <param name="components">The components to add to the message.</param>
            <returns>The current builder to be chained.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">No components were passed.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.HasTts(System.Boolean)">
            <summary>
            Sets if the message should be TTS.
            </summary>
            <param name="isTts">If TTS should be set.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.WithEmbed(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Sets the embed for the current builder.
            </summary>
            <param name="embed">The embed that should be set.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.AddEmbed(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Appends an embed to the current builder.
            </summary>
            <param name="embed">The embed that should be appended.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.AddEmbeds(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmbed})">
            <summary>
            Appends several embeds to the current builder.
            </summary>
            <param name="embeds">The embeds that should be appended.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.WithAllowedMention(DisCatSharp.Entities.IMention)">
            <summary>
            Sets if the message has allowed mentions.
            </summary>
            <param name="allowedMention">The allowed Mention that should be sent.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.WithAllowedMentions(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.IMention})">
            <summary>
            Sets if the message has allowed mentions.
            </summary>
            <param name="allowedMentions">The allowed Mentions that should be sent.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.WithFile(System.String,System.IO.Stream,System.Boolean,System.String)">
            <summary>
            Sets if the message has files to be sent.
            </summary>
            <param name="fileName">The fileName that the file should be sent as.</param>
            <param name="stream">The Stream to the file.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <param name="description">Description of the file.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.WithFile(System.IO.FileStream,System.Boolean,System.String)">
            <summary>
            Sets if the message has files to be sent.
            </summary>
            <param name="stream">The Stream to the file.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <param name="description">Description of the file.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.WithFiles(System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.Boolean)">
            <summary>
            Sets if the message has files to be sent.
            </summary>
            <param name="files">The Files that should be sent.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.ModifyAttachments(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordAttachment})">
            <summary>
            Modifies the given attachments on edit.
            </summary>
            <param name="attachments">Attachments to edit.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.KeepAttachments(System.Boolean)">
            <summary>
            Whether to keep the message attachments, if new ones are added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.WithReply(System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Sets if the message is a reply
            </summary>
            <param name="messageId">The ID of the message to reply to.</param>
            <param name="mention">If we should mention the user in the reply.</param>
            <param name="failOnInvalidReply">Whether sending a reply that references an invalid message should be </param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.SendAsync(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Sends the Message to a specific channel
            </summary>
            <param name="channel">The channel the message should be sent to.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.ModifyAsync(DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Sends the modified message.
            <para>Note: Message replies cannot be modified. To clear the reply, simply pass <see langword="null"/> to <see cref="M:DisCatSharp.Entities.DiscordMessageBuilder.WithReply(System.UInt64,System.Boolean,System.Boolean)"/>.</para>
            </summary>
            <param name="msg">The original Message to modify.</param>
            <returns>The current builder to be chained.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.ClearComponents">
            <summary>
            Clears all message components on this builder.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.Clear">
            <summary>
            Allows for clearing the Message Builder so that it can be used again to send a new message.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageBuilder.Validate(System.Boolean)">
            <summary>
            Does the validation before we send a the Create/Modify request.
            </summary>
            <param name="isModify">Tells the method to perform the Modify Validation or Create Validation.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordMessageFile">
            <summary>
            Represents the File that should be sent to Discord from the <see cref="T:DisCatSharp.Entities.DiscordMessageBuilder"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageFile.#ctor(System.String,System.IO.Stream,System.Nullable{System.Int64},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMessageFile"/> class.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="stream">The stream.</param>
            <param name="resetPositionTo">The reset position to.</param>
            <param name="fileType">The file type.</param>
            <param name="contentType">The content type.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageFile.FileName">
            <summary>
            Gets the FileName of the File.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageFile.Description">
            <summary>
            Gets the description of the File.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageFile.Stream">
            <summary>
            Gets the stream of the File.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageFile.FileType">
            <summary>
            Gets or sets the file type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageFile.ContentType">
            <summary>
            Gets or sets the content type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageFile.ResetPositionTo">
            <summary>
            Gets the position the File should be reset to.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordMessageInteraction">
            <summary>
            Represents the message interaction data sent when a message is an interaction response.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageInteraction.Type">
            <summary>
            Gets the type of the interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageInteraction.Name">
            <summary>
            Gets the name of the <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageInteraction.User">
            <summary>
            Gets the user who invoked the interaction.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordMessageReference">
            <summary>
            Represents data from the original message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageReference.Message">
            <summary>
            Gets the original message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageReference.Channel">
            <summary>
            Gets the channel of the original message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordMessageReference.Guild">
            <summary>
            Gets the guild of the original message.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageReference.ToString">
            <summary>
            Gets a readable message reference string.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordMessageReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordMessageReference"/> class.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.InternalDiscordMessageReference.MessageId">
            <summary>
            Gets the message id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.InternalDiscordMessageReference.ChannelId">
            <summary>
            Gets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.InternalDiscordMessageReference.GuildId">
            <summary>
            Gets the guild id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.InternalDiscordMessageReference.FailIfNotExists">
            <summary>
            Whether it should fail if it does not exists.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordReaction">
            <summary>
            Represents a reaction to a message.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordReaction.Count">
            <summary>
            Gets the total number of users who reacted with this emoji.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordReaction.IsMe">
            <summary>
            Gets whether the current user reacted with this emoji.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordReaction.Emoji">
            <summary>
            Gets the emoji used to react to this message.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordReaction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordReaction"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.IMention">
            <summary>
            Interface for mentionables
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.RepliedUserMention">
            <summary>
            Allows a reply to ping the user being replied to.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.RepliedUserMention.All">
            <summary>
            Mention the user being replied to.  Alias to <see cref="M:DisCatSharp.Entities.RepliedUserMention.#ctor"/> constructor.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.EveryoneMention">
            <summary>
            Allows @everyone and @here pings to mention in the message.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.EveryoneMention.All">
            <summary>
            Allow the mentioning of @everyone and @here. Alias to <see cref="M:DisCatSharp.Entities.EveryoneMention.#ctor"/> constructor.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.UserMention">
            <summary>
            Allows @user pings to mention in the message.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.UserMention.All">
            <summary>
            Allow mentioning of all users. Alias to <see cref="M:DisCatSharp.Entities.UserMention.#ctor"/> constructor.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.UserMention.Id">
            <summary>
            Optional Id of the user that is allowed to be mentioned. If null, then all user mentions will be allowed.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.UserMention.#ctor(System.UInt64)">
            <summary>
            Allows the specific user to be mentioned
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:DisCatSharp.Entities.UserMention.#ctor(DisCatSharp.Entities.DiscordUser)">
            <summary>
            Allows the specific user to be mentioned
            </summary>
            <param name="user"></param>
        </member>
        <member name="T:DisCatSharp.Entities.RoleMention">
            <summary>
            Allows @role pings to mention in the message.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.RoleMention.All">
            <summary>
            Allow the mentioning of all roles.  Alias to <see cref="M:DisCatSharp.Entities.RoleMention.#ctor"/> constructor.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.RoleMention.Id">
            <summary>
            Optional Id of the role that is allowed to be mentioned. If null, then all role mentions will be allowed.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.RoleMention.#ctor(System.UInt64)">
            <summary>
            Allows the specific id to be mentioned
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:DisCatSharp.Entities.RoleMention.#ctor(DisCatSharp.Entities.DiscordRole)">
            <summary>
            Allows the specific role to be mentioned
            </summary>
            <param name="role"></param>
        </member>
        <member name="T:DisCatSharp.Entities.Mentions">
            <summary>
            Contains static instances of common mention patterns.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.Mentions.All">
            <summary>
            All possible mentions - @everyone + @here, users, and roles.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.Mentions.None">
            <summary>
            No mentions allowed.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.Optional">
            <summary>
            Helper methods for instantiating an <see cref="T:DisCatSharp.Entities.Optional`1"/>.
            </summary>
            <remarks>
            This class only serves to provide <see cref="M:DisCatSharp.Entities.Optional.Some``1(``0)"/> and <see cref="F:DisCatSharp.Entities.Optional.None"/>
            as utility that supports type inference.
            </remarks>
        </member>
        <member name="F:DisCatSharp.Entities.Optional.None">
            <summary>
            Provided for easy creation of empty <see cref="T:DisCatSharp.Entities.Optional`1"/>s.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.Optional.Some``1(``0)">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Entities.Optional`1"/> with specified value and valid state.
            </summary>
            <param name="value">Value to populate the optional with.</param>
            <typeparam name="T">Type of the value.</typeparam>
            <returns>Created optional.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional.FromNullable``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional.FromValue``1(``0)">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Entities.Optional`1"/> with specified value and valid state.
            </summary>
            <param name="value">Value to populate the optional with.</param>
            <typeparam name="T">Type of the value.</typeparam>
            <returns>Created optional.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional.FromNoValue``1">
            <summary>
            Creates a new empty <see cref="T:DisCatSharp.Entities.Optional`1"/> with no value and invalid state.
            </summary>
            <typeparam name="T">The type that the created instance is wrapping around.</typeparam>
            <returns>Created optional.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.None">
            <summary>
            Unit type for creating an empty <see cref="T:DisCatSharp.Entities.Optional`1"/>s.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.IOptional">
            <summary>
            Used internally to make serialization more convenient, do NOT change this, do NOT implement this yourself.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.IOptional.HasValue">
            <summary>
            Gets a whether it has a value.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.IOptional.RawValue">
            <summary>
            Gets the raw value.
            </summary>
            <remarks>
            Must NOT throw InvalidOperationException.
            </remarks>
        </member>
        <member name="T:DisCatSharp.Entities.Optional`1">
            <summary>
            Represents a wrapper which may or may not have a value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="F:DisCatSharp.Entities.Optional`1.None">
            <summary>
            Static empty <see cref="T:DisCatSharp.Entities.Optional"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.Optional`1.HasValue">
            <summary>
            Gets whether this <see cref="T:DisCatSharp.Entities.Optional`1"/> has a value.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.Optional`1.Value">
            <summary>
            Gets the value of this <see cref="T:DisCatSharp.Entities.Optional`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">If this <see cref="T:DisCatSharp.Entities.Optional`1"/> has no value.</exception>
        </member>
        <member name="P:DisCatSharp.Entities.Optional`1.DisCatSharp#Entities#IOptional#RawValue">
            <summary>
            Gets the raw value.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.#ctor(`0)">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Entities.Optional`1"/> with specified value.
            </summary>
            <param name="value">Value of this option.</param>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.Map``1(System.Func{`0,``0})">
            <summary>
            Performs a mapping operation on the current <see cref="T:DisCatSharp.Entities.Optional`1"/>, turning it into an Optional holding a
            <typeparamref name="TOut"/> instance if the source optional contains a value; otherwise, returns an
            <see cref="T:DisCatSharp.Entities.Optional`1"/> of that same type with no value.
            </summary>
            <param name="mapper">The mapping function to apply on the current value if it exists</param>
            <typeparam name="TOut">The type of the target value returned by <paramref name="mapper"/></typeparam>
            <returns>
            An <see cref="T:DisCatSharp.Entities.Optional`1"/> containing a value denoted by calling <paramref name="mapper"/> if the current
            <see cref="T:DisCatSharp.Entities.Optional`1"/> contains a value; otherwise, an empty <see cref="T:DisCatSharp.Entities.Optional`1"/> of the target
            type.
            </returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.MapOrNull``1(System.Func{`0,``0})">
            <summary>
            Maps to <see cref="F:DisCatSharp.Entities.Optional`1.None"/> for <see cref="F:DisCatSharp.Entities.Optional`1.None"/>, to <code>default</code> for <code>null</code> and to the mapped value otherwise./>
            </summary>
            <typeparam name="TOut">The type to map to.</typeparam>
            <param name="mapper">The function that does the mapping of the non-null <typeparamref name="T"/>.</param>
            <returns>The mapped value.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.ValueOr(`0)">
            <summary>
            Gets the value of the <see cref="T:DisCatSharp.Entities.Optional`1"/> or a specified value, if the <see cref="T:DisCatSharp.Entities.Optional`1"/> has no value.
            </summary>
            <param name="other">The value to return if this has no value.</param>
            <returns>Either the value of the <see cref="T:DisCatSharp.Entities.Optional`1"/> if present or the provided value.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.ValueOrDefault">
            <summary>
            Gets the value of the <see cref="T:DisCatSharp.Entities.Optional`1"/> or the default value for <typeparamref name="T"/>, if the
            <see cref="T:DisCatSharp.Entities.Optional`1"/> has no value.
            </summary>
            <returns>Either the value of the <see cref="T:DisCatSharp.Entities.Optional`1"/> if present or the type's default value.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.Expect(System.Exception)">
            <summary>
            Gets the <see cref="T:DisCatSharp.Entities.Optional"/>'s value, or throws the provided exception if it's empty.
            </summary>
            <param name="err">The exception to throw if the optional is empty.</param>
            <returns>The value of the <see cref="T:DisCatSharp.Entities.Optional"/>, if present.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.Expect(System.String)">
            <summary>
            Gets the <see cref="T:DisCatSharp.Entities.Optional"/>'s value, or throws a standard exception with the provided string if it's
            empty.
            </summary>
            <param name="str">The string provided to the exception.</param>
            <returns>The value of the <see cref="T:DisCatSharp.Entities.Optional"/>, if present.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.HasValueAnd(System.Predicate{`0})">
            <summary>
            Checks if this has a value and tests the predicate if it does.
            </summary>
            <param name="predicate">The predicate to test if this has a value.</param>
            <returns>True if this has a value and the predicate is fulfilled, false otherwise.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.ToString">
            <summary>
            Returns a string representation of this optional value.
            </summary>
            <returns>String representation of this optional value.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.Optional`1"/> (or its value) are equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.Optional`1"/> or its value.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.Equals(DisCatSharp.Entities.Optional{`0})">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.Optional`1"/> is equal to another <see cref="T:DisCatSharp.Entities.Optional`1"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.Optional`1"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.Optional`1"/> is equal to this <see cref="T:DisCatSharp.Entities.Optional`1"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.Equals(`0)">
            <summary>
            Checks whether the value of this <see cref="T:DisCatSharp.Entities.Optional`1"/> is equal to specified object.
            </summary>
            <param name="e">Object to compare to.</param>
            <returns>Whether the object is equal to the value of this <see cref="T:DisCatSharp.Entities.Optional`1"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.Optional`1"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.Optional`1"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.Optional`1.op_Implicit(DisCatSharp.Entities.None)~DisCatSharp.Entities.Optional{`0}">
            <summary>
            Creates an empty optional.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.OptionalJsonContractResolver">
            <summary>
            Represents an optional json contract resolver.
            <seealso cref="F:DisCatSharp.Net.Serialization.DiscordJson.s_serializer"/>
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.OptionalJsonContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates the property.
            </summary>
            <param name="member">The member.</param>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="T:DisCatSharp.Entities.OptionalJsonConverter">
            <summary>
            Represents an optional json converter.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.OptionalJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Entities.OptionalJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Entities.OptionalJsonConverter.CanConvert(System.Type)">
            <summary>
            Whether it can convert.
            </summary>
            <param name="objectType">The object type.</param>
        </member>
        <member name="T:DisCatSharp.Entities.SnowflakeObject">
            <summary>
            Represents an object in Discord API.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.SnowflakeObject.Id">
            <summary>
            Gets the ID of this object.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.SnowflakeObject.CreationTimestamp">
            <summary>
            Gets the date and time this object was created.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.SnowflakeObject.Discord">
            <summary>
            Gets the client instance this object is tied to.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.SnowflakeObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.SnowflakeObject"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordStageInstance">
            <summary>
            Represents a Stage instance.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStageInstance.GuildId">
            <summary>
            Gets the guild id of the associated Stage channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStageInstance.Guild">
            <summary>
            Gets the guild to which this channel belongs.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStageInstance.ChannelId">
            <summary>
            Gets id of the associated Stage channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStageInstance.Topic">
            <summary>
            Gets the topic of the Stage instance.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStageInstance.PrivacyLevel">
            <summary>
            Gets the topic of the Stage instance.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStageInstance.DiscoverableDisabled">
            <summary>
            Gets whether or not stage discovery is disabled.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordStageInstance.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordStageInstance.Equals(DisCatSharp.Entities.DiscordStageInstance)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordStageInstance"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordStageInstance.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordStageInstance.op_Equality(DisCatSharp.Entities.DiscordStageInstance,DisCatSharp.Entities.DiscordStageInstance)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/> objects are equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordStageInstance.op_Inequality(DisCatSharp.Entities.DiscordStageInstance,DisCatSharp.Entities.DiscordStageInstance)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordStageInstance"/> objects are not equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordSticker">
            <summary>
            Represents a Discord Sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.PackId">
            <summary>
            Gets the Pack ID of this sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.Name">
            <summary>
            Gets the Name of the sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.Description">
            <summary>
            Gets the Description of the sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.Type">
            <summary>
            Gets the type of sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.User">
            <summary>
            For guild stickers, gets the user that made the sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.Guild">
            <summary>
            Gets the guild associated with this sticker, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.GuildId">
            <summary>
            Gets the guild id the sticker belongs too.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.Available">
            <summary>
            Gets whether this sticker is available. Only applicable to guild stickers.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.SortValue">
            <summary>
            Gets the sticker's sort order, if it's in a pack.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.Tags">
            <summary>
            Gets the list of tags for the sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.Asset">
            <summary>
            Gets the asset hash of the sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.PreviewAsset">
            <summary>
            Gets the preview asset hash of the sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.FormatType">
            <summary>
            Gets the Format type of the sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.InternalTags">
            <summary>
            Gets the tags of the sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordSticker.Url">
            <summary>
            Gets the url of the sticker.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSticker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordSticker"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSticker.Equals(DisCatSharp.Entities.DiscordSticker)">
            <summary>
            Whether to stickers are equal.
            </summary>
            <param name="other">DiscordSticker</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSticker.ToString">
            <summary>
            Gets the sticker in readable format.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSticker.ModifyAsync(DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},System.String)">
            <summary>
            Modifies the sticker
            </summary>
            <param name="name">The name of the sticker</param>
            <param name="description">The description of the sticker</param>
            <param name="tags">The name of a unicode emoji representing the sticker's expression</param>
            <param name="reason">Audit log reason</param>
            <returns>A sticker object</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the sticker could not be found.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.ArgumentException">Sticker does not belong to a guild.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordSticker.DeleteAsync(System.String)">
            <summary>
            Deletes the sticker
            </summary>
            <param name="reason">Audit log reason</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the sticker could not be found.</exception>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageEmojisAndStickers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.ArgumentException">Sticker does not belong to a guild.</exception>
        </member>
        <member name="T:DisCatSharp.Entities.StickerType">
            <summary>
            The sticker type
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.StickerType.Standard">
            <summary>
            Standard nitro sticker
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.StickerType.Guild">
            <summary>
            Custom guild sticker
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.StickerFormat">
            <summary>
            The sticker type
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.StickerFormat.Png">
            <summary>
            Sticker is a png
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.StickerFormat.Apng">
            <summary>
            Sticker is a animated png
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.StickerFormat.Lottie">
            <summary>
            Sticker is lottie
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordStickerPack">
            <summary>
            Represents a Discord sticker pack.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStickerPack.Stickers">
            <summary>
            Gets the stickers contained in this pack.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStickerPack.Name">
            <summary>
            Gets the name of this sticker pack.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStickerPack.SkuId">
            <summary>
            Gets the sku id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStickerPack.CoverStickerId">
            <summary>
            Gets the Id of this pack's cover sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStickerPack.CoverSticker">
            <summary>
            Gets the pack's cover sticker.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStickerPack.BannerAssetId">
            <summary>
            Gets the Id of this pack's banner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordStickerPack.BannerUrl">
            <summary>
            Gets the pack's banner url.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordStickerPack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordStickerPack"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordThreadChannel">
            <summary>
            Represents a discord thread channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.OwnerId">
            <summary>
            Gets ID of the owner that started this thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.Name">
            <summary>
            Gets the name of this thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.Type">
            <summary>
            Gets the type of this thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.IsPrivate">
            <summary>
            Gets whether this thread is private.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.LastMessageId">
            <summary>
            Gets the ID of the last message sent in this thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.PerUserRateLimit">
            <summary>
            <para>Gets the slowmode delay configured for this thread.</para>
            <para>All bots, as well as users with <see cref="F:DisCatSharp.Permissions.ManageChannels"/> or <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permissions in the channel are exempt from slowmode.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.MessageCount">
            <summary>
            Gets an approximate count of messages in a thread, stops counting at 50.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.MemberCount">
            <summary>
            Gets an approximate count of users in a thread, stops counting at 50.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.CurrentMember">
            <summary>
            Represents the current member for this thread. This will have a value if the user has joined the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.LastPinTimestamp">
            <summary>
            Gets when the last pinned message was pinned in this thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.LastPinTimestampRaw">
            <summary>
            Gets when the last pinned message was pinned in this thread as raw string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.ThreadMetadata">
            <summary>
            Gets the threads metadata.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannel.ThreadMembers">
            <summary>
            Gets the thread members object.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.DeleteAsync(System.String)">
            <summary>
            Deletes a thread.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageThreads"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.ModifyAsync(System.Action{DisCatSharp.Net.Models.ThreadEditModel})">
            <summary>
            Modifies the current thread.
            </summary>
            <param name="action">Action to perform on this thread</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageThreads"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when the <see cref="T:DisCatSharp.ThreadAutoArchiveDuration"/> cannot be modified. This happens, when the guild hasn't reached a certain boost <see cref="T:DisCatSharp.PremiumTier"/>.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.ArchiveAsync(System.Boolean,System.String)">
            <summary>
            Archives a thread.
            </summary>
            <param name="locked">Whether the thread should be locked.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageThreads"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.UnarchiveAsync(System.String)">
            <summary>
            Unarchives a thread.
            </summary>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetMembersAsync">
            <summary>
            Gets the members of a thread. Needs the <see cref="F:DisCatSharp.DiscordIntents.GuildMembers"/> intent.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.AddMemberAsync(System.UInt64)">
            <summary>
            Adds a member to this thread.
            </summary>
            <param name="memberId">The member id to be added.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.AddMemberAsync(DisCatSharp.Entities.DiscordMember)">
            <summary>
            Adds a member to this thread.
            </summary>
            <param name="member">The member to be added.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetMemberAsync(System.UInt64)">
            <summary>
            Gets a member in this thread.
            </summary>
            <param name="memberId">The member to be added.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member is not part of the thread.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetMemberAsync(DisCatSharp.Entities.DiscordMember)">
            <summary>
            Gets a member in this thread.
            </summary>
            <param name="member">The member to be added.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the member is not part of the thread.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.RemoveMemberAsync(System.UInt64)">
            <summary>
            Removes a member from this thread.
            </summary>
            <param name="memberId">The member id to be removed.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.RemoveMemberAsync(DisCatSharp.Entities.DiscordMember)">
            <summary>
            Removes a member from this thread. Only applicable to private threads.
            </summary>
            <param name="member">The member to be removed.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.AddRoleAsync(System.UInt64)">
            <summary>
            Adds a role to this thread. Only applicable to private threads.
            </summary>
            <param name="roleId">The role id to be added.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.AddRoleAsync(DisCatSharp.Entities.DiscordRole)">
            <summary>
            Adds a role to this thread. Only applicable to private threads.
            </summary>
            <param name="role">The role to be added.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.RemoveRoleAsync(System.UInt64)">
            <summary>
            Removes a role from this thread. Only applicable to private threads.
            </summary>
            <param name="roleId">The role id to be removed.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.RemoveRoleAsync(DisCatSharp.Entities.DiscordRole)">
            <summary>
            Removes a role to from thread. Only applicable to private threads.
            </summary>
            <param name="role">The role to be removed.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.JoinAsync">
            <summary>
            Joins a thread.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client has no access to this thread.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.LeaveAsync">
            <summary>
            Leaves a thread.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client has no access to this thread.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.SendMessageAsync(System.String)">
            <summary>
            Sends a message to this thread.
            </summary>
            <param name="content">Content of the message to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessagesInThreads"/> permission and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true or the thread is locked.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.SendMessageAsync(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Sends a message to this thread.
            </summary>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessagesInThreads"/> permission and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true or the thread is locked.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.SendMessageAsync(System.String,DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Sends a message to this thread.
            </summary>
            <param name="content">Content of the message to send.</param>
            <param name="embed">Embed to attach to the message.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessagesInThreads"/> permission and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true or the thread is locked.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.SendMessageAsync(DisCatSharp.Entities.DiscordMessageBuilder)">
            <summary>
            Sends a message to this thread.
            </summary>
            <param name="builder">The builder with all the items to thread.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessagesInThreads"/> permission and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true or the thread is locked.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.SendMessageAsync(System.Action{DisCatSharp.Entities.DiscordMessageBuilder})">
            <summary>
            Sends a message to this channel.
            </summary>
            <param name="action">The builder with all the items to send.</param>
            <returns>The sent message.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessagesInThreads"/> permission and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true or the thread is locked.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetMessageAsync(System.UInt64)">
            <summary>
            Returns a specific message
            </summary>
            <param name="id">The id of the message</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.SendMessagesInThreads"/> permission and <see cref="F:DisCatSharp.Permissions.SendTtsMessages"/> if TTS is true or the thread is locked.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetMessagesBeforeAsync(System.UInt64,System.Int32)">
            <summary>
            Returns a list of messages before a certain message.
            <param name="limit">The amount of messages to fetch.</param>
            <param name="before">Message to fetch before from.</param>
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> or the <see cref="F:DisCatSharp.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetMessagesAfterAsync(System.UInt64,System.Int32)">
            <summary>
            Returns a list of messages after a certain message.
            <param name="limit">The amount of messages to fetch.</param>
            <param name="after">Message to fetch after from.</param>
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> or the <see cref="F:DisCatSharp.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetMessagesAroundAsync(System.UInt64,System.Int32)">
            <summary>
            Returns a list of messages around a certain message.
            <param name="limit">The amount of messages to fetch.</param>
            <param name="around">Message to fetch around from.</param>
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> or the <see cref="F:DisCatSharp.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetMessagesAsync(System.Int32)">
            <summary>
            Returns a list of messages from the last message in the thread.
            <param name="limit">The amount of messages to fetch.</param>
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> or the <see cref="F:DisCatSharp.Permissions.ReadMessageHistory"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetMessagesInternalAsync(System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Returns a list of messages
            </summary>
            <param name="limit">How many messages should be returned.</param>
            <param name="before">Get messages before snowflake.</param>
            <param name="after">Get messages after snowflake.</param>
            <param name="around">Get messages around snowflake.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordMessage},System.String)">
            <summary>
            Deletes multiple messages if they are less than 14 days old.  If they are older, none of the messages will be deleted and you will receive a <see cref="T:DisCatSharp.Exceptions.BadRequestException"/> error.
            </summary>
            <param name="messages">A collection of messages to delete.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.DeleteMessageAsync(DisCatSharp.Entities.DiscordMessage,System.String)">
            <summary>
            Deletes a message
            </summary>
            <param name="message">The message to be deleted.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageMessages"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.TriggerTypingAsync">
            <summary>
            Post a typing indicator
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetPinnedMessagesAsync">
            <summary>
            Returns all pinned messages
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.AccessChannels"/> permission or the client is missing <see cref="F:DisCatSharp.Permissions.ReadMessageHistory"/>.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the thread does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.ToString">
            <summary>
            Returns a string representation of this thread.
            </summary>
            <returns>String representation of this thread.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.Equals(DisCatSharp.Entities.DiscordThreadChannel)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.op_Equality(DisCatSharp.Entities.DiscordThreadChannel,DisCatSharp.Entities.DiscordThreadChannel)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> objects are equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannel.op_Inequality(DisCatSharp.Entities.DiscordThreadChannel,DisCatSharp.Entities.DiscordThreadChannel)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> objects are not equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordThreadChannelMember">
            <summary>
            Represents a discord thread member object.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMember.UserId">
            <summary>
            Gets the id of the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMember.Member">
            <summary>
            Gets the member object of the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMember.Presence">
            <summary>
            Gets the presence of the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMember.JoinTimeStamp">
            <summary>
            Gets the timestamp when the user joined the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMember.JoinTimeStampRaw">
            <summary>
            Gets the timestamp when the user joined the thread as raw string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMember.Flags">
            <summary>
            Gets the thread member flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMember.Thread">
            <summary>
            Gets the category that contains this channel. For threads, gets the channel this thread was created in.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMember.Guild">
            <summary>
            Gets the guild to which this channel belongs.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannelMember.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordThreadChannelMember"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordThreadChannelMember"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannelMember.Equals(DisCatSharp.Entities.DiscordThreadChannelMember)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordThreadChannelMember"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordThreadChannelMember"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannelMember.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordThreadChannelMember"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordThreadChannelMember"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannelMember.op_Equality(DisCatSharp.Entities.DiscordThreadChannelMember,DisCatSharp.Entities.DiscordThreadChannelMember)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordThreadChannel"/> objects are equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannelMember.op_Inequality(DisCatSharp.Entities.DiscordThreadChannelMember,DisCatSharp.Entities.DiscordThreadChannelMember)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordThreadChannelMember"/> objects are not equal.
            </summary>
            <param name="e1">First channel to compare.</param>
            <param name="e2">Second channel to compare.</param>
            <returns>Whether the two channels are not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannelMember.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordThreadChannelMember"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordThreadChannelMetadata">
            <summary>
            Represents a discord thread metadata object.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMetadata.Archived">
            <summary>
            Gets whether the thread is archived or not.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMetadata.Archiver">
            <summary>
            Gets ID of the archiver.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMetadata.AutoArchiveDuration">
            <summary>
            Gets the time when it will be archived, while there is no action inside the thread (In minutes).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMetadata.ArchiveTimestamp">
            <summary>
            Gets the timestamp when it was archived.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMetadata.ArchiveTimestampRaw">
            <summary>
            Gets the timestamp when it was archived as raw string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMetadata.Locked">
            <summary>
            Gets whether the thread is locked.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMetadata.Invitable">
            <summary>
            Gets whether non-moderators can add other non-moderators to a thread; only available on private threads.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMetadata.CreateTimestamp">
            <summary>
            Gets the timestamp when the thread was created.
            Only populated for threads created after 2022-01-09.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadChannelMetadata.CreateTimestampRaw">
            <summary>
            Gets the timestamp when the thread was created as raw string.
            Only populated for threads created after 2022-01-09.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadChannelMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordThreadChannelMetadata"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordThreadResult">
            <summary>
            Represents a discord thread result.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadResult.ReturnedThreads">
            <summary>
            Gets the returned threads.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadResult.ActiveMembers">
            <summary>
            Gets the active members.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordThreadResult.HasMore">
            <summary>
            Whether there are more results.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordThreadResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordThreadResult"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.UserStatus">
            <summary>
            Represents user status.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.UserStatus.Offline">
            <summary>
            User is offline.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.UserStatus.Online">
            <summary>
            User is online.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.UserStatus.Idle">
            <summary>
            User is idle.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.UserStatus.DoNotDisturb">
            <summary>
            User asked not to be disturbed.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.UserStatus.Invisible">
            <summary>
            User is invisible. They will appear as Offline to anyone but themselves.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.UserStatus.Streaming">
            <summary>
            User is streaming.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.UserStatusConverter">
            <summary>
            Represents a user status converter.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.UserStatusConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Entities.UserStatusConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Entities.UserStatusConverter.CanConvert(System.Type)">
            <summary>
            Whether this user5 status can be converted.
            </summary>
            <param name="objectType">The object type.</param>
            <returns>A bool.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordActivity">
            <summary>
            Represents a game that a user is playing.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActivity.Id">
            <summary>
            Gets or sets the id of user's activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActivity.Name">
            <summary>
            Gets or sets the name of user's activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActivity.StreamUrl">
            <summary>
            Gets or sets the stream URL, if applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActivity.Platform">
            <summary>
            Gets or sets platform in this rich presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActivity.SyncId">
            <summary>
            Gets or sets sync id in this rich presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActivity.SessionId">
            <summary>
            Gets or sets session_id in this rich presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActivity.ActivityType">
            <summary>
            Gets or sets the activity type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActivity.RichPresence">
            <summary>
            Gets the rich presence details, if present.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordActivity.CustomStatus">
            <summary>
            Gets the custom status of this activity, if present.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordActivity.#ctor">
            <summary>
            Creates a new, empty instance of a <see cref="T:DisCatSharp.Entities.DiscordActivity"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordActivity.#ctor(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:DisCatSharp.Entities.DiscordActivity"/> with specified name.
            </summary>
            <param name="name">Name of the activity.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordActivity.#ctor(System.String,DisCatSharp.Entities.ActivityType)">
            <summary>
            Creates a new instance of a <see cref="T:DisCatSharp.Entities.DiscordActivity"/> with specified name.
            </summary>
            <param name="name">Name of the activity.</param>
            <param name="type">Type of the activity.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordActivity.#ctor(DisCatSharp.Net.Abstractions.TransportActivity)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordActivity"/> class.
            </summary>
            <param name="rawActivity">The raw activity.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordActivity.#ctor(DisCatSharp.Entities.DiscordActivity)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordActivity"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordActivity.UpdateWith(DisCatSharp.Net.Abstractions.TransportActivity)">
            <summary>
            Updates a activity with an transport activity.
            </summary>
            <param name="rawActivity">The raw activity.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordCustomStatus">
            <summary>
            Represents details for a custom status activity, attached to a <see cref="T:DisCatSharp.Entities.DiscordActivity"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordCustomStatus.Name">
            <summary>
            Gets the name of this custom status.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordCustomStatus.Emoji">
            <summary>
            Gets the emoji of this custom status, if any.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordCustomStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordCustomStatus"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordCustomStatus.#ctor(DisCatSharp.Entities.DiscordCustomStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordCustomStatus"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordCustomStatus.UpdateWith(System.String,DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Updates a discord status.
            </summary>
            <param name="state">The state.</param>
            <param name="emoji">The emoji.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordRichPresence">
            <summary>
            Represents details for Discord rich presence, attached to a <see cref="T:DisCatSharp.Entities.DiscordActivity"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.Details">
            <summary>
            Gets the details of this presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.State">
            <summary>
            Gets the game state.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.Application">
            <summary>
            Gets the application for which the rich presence is for.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.Instance">
            <summary>
            Gets the instance status.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.LargeImage">
            <summary>
            Gets the large image for the rich presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.LargeImageText">
            <summary>
            Gets the hover text for large image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.SmallImage">
            <summary>
            Gets the small image for the rich presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.SmallImageText">
            <summary>
            Gets the hover text for small image.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.CurrentPartySize">
            <summary>
            Gets the current party size.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.MaximumPartySize">
            <summary>
            Gets the maximum party size.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.PartyId">
            <summary>
            Gets the party ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.Buttons">
            <summary>
            Gets the buttons.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.StartTimestamp">
            <summary>
            Gets the game start timestamp.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.EndTimestamp">
            <summary>
            Gets the game end timestamp.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.JoinSecret">
            <summary>
            Gets the secret value enabling users to join your game.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.MatchSecret">
            <summary>
            Gets the secret value enabling users to receive notifications whenever your game state changes.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordRichPresence.SpectateSecret">
            <summary>
            Gets the secret value enabling users to spectate your game.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRichPresence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordRichPresence"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRichPresence.#ctor(DisCatSharp.Net.Abstractions.TransportActivity)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordRichPresence"/> class.
            </summary>
            <param name="rawGame">The raw game.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRichPresence.#ctor(DisCatSharp.Entities.DiscordRichPresence)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordRichPresence"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordRichPresence.UpdateWith(DisCatSharp.Net.Abstractions.TransportActivity)">
            <summary>
            Updates a game activity with an transport activity.
            </summary>
            <param name="rawGame">The raw game.</param>
        </member>
        <member name="T:DisCatSharp.Entities.ActivityType">
            <summary>
            Determines the type of a user activity.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ActivityType.Playing">
            <summary>
            Indicates the user is playing a game.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ActivityType.Streaming">
            <summary>
            Indicates the user is streaming a game.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ActivityType.ListeningTo">
            <summary>
            Indicates the user is listening to something.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ActivityType.Watching">
            <summary>
            Indicates the user is watching something.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ActivityType.Custom">
            <summary>
            Indicates the current activity is a custom status.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.ActivityType.Competing">
            <summary>
            Indicates the user is competing in something.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordConnection">
            <summary>
            Gets a Discord connection to a 3rd party service.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.Id">
            <summary>
            Gets the id of the connection account
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.Name">
            <summary>
            Gets the username of the connection account.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.Type">
            <summary>
            Gets the service of the connection (twitch, youtube, steam, twitter, facebook, spotify, leagueoflegends, reddit)
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.IsRevoked">
            <summary>
            Gets whether the connection is revoked.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.Integrations">
            <summary>
            Gets a collection of partial server integrations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.Verified">
            <summary>
            Gets whether the connection is verified.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.ShowActivity">
            <summary>
            Gets whether the connection will show a activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.FriendSync">
            <summary>
            Whether the connection will sync friends.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.Visibility">
            <summary>
            Gets the visibility of the connection.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordConnection.Discord">
            <summary>
            Gets the client instance this object is tied to.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordConnection"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordPresence">
            <summary>
            Represents a user presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.Discord">
            <summary>
            Gets the discord client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.InternalUser">
            <summary>
            Gets the internal user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.User">
            <summary>
            Gets the user that owns this presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.Activity">
            <summary>
            Gets the user's current activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.RawActivity">
            <summary>
            Gets the raw activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.Activities">
            <summary>
            Gets the user's current activities.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.RawActivities">
            <summary>
            Gets the raw activities.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.Status">
            <summary>
            Gets this user's status.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.GuildId">
            <summary>
            Gets the guild id for which this presence was set.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.Guild">
            <summary>
            Gets the guild for which this presence was set.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordPresence.ClientStatus">
            <summary>
            Gets this user's platform-dependent status.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordPresence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordPresence"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordPresence.#ctor(DisCatSharp.Entities.DiscordPresence)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordPresence"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordClientStatus">
            <summary>
            Represents a client status.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordClientStatus.Desktop">
            <summary>
            Gets the user's status set for an active desktop (Windows, Linux, Mac) application session.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordClientStatus.Mobile">
            <summary>
            Gets the user's status set for an active mobile (iOS, Android) application session.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordClientStatus.Web">
            <summary>
            Gets the user's status set for an active web (browser, bot account) application session.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordTeam">
            <summary>
            Represents a team consisting of users. A team can own an application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeam.Name">
            <summary>
            Gets the team's name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeam.IconHash">
            <summary>
            Gets the team's icon hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeam.Icon">
            <summary>
            Gets the team's icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeam.Owner">
            <summary>
            Gets the owner of the team.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeam.Members">
            <summary>
            Gets the members of this team.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeam.#ctor(DisCatSharp.Net.Abstractions.TransportTeam)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordTeam"/> class.
            </summary>
            <param name="tt">The tt.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeam.Equals(System.Object)">
            <summary>
            Compares this team to another object and returns whether they are equal.
            </summary>
            <param name="obj">Object to compare this team to.</param>
            <returns>Whether this team is equal to the given object.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeam.Equals(DisCatSharp.Entities.DiscordTeam)">
            <summary>
            Compares this team to another team and returns whether they are equal.
            </summary>
            <param name="other">Team to compare to.</param>
            <returns>Whether the teams are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeam.GetHashCode">
            <summary>
            Gets the hash code of this team.
            </summary>
            <returns>Hash code of this team.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeam.ToString">
            <summary>
            Converts this team to its string representation.
            </summary>
            <returns>The string representation of this team.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordTeamMember">
            <summary>
            Represents a member of <see cref="T:DisCatSharp.Entities.DiscordTeam"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeamMember.MembershipStatus">
            <summary>
            Gets the member's membership status.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeamMember.Permissions">
            <summary>
            Gets the member's permissions within the team.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeamMember.TeamId">
            <summary>
            Gets the id of the team this member belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeamMember.TeamName">
            <summary>
            Gets the name of the team this member belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordTeamMember.User">
            <summary>
            Gets the user who is the team member.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeamMember.#ctor(DisCatSharp.Net.Abstractions.TransportTeamMember)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordTeamMember"/> class.
            </summary>
            <param name="ttm">The ttm.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeamMember.Equals(System.Object)">
            <summary>
            Compares this team member to another object and returns whether they are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether this team is equal to given object.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeamMember.Equals(DisCatSharp.Entities.DiscordTeamMember)">
            <summary>
            Compares this team member to another team member and returns whether they are equal.
            </summary>
            <param name="other">Team member to compare to.</param>
            <returns>Whether this team member is equal to the given one.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeamMember.GetHashCode">
            <summary>
            Gets a hash code of this team member.
            </summary>
            <returns>Hash code of this team member.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordTeamMember.ToString">
            <summary>
            Converts this team member to their string representation.
            </summary>
            <returns>String representation of this team member.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordTeamMembershipStatus">
            <summary>
            Signifies the status of user's team membership.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordTeamMembershipStatus.Invited">
            <summary>
            Indicates that this user is invited to the team, and is pending membership.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordTeamMembershipStatus.Accepted">
            <summary>
            Indicates that this user is a member of the team.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordUser">
            <summary>
            Represents a Discord user.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordUser"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.#ctor(DisCatSharp.Net.Abstractions.TransportUser)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordUser"/> class.
            </summary>
            <param name="transport">The transport user.</param>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.Username">
            <summary>
            Gets this user's username.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.UsernameWithDiscriminator">
            <summary>
            Gets this user's username with the discriminator.
            Example: Discord#0000
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.Discriminator">
            <summary>
            Gets the user's 4-digit discriminator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.DiscriminatorInt">
            <summary>
            Gets the discriminator integer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.BannerColor">
            <summary>
            Gets the user's banner color, if set. Mutually exclusive with <see cref="P:DisCatSharp.Entities.DiscordUser.BannerHash"/>.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordUser.BannerColorInternal">
            <summary>
            Gets the user's banner color integer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.BannerUrl">
            <summary>
            Gets the user's banner url
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.BannerHash">
            <summary>
            Gets the user's profile banner hash. Mutually exclusive with <see cref="P:DisCatSharp.Entities.DiscordUser.BannerColor"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.Bio">
            <summary>
            Gets the users bio.
            This is not available to bots tho.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.AvatarHash">
            <summary>
            Gets the user's avatar hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.ProfileUri">
            <summary>
            Returns a uri to this users profile.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.ProfileUrl">
            <summary>
            Returns a string representing the direct URL to this users profile.
            </summary>
            <returns>The URL of this users profile.</returns>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.AvatarUrl">
            <summary>
            Gets the user's avatar URL.s
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.DefaultAvatarUrl">
            <summary>
            Gets the URL of default avatar for this user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.IsBot">
            <summary>
            Gets whether the user is a bot.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.MfaEnabled">
            <summary>
            Gets whether the user has multi-factor authentication enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.IsSystem">
            <summary>
            Gets whether the user is an official Discord system user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.Verified">
            <summary>
            Gets whether the user is verified.
            <para>This is only present in OAuth.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.Email">
            <summary>
            Gets the user's email address.
            <para>This is only present in OAuth.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.PremiumType">
            <summary>
            Gets the user's premium type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.Locale">
            <summary>
            Gets the user's chosen language
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.OAuthFlags">
            <summary>
            Gets the user's flags for OAuth.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.Flags">
            <summary>
            Gets the user's flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.Mention">
            <summary>
            Gets the user's mention string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.IsCurrent">
            <summary>
            Gets whether this user is the Client which created this object.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.IsMod">
            <summary>
            Whether this member is a <see cref="F:DisCatSharp.UserFlags.CertifiedModerator"/>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.IsPartner">
            <summary>
            Whether this member is a <see cref="F:DisCatSharp.UserFlags.Partner"/>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.IsVerifiedBot">
            <summary>
            Whether this member is a <see cref="F:DisCatSharp.UserFlags.VerifiedBot"/>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.IsBotDev">
            <summary>
            Whether this member is a <see cref="F:DisCatSharp.UserFlags.VerifiedDeveloper"/>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.IsStaff">
            <summary>
            Whether this member is a <see cref="F:DisCatSharp.UserFlags.Staff"/>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.GetFromApiAsync">
            <summary>
            Fetches the user from the API.
            </summary>
            <returns>The user with fresh data from the API.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.IsInGuild(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Whether this user is in a <see cref="T:DisCatSharp.Entities.DiscordGuild"/>
            </summary>
            <example>
            <code>
            DiscordGuild guild = await Client.GetGuildAsync(806675511555915806);
            DiscordUser user = await Client.GetUserAsync(469957180968271873);
            Console.WriteLine($"{user.Username} {(user.IsInGuild(guild) ? "is a" : "is not a")} member of {guild.Name}");
            </code>
            results to <c>J_M_Lutra is a member of Project Nyaw~</c>.
            </example>
            <param name="guild"><see cref="T:DisCatSharp.Entities.DiscordGuild"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.IsNotInGuild(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Whether this user is not in a <see cref="T:DisCatSharp.Entities.DiscordGuild"/>
            </summary>
            <param name="guild"><see cref="T:DisCatSharp.Entities.DiscordGuild"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.ConvertToMember(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Returns the DiscordMember in the specified <see cref="T:DisCatSharp.Entities.DiscordGuild"/>
            </summary>
            <param name="guild">The <see cref="T:DisCatSharp.Entities.DiscordGuild"/> to get this user on.</param>
            <returns>The <see cref="T:DisCatSharp.Entities.DiscordMember"/>.</returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the user is not part of the guild.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.UnbanAsync(DisCatSharp.Entities.DiscordGuild,System.String)">
            <summary>
            Unbans this user from a guild.
            </summary>
            <param name="guild">Guild to unban this user from.</param>
            <param name="reason">Reason for audit logs.</param>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.BanMembers"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the user does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordUser.Presence">
            <summary>
            Gets this user's presence.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.GetAvatarUrl(DisCatSharp.ImageFormat,System.UInt16)">
            <summary>
            Gets the user's avatar URL, in requested format and size.
            </summary>
            <param name="fmt">Format of the avatar to get.</param>
            <param name="size">Maximum size of the avatar. Must be a power of two, minimum 16, maximum 2048.</param>
            <returns>URL of the user's avatar.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.ToString">
            <summary>
            Returns a string representation of this user.
            </summary>
            <returns>String representation of this user.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordUser"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordUser"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.Equals(DisCatSharp.Entities.DiscordUser)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordUser"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordUser"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordUser"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordUser"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordUser"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordUser"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordUser"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.op_Equality(DisCatSharp.Entities.DiscordUser,DisCatSharp.Entities.DiscordUser)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordUser"/> objects are equal.
            </summary>
            <param name="e1">First user to compare.</param>
            <param name="e2">Second user to compare.</param>
            <returns>Whether the two users are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUser.op_Inequality(DisCatSharp.Entities.DiscordUser,DisCatSharp.Entities.DiscordUser)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordUser"/> objects are not equal.
            </summary>
            <param name="e1">First user to compare.</param>
            <param name="e2">Second user to compare.</param>
            <returns>Whether the two users are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordUserComparer">
            <summary>
            Represents a user comparer.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUserComparer.Equals(DisCatSharp.Entities.DiscordUser,DisCatSharp.Entities.DiscordUser)">
            <summary>
            Whether the users are equal.
            </summary>
            <param name="x">The first user</param>
            <param name="y">The second user.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordUserComparer.GetHashCode(DisCatSharp.Entities.DiscordUser)">
            <summary>
            Gets the hash code.
            </summary>
            <param name="obj">The user.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordVoiceRegion">
            <summary>
            Represents information about a Discord voice server region.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceRegion.Id">
            <summary>
            Gets the unique ID for the region.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceRegion.Name">
            <summary>
            Gets the name of the region.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceRegion.SampleHostname">
            <summary>
            Gets an example server hostname for this region.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceRegion.SamplePort">
            <summary>
            Gets an example server port for this region.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceRegion.IsOptimal">
            <summary>
            Gets whether this region is the most optimal for the current user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceRegion.IsDeprecated">
            <summary>
            Gets whether this voice region is deprecated.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceRegion.IsCustom">
            <summary>
            Gets whether this is a custom voice region.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceRegion.Equals(DisCatSharp.Entities.DiscordVoiceRegion)">
            <summary>
            Gets whether two <see cref="T:DisCatSharp.Entities.DiscordVoiceRegion"/>s are equal.
            </summary>
            <param name="region">The region to compare with.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceRegion.Equals(System.Object)">
            <summary>
            Whether two regions are equal.
            </summary>
            <param name="obj">A voice region.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceRegion.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceRegion.op_Equality(DisCatSharp.Entities.DiscordVoiceRegion,DisCatSharp.Entities.DiscordVoiceRegion)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordVoiceRegion"/> objects are equal.
            </summary>
            <param name="left">First voice region to compare.</param>
            <param name="right">Second voice region to compare.</param>
            <returns>Whether the two voice regions are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceRegion.op_Inequality(DisCatSharp.Entities.DiscordVoiceRegion,DisCatSharp.Entities.DiscordVoiceRegion)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordVoiceRegion"/> objects are not equal.
            </summary>
            <param name="left">First voice region to compare.</param>
            <param name="right">Second voice region to compare.</param>
            <returns>Whether the two voice regions are not equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordVoiceRegion"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordVoiceState">
            <summary>
            Represents a Discord voice state.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.Discord">
            <summary>
            Gets the discord client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.GuildId">
            <summary>
            Gets ID of the guild this voice state is associated with.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.Guild">
            <summary>
            Gets the guild associated with this voice state.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.ChannelId">
            <summary>
            Gets ID of the channel this user is connected to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.Channel">
            <summary>
            Gets the channel this user is connected to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.UserId">
            <summary>
            Gets ID of the user to which this voice state belongs.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.User">
            <summary>
            Gets the user associated with this voice state.
            <para>This can be cast to a <see cref="T:DisCatSharp.Entities.DiscordMember"/> if this voice state was in a guild.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.SessionId">
            <summary>
            Gets ID of the session of this voice state.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.IsServerDeafened">
            <summary>
            Gets whether this user is deafened.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.IsServerMuted">
            <summary>
            Gets whether this user is muted.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.IsSelfDeafened">
            <summary>
            Gets whether this user is locally deafened.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.IsSelfMuted">
            <summary>
            Gets whether this user is locally muted.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.IsSelfVideo">
            <summary>
            Gets whether this user's camera is enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.IsSelfStream">
            <summary>
            Gets whether this user is using the Go Live feature.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.IsSuppressed">
            <summary>
            Gets whether the current user has suppressed this user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.RequestToSpeakTimestamp">
            <summary>
            Gets the time at which this user requested to speak.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.Member">
            <summary>
            Gets the member this voice state belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordVoiceState.TransportMember">
            <summary>
            Gets the transport member.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordVoiceState"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceState.#ctor(DisCatSharp.Entities.DiscordVoiceState)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordVoiceState"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceState.#ctor(DisCatSharp.Entities.DiscordMember)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordVoiceState"/> class.
            </summary>
            <param name="m">The m.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordVoiceState.ToString">
            <summary>
            Gets a readable voice state string.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordWebhook">
            <summary>
            Represents information about a Discord webhook.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.ApiClient">
            <summary>
            Gets the api client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.GuildId">
            <summary>
            Gets the id of the guild this webhook belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.ChannelId">
            <summary>
            Gets the ID of the channel this webhook belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.User">
            <summary>
            Gets the user this webhook was created by.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.Name">
            <summary>
            Gets the default name of this webhook.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.AvatarHash">
            <summary>
            Gets hash of the default avatar for this webhook.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.SourceGuild">
            <summary>
            Gets the partial source guild for this webhook (For Channel Follower Webhooks).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.SourceChannel">
            <summary>
            Gets the partial source channel for this webhook (For Channel Follower Webhooks).
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.Url">
            <summary>
            Gets the url used for executing the webhook.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.AvatarUrl">
            <summary>
            Gets the default avatar url for this webhook.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhook.Token">
            <summary>
            Gets the secure token of this webhook.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Entities.DiscordWebhook"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.ModifyAsync(System.String,DisCatSharp.Entities.Optional{System.IO.Stream},System.Nullable{System.UInt64},System.String)">
            <summary>
            Modifies this webhook.
            </summary>
            <param name="name">New default name for this webhook.</param>
            <param name="avatar">New avatar for this webhook.</param>
            <param name="channelId">The new channel id to move the webhook to.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns>The modified webhook.</returns>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.GetMessageAsync(System.UInt64)">
            <summary>
            Gets a previously-sent webhook message.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.GetMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a previously-sent webhook message.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.DeleteAsync">
            <summary>
            Permanently deletes this webhook.
            </summary>
            <exception cref="T:DisCatSharp.Exceptions.UnauthorizedException">Thrown when the client does not have the <see cref="F:DisCatSharp.Permissions.ManageWebhooks"/> permission.</exception>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.ExecuteAsync(DisCatSharp.Entities.DiscordWebhookBuilder,System.String)">
            <summary>
            Executes this webhook with the given <see cref="T:DisCatSharp.Entities.DiscordWebhookBuilder"/>.
            </summary>
            <param name="builder">Webhook builder filled with data to send.</param>
            <param name="threadId">Target thread id (Optional). Defaults to null.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.ExecuteSlackAsync(System.String,System.String)">
            <summary>
            Executes this webhook in Slack compatibility mode.
            </summary>
            <param name="json">JSON containing Slack-compatible payload for this webhook.</param>
            <param name="threadId">Target thread id (Optional). Defaults to null.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.ExecuteGithubAsync(System.String,System.String)">
            <summary>
            Executes this webhook in GitHub compatibility mode.
            </summary>
            <param name="json">JSON containing GitHub-compatible payload for this webhook.</param>
            <param name="threadId">Target thread id (Optional). Defaults to null.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.EditMessageAsync(System.UInt64,DisCatSharp.Entities.DiscordWebhookBuilder,System.String)">
            <summary>
            Edits a previously-sent webhook message.
            </summary>
            <param name="messageId">The id of the message to edit.</param>
            <param name="builder">The builder of the message to edit.</param>
            <param name="threadId">Target thread id (Optional). Defaults to null.</param>
            <returns>The modified <see cref="T:DisCatSharp.Entities.DiscordMessage"/></returns>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.DeleteMessageAsync(System.UInt64)">
            <summary>
            Deletes a message that was created by the webhook.
            </summary>
            <param name="messageId">The id of the message to delete</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.DeleteMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Deletes a message that was created by the webhook.
            </summary>
            <param name="messageId">The id of the message to delete</param>
            <param name="threadId">Target thread id (Optional). Defaults to null.</param>
            <exception cref="T:DisCatSharp.Exceptions.NotFoundException">Thrown when the webhook does not exist.</exception>
            <exception cref="T:DisCatSharp.Exceptions.BadRequestException">Thrown when an invalid parameter was provided.</exception>
            <exception cref="T:DisCatSharp.Exceptions.ServerErrorException">Thrown when Discord is unable to process the request.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordWebhook"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Entities.DiscordWebhook"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.Equals(DisCatSharp.Entities.DiscordWebhook)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Entities.DiscordWebhook"/> is equal to another <see cref="T:DisCatSharp.Entities.DiscordWebhook"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Entities.DiscordWebhook"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Entities.DiscordWebhook"/> is equal to this <see cref="T:DisCatSharp.Entities.DiscordWebhook"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Entities.DiscordWebhook"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Entities.DiscordWebhook"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.op_Equality(DisCatSharp.Entities.DiscordWebhook,DisCatSharp.Entities.DiscordWebhook)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordWebhook"/> objects are equal.
            </summary>
            <param name="e1">First webhook to compare.</param>
            <param name="e2">Second webhook to compare.</param>
            <returns>Whether the two webhooks are equal.</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhook.op_Inequality(DisCatSharp.Entities.DiscordWebhook,DisCatSharp.Entities.DiscordWebhook)">
            <summary>
            Gets whether the two <see cref="T:DisCatSharp.Entities.DiscordWebhook"/> objects are not equal.
            </summary>
            <param name="e1">First webhook to compare.</param>
            <param name="e2">Second webhook to compare.</param>
            <returns>Whether the two webhooks are not equal.</returns>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordWebhookBuilder">
            <summary>
            Constructs ready-to-send webhook requests.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhookBuilder.Username">
            <summary>
            Username to use for this webhook request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhookBuilder.AvatarUrl">
            <summary>
            Avatar url to use for this webhook request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhookBuilder.IsTts">
            <summary>
            Whether this webhook request is text-to-speech.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhookBuilder.Content">
            <summary>
            Message to send on this webhook request.
            </summary>
        </member>
        <member name="F:DisCatSharp.Entities.DiscordWebhookBuilder.KeepAttachmentsInternal">
            <summary>
            Whether to keep previous attachments.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhookBuilder.Embeds">
            <summary>
            Embeds to send on this webhook request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhookBuilder.Files">
            <summary>
            Files to send on this webhook request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhookBuilder.Mentions">
            <summary>
            Mentions to send on this webhook request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhookBuilder.Components">
            <summary>
            Gets the components.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWebhookBuilder.Attachments">
            <summary>
            Attachments to keep on this webhook request.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.#ctor">
            <summary>
            Constructs a new empty webhook request builder.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddComponents(DisCatSharp.Entities.DiscordComponent[])">
            <summary>
            Adds a row of components to the builder, up to 5 components per row, and up to 5 rows per message.
            </summary>
            <param name="components">The components to add to the builder.</param>
            <returns>The current builder to be chained.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">No components were passed.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordActionRowComponent})">
            <summary>
            Appends several rows of components to the builder
            </summary>
            <param name="components">The rows of components to add, holding up to five each.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddComponents(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordComponent})">
            <summary>
            Adds a row of components to the builder, up to 5 components per row, and up to 5 rows per message.
            </summary>
            <param name="components">The components to add to the builder.</param>
            <returns>The current builder to be chained.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">No components were passed.</exception>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.WithUsername(System.String)">
            <summary>
            Sets the username for this webhook builder.
            </summary>
            <param name="username">Username of the webhook</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.WithAvatarUrl(System.String)">
            <summary>
            Sets the avatar of this webhook builder from its url.
            </summary>
            <param name="avatarUrl">Avatar url of the webhook</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.WithTts(System.Boolean)">
            <summary>
            Indicates if the webhook must use text-to-speech.
            </summary>
            <param name="tts">Text-to-speech</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.WithContent(System.String)">
            <summary>
            Sets the message to send at the execution of the webhook.
            </summary>
            <param name="content">Message to send.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddEmbed(DisCatSharp.Entities.DiscordEmbed)">
            <summary>
            Adds an embed to send at the execution of the webhook.
            </summary>
            <param name="embed">Embed to add.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddEmbeds(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmbed})">
            <summary>
            Adds the given embeds to send at the execution of the webhook.
            </summary>
            <param name="embeds">Embeds to add.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddFile(System.String,System.IO.Stream,System.Boolean,System.String)">
            <summary>
            Adds a file to send at the execution of the webhook.
            </summary>
            <param name="filename">Name of the file.</param>
            <param name="data">File data.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <param name="description">Description of the file.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddFile(System.IO.FileStream,System.Boolean,System.String)">
            <summary>
            Sets if the message has files to be sent.
            </summary>
            <param name="stream">The Stream to the file.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
            <param name="description">Description of the file.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddFiles(System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.Boolean)">
            <summary>
            Adds the given files to send at the execution of the webhook.
            </summary>
            <param name="files">Dictionary of file name and file data.</param>
            <param name="resetStreamPosition">Tells the API Client to reset the stream position to what it was after the file is sent.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.ModifyAttachments(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordAttachment})">
            <summary>
            Modifies the given attachments on edit.
            </summary>
            <param name="attachments">Attachments to edit.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.KeepAttachments(System.Boolean)">
            <summary>
            Whether to keep the message attachments, if new ones are added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddMention(DisCatSharp.Entities.IMention)">
            <summary>
            Adds the mention to the mentions to parse, etc. at the execution of the webhook.
            </summary>
            <param name="mention">Mention to add.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.AddMentions(System.Collections.Generic.IEnumerable{DisCatSharp.Entities.IMention})">
            <summary>
            Adds the mentions to the mentions to parse, etc. at the execution of the webhook.
            </summary>
            <param name="mentions">Mentions to add.</param>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.SendAsync(DisCatSharp.Entities.DiscordWebhook)">
            <summary>
            Executes a webhook.
            </summary>
            <param name="webhook">The webhook that should be executed.</param>
            <returns>The message sent</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.SendAsync(DisCatSharp.Entities.DiscordWebhook,System.UInt64)">
            <summary>
            Executes a webhook.
            </summary>
            <param name="webhook">The webhook that should be executed.</param>
            <param name="threadId">Target thread id.</param>
            <returns>The message sent</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.ModifyAsync(DisCatSharp.Entities.DiscordWebhook,DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Sends the modified webhook message.
            </summary>
            <param name="webhook">The webhook that should be executed.</param>
            <param name="message">The message to modify.</param>
            <returns>The modified message</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.ModifyAsync(DisCatSharp.Entities.DiscordWebhook,System.UInt64)">
            <summary>
            Sends the modified webhook message.
            </summary>
            <param name="webhook">The webhook that should be executed.</param>
            <param name="messageId">The id of the message to modify.</param>
            <returns>The modified message</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.ModifyAsync(DisCatSharp.Entities.DiscordWebhook,DisCatSharp.Entities.DiscordMessage,DisCatSharp.Entities.DiscordThreadChannel)">
            <summary>
            Sends the modified webhook message.
            </summary>
            <param name="webhook">The webhook that should be executed.</param>
            <param name="message">The message to modify.</param>
            <param name="thread">Target thread.</param>
            <returns>The modified message</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.ModifyAsync(DisCatSharp.Entities.DiscordWebhook,System.UInt64,System.UInt64)">
            <summary>
            Sends the modified webhook message.
            </summary>
            <param name="webhook">The webhook that should be executed.</param>
            <param name="messageId">The id of the message to modify.</param>
            <param name="threadId">Target thread id.</param>
            <returns>The modified message</returns>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.ClearComponents">
            <summary>
            Clears all message components on this builder.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.Clear">
            <summary>
            Allows for clearing the Webhook Builder so that it can be used again to send a new message.
            </summary>
        </member>
        <member name="M:DisCatSharp.Entities.DiscordWebhookBuilder.Validate(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Does the validation before we send a the Create/Modify request.
            </summary>
            <param name="isModify">Tells the method to perform the Modify Validation or Create Validation.</param>
            <param name="isFollowup">Tells the method to perform the follow up message validation.</param>
            <param name="isInteractionResponse">Tells the method to perform the interaction response validation.</param>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordWidget">
            <summary>
            Represents a Discord guild's widget.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidget.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidget.Name">
            <summary>
            Gets the guild's name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidget.InstantInviteUrl">
            <summary>
            Gets the guild's invite URL.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidget.PresenceCount">
            <summary>
            Gets the number of online members.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidget.Members">
            <summary>
            Gets a list of online members.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidget.Channels">
            <summary>
            Gets a list of widget channels.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordWidgetMember">
            <summary>
            Represents a member within a Discord guild's widget.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetMember.Id">
            <summary>
            Gets the member's identifier within the widget.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetMember.Username">
            <summary>
            Gets the member's username.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetMember.Discriminator">
            <summary>
            Gets the member's discriminator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetMember.Avatar">
            <summary>
            Gets the member's avatar.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetMember.Status">
            <summary>
            Gets the member's online status.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetMember.AvatarUrl">
            <summary>
            Gets the member's avatar url.
            </summary>
        </member>
        <member name="T:DisCatSharp.Entities.DiscordWidgetSettings">
            <summary>
            Represents a Discord guild's widget settings.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetSettings.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetSettings.ChannelId">
            <summary>
            Gets the guild's widget channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetSettings.Channel">
            <summary>
            Gets the guild's widget channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Entities.DiscordWidgetSettings.IsEnabled">
            <summary>
            Whether if the guild's widget is enabled.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.DiscordUri">
            <summary>
            An URI in a Discord embed doesn't necessarily conform to the RFC 3986. If it uses the <c>attachment://</c>
            protocol, it mustn't contain a trailing slash to be interpreted correctly as an embed attachment reference by
            Discord.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.DiscordUri.Type">
            <summary>
            The type of this URI.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordUri.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.DiscordUri"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordUri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.DiscordUri"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordUri.IsStandard(System.String)">
            <summary>
            Whether the uri is a standard uri
            </summary>
            <param name="value">Uri string</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordUri.ToString">
            <summary>
            Returns a string representation of this DiscordUri.
            </summary>
            <returns>This DiscordUri, as a string.</returns>
        </member>
        <member name="M:DisCatSharp.Net.DiscordUri.ToUri">
            <summary>
            Converts this DiscordUri into a canonical representation of a <see cref="T:System.Uri"/> if it can be represented as
            such, throwing an exception otherwise.
            </summary>
            <returns>A canonical representation of this DiscordUri.</returns>
            <exception cref="T:System.UriFormatException">If <see cref="T:System.Type"/> is not <see cref="F:DisCatSharp.Net.DiscordUriType.Standard"/>, as
            that would mean creating an invalid Uri, which would result in loss of data.</exception>
        </member>
        <member name="T:DisCatSharp.Net.DiscordUri.DiscordUriJsonConverter">
            <summary>
            Represents a uri json converter.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordUri.DiscordUriJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordUri.DiscordUriJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordUri.DiscordUriJsonConverter.CanConvert(System.Type)">
            <summary>
            Whether it can be converted.
            </summary>
            <param name="objectType">The object type.</param>
            <returns>A bool.</returns>
        </member>
        <member name="T:DisCatSharp.Net.DiscordUriType">
            <summary>
            Represents a uri type.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.DiscordUriType.Standard">
            <summary>
            Represents a URI that conforms to RFC 3986, meaning it's stored internally as a <see cref="T:System.Uri"/> and will
            contain a trailing slash after the domain name.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.DiscordUriType.NonStandard">
            <summary>
            Represents a URI that does not conform to RFC 3986, meaning it's stored internally as a plain string and
            should be treated as one.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogUser">
            <summary>
            Represents a audit log user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogUser.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogUser.Discriminator">
            <summary>
            Gets or sets the discriminator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogUser.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogUser.AvatarHash">
            <summary>
            Gets or sets the avatar hash.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogWebhook">
            <summary>
            Represents a audit log webhook.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogWebhook.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogWebhook.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogWebhook.Token">
            <summary>
            Gets or sets the token.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogWebhook.AvatarHash">
            <summary>
            Gets or sets the avatar hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogWebhook.GuildId">
            <summary>
            Gets or sets the guild id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogWebhook.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogThreadMetadata">
            <summary>
            Represents a audit log thread metadata.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThreadMetadata.Archived">
            <summary>
            Gets whether the thread is archived.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThreadMetadata.ArchiveTimestamp">
            <summary>
            Gets the threads archive timestamp.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThreadMetadata.AutoArchiveDuration">
            <summary>
            Gets the threads auto archive duration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThreadMetadata.Locked">
            <summary>
            Gets whether the thread is locked.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogThread">
            <summary>
            Represents a audit log thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.Id">
            <summary>
            Gets the thread id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.GuildId">
            <summary>
            Gets the thread guild id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.ParentId">
            <summary>
            Gets the thread parent channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.OwnerId">
            <summary>
            Gets the thread owner id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.Type">
            <summary>
            Gets the thread type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.Name">
            <summary>
            Gets the thread name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.LastMessageId">
            <summary>
            Gets the thread last message id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.Metadata">
            <summary>
            Gets the thread metadata.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.MessageCount">
            <summary>
            Gets the thread approximate message count.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.MemberCount">
            <summary>
            Gets the thread member count.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogThread.RateLimitPerUser">
            <summary>
            Gets the thread rate limit per user.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent">
            <summary>
            Represents a audit log scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.Id">
            <summary>
            Gets the scheduled event id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.GuildId">
            <summary>
            Gets the scheduled event guild id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.ChannelId">
            <summary>
            Gets the scheduled event channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.CreatorId">
            <summary>
            Gets the scheduled event creator id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.Name">
            <summary>
            Gets the scheduled event name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.Description">
            <summary>
            Gets the scheduled event description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.Image">
            <summary>
            Gets the scheduled event image.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.ScheduledStartTime">
            <summary>
            Gets the scheduled event scheduled start time.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.ScheduledEndTime">
            <summary>
            Gets the scheduled event scheduled end time.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.PrivacyLevel">
            <summary>
            Gets the scheduled event privacy level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.Status">
            <summary>
            Gets the scheduled event status.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.EntityType">
            <summary>
            Gets the scheduled event entity type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.EntityId">
            <summary>
            Gets the scheduled event entity id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.EntityMetadata">
            <summary>
            Gets the scheduled event entity metadata.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEvent.SkuIds">
            <summary>
            Gets the scheduled event sku ids.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEventEntityMetadata">
            <summary>
            Represents a audit log scheduled event entity metadata.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogGuildScheduledEventEntityMetadata.Location">
            <summary>
            Gets the scheduled events external location.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogIntegrationAccount">
            <summary>
            Represents a audit log integration account.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogIntegrationAccount.Id">
            <summary>
            Gets the account id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogIntegrationAccount.Name">
            <summary>
            Gets the account name.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogIntegration">
            <summary>
            Represents a audit log integration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogIntegration.Id">
            <summary>
            Gets the integration id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogIntegration.Type">
            <summary>
            Gets the integration type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogIntegration.Name">
            <summary>
            Gets the integration name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogIntegration.Account">
            <summary>
            Gets the integration account.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogActionChange">
            <summary>
            Represents a audit log action change.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionChange.OldValue">
            <summary>
            Gets or sets the old value.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionChange.OldValues">
            <summary>
            Gets the old values.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionChange.OldValueUlong">
            <summary>
            Gets the old value ulong.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionChange.OldValueString">
            <summary>
            Gets the old value string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionChange.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionChange.NewValues">
            <summary>
            Gets the new values.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionChange.NewValueUlong">
            <summary>
            Gets the new value ulong.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionChange.NewValueString">
            <summary>
            Gets the new value string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionChange.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogActionOptions">
            <summary>
            Represents a audit log action options.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionOptions.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionOptions.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionOptions.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionOptions.MessageId">
            <summary>
            Gets or sets the message id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionOptions.Count">
            <summary>
            Gets or sets the count.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionOptions.DeleteMemberDays">
            <summary>
            Gets or sets the delete member days.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogActionOptions.MembersRemoved">
            <summary>
            Gets or sets the members removed.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLogAction">
            <summary>
            Represents a audit log action.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogAction.TargetId">
            <summary>
            Gets or sets the target id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogAction.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogAction.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogAction.ActionType">
            <summary>
            Gets or sets the action type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogAction.Changes">
            <summary>
            Gets or sets the changes.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogAction.Options">
            <summary>
            Gets or sets the options.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLogAction.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AuditLog">
            <summary>
            Represents a audit log.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLog.Webhooks">
            <summary>
            Gets or sets the webhooks.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLog.Users">
            <summary>
            Gets or sets the users.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLog.Entries">
            <summary>
            Gets or sets the entries.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLog.ScheduledEvents">
            <summary>
            Gets or sets the scheduled events.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLog.Threads">
            <summary>
            Gets or sets the threads.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AuditLog.Integrations">
            <summary>
            Gets or sets the integrations.
            Twitch related.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.ClientProperties">
            <summary>
            Represents data for identify payload's client properties.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ClientProperties.Discord">
            <summary>
            Gets or sets the discord client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ClientProperties.OperatingSystem">
            <summary>
            Gets the client's operating system.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ClientProperties.Browser">
            <summary>
            Gets the client's browser.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ClientProperties.Device">
            <summary>
            Gets the client's device.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ClientProperties.Referrer">
            <summary>
            Gets the client's referrer.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ClientProperties.ReferringDomain">
            <summary>
            Gets the client's referring domain.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.FollowedChannelAddPayload">
            <summary>
            Represents a followed channel add payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.FollowedChannelAddPayload.WebhookChannelId">
            <summary>
            Gets or sets the webhook channel id.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.GatewayHello">
            <summary>
            Represents data for a websocket hello payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayHello.HeartbeatInterval">
            <summary>
            Gets the target heartbeat interval (in milliseconds) requested by Discord.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayHello.Trace">
            <summary>
            Gets debug data sent by Discord. This contains a list of servers to which the client is connected.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.GatewayIdentify">
            <summary>
            Represents data for websocket identify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayIdentify.Discord">
            <summary>
            Gets or sets the discord client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayIdentify.Token">
            <summary>
            Gets or sets the token used to identify the client to Discord.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayIdentify.ClientProperties">
            <summary>
            Gets or sets the client's properties.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayIdentify.Compress">
            <summary>
            Gets or sets whether to encrypt websocket traffic.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayIdentify.LargeThreshold">
            <summary>
            Gets or sets the member count at which the guild is to be considered large.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayIdentify.ShardInfo">
            <summary>
            Gets or sets the shard info for this connection.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayIdentify.Presence">
            <summary>
            Gets or sets the presence for this connection.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayIdentify.Intents">
            <summary>
            Gets or sets the intent flags for this connection.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.GatewayResume">
            <summary>
            Represents data for websocket identify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayResume.Token">
            <summary>
            Gets or sets the token used to identify the client to Discord.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayResume.SessionId">
            <summary>
            Gets or sets the session id used to resume last session.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayResume.SequenceNumber">
            <summary>
            Gets or sets the last received sequence number.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.GatewayOpCode">
            <summary>
            Specifies an OP code in a gateway payload.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.Dispatch">
            <summary>
            Used for dispatching events.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.Heartbeat">
            <summary>
            Used for pinging the gateway or client, to ensure the connection is still alive.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.Identify">
            <summary>
            Used for initial handshake with the gateway.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.StatusUpdate">
            <summary>
            Used to update client status.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.VoiceStateUpdate">
            <summary>
            Used to update voice state, when joining, leaving, or moving between voice channels.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.VoiceServerPing">
            <summary>
            Used for pinging the voice gateway or client, to ensure the connection is still alive.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.Resume">
            <summary>
            Used to resume a closed connection.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.Reconnect">
            <summary>
            Used to notify the client that it has to reconnect.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.RequestGuildMembers">
            <summary>
            Used to request guild members.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.InvalidSession">
            <summary>
            Used to notify the client about an invalidated session.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.Hello">
            <summary>
            Used by the gateway upon connecting.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.HeartbeatAck">
            <summary>
            Used to acknowledge a heartbeat.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Abstractions.GatewayOpCode.GuildSync">
            <summary>
            Used to request guild synchronization.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.GatewayPayload">
            <summary>
            Represents a websocket payload exchanged between Discord and the client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayPayload.OpCode">
            <summary>
            Gets or sets the OP code of the payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayPayload.Data">
            <summary>
            Gets or sets the data of the payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayPayload.Sequence">
            <summary>
            Gets or sets the sequence number of the payload. Only present for OP 0.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayPayload.EventName">
            <summary>
            Gets or sets the event name of the payload. Only present for OP 0.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.GatewayRequestGuildMembers">
            <summary>
            Request guild members.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayRequestGuildMembers.GuildId">
            <summary>
            Gets the guild id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayRequestGuildMembers.Query">
            <summary>
            Gets the query.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayRequestGuildMembers.Limit">
            <summary>
            Gets the limit.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayRequestGuildMembers.Presences">
            <summary>
            Gets whether presences should be returned.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayRequestGuildMembers.UserIds">
            <summary>
            Gets the user ids.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.GatewayRequestGuildMembers.Nonce">
            <summary>
            Gets the nonce.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.GatewayRequestGuildMembers.#ctor(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Abstractions.GatewayRequestGuildMembers"/> class.
            </summary>
            <param name="guild">The guild.</param>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.IOAuth2Payload">
            <summary>
            Represents a OAuth2 payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.IOAuth2Payload.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.ReadyPayload">
            <summary>
            Represents data for websocket ready event payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ReadyPayload.GatewayVersion">
            <summary>
            Gets the gateway version the client is connected to.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ReadyPayload.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ReadyPayload.Guilds">
            <summary>
            Gets the guilds available for this shard.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ReadyPayload.SessionId">
            <summary>
            Gets the current session's ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ReadyPayload.Trace">
            <summary>
            Gets debug data sent by Discord. This contains a list of servers to which the client is connected.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload">
            <summary>
            Represents a application command create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload.NameLocalizations">
            <summary>
            Gets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload.DescriptionLocalizations">
            <summary>
            Gets the description localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload.Options">
            <summary>
            Gets the options.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload.DefaultPermission">
            <summary>
            Whether the command is allowed for everyone.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload.DefaultMemberPermission">
            <summary>
            The command needed permissions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandCreatePayload.DmPermission">
            <summary>
            Whether the command is allowed for dms.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestApplicationCommandEditPayload">
            <summary>
            Represents a application command edit payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandEditPayload.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandEditPayload.NameLocalizations">
            <summary>
            Gets the name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandEditPayload.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandEditPayload.DescriptionLocalizations">
            <summary>
            Gets the description localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandEditPayload.Options">
            <summary>
            Gets the options.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandEditPayload.DefaultPermission">
            <summary>
            Gets the default permission.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandEditPayload.DefaultMemberPermission">
            <summary>
            The command needed permissions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestApplicationCommandEditPayload.DmPermission">
            <summary>
            Whether the command is allowed for dms.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestInteractionResponsePayload">
            <summary>
            Represents a interaction response payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestInteractionResponsePayload.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestInteractionResponsePayload.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestInteractionResponsePayload.Attachments">
            <summary>
            Gets the attachments.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestInteractionModalResponsePayload">
            <summary>
            Represents a interaction response payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestInteractionModalResponsePayload.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestInteractionModalResponsePayload.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestFollowupMessageCreatePayload">
            <summary>
            Represents a followup message create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestFollowupMessageCreatePayload.Content">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestFollowupMessageCreatePayload.IsTts">
            <summary>
            Get whether the message is tts.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestFollowupMessageCreatePayload.Embeds">
            <summary>
            Gets the embeds.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestFollowupMessageCreatePayload.Mentions">
            <summary>
            Gets the mentions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestFollowupMessageCreatePayload.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestFollowupMessageCreatePayload.Components">
            <summary>
            Gets the components.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestFollowupMessageCreatePayload.Attachments">
            <summary>
            Gets attachments.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestChannelCreatePayload">
            <summary>
            Represents a channel create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.Topic">
            <summary>
            Gets or sets the topic.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.Bitrate">
            <summary>
            Gets or sets the bitrate.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.UserLimit">
            <summary>
            Gets or sets the user limit.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.PermissionOverwrites">
            <summary>
            Gets or sets the permission overwrites.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.Nsfw">
            <summary>
            Gets or sets a value indicating whether nsfw.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.PerUserRateLimit">
            <summary>
            Gets or sets the per user rate limit.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.QualityMode">
            <summary>
            Gets or sets the quality mode.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelCreatePayload.DefaultAutoArchiveDuration">
            <summary>
            Gets or sets the default auto archive duration.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestChannelModifyPayload">
            <summary>
            Represents a channel modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.Topic">
            <summary>
            Gets or sets the topic.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.Nsfw">
            <summary>
            Gets or sets a value indicating whether nsfw.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.Bitrate">
            <summary>
            Gets or sets the bitrate.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.UserLimit">
            <summary>
            Gets or sets the user limit.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.PerUserRateLimit">
            <summary>
            Gets or sets the per user rate limit.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.RtcRegion">
            <summary>
            Gets or sets the rtc region.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.QualityMode">
            <summary>
            Gets or sets the quality mode.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.DefaultAutoArchiveDuration">
            <summary>
            Gets or sets the default auto archive duration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.PermissionOverwrites">
            <summary>
            Gets or sets the permission overwrites.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelModifyPayload.BannerBase64">
            <summary>
            Gets or sets the banner base64.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload">
            <summary>
            Represents a channel message edit payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.HasContent">
            <summary>
            Gets or sets a value indicating whether has content.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.Embeds">
            <summary>
            Gets or sets the embeds.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.Mentions">
            <summary>
            Gets or sets the mentions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.Attachments">
            <summary>
            Gets or sets the attachments.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.Components">
            <summary>
            Gets or sets the components.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.HasEmbed">
            <summary>
            Gets or sets a value indicating whether has embed.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.ShouldSerializeContent">
            <summary>
            Should serialize the content.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.RestChannelMessageEditPayload.ShouldSerializeEmbed">
            <summary>
            Should serialize the embed.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestChannelMessageCreatePayload">
            <summary>
            Represents a channel message create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageCreatePayload.IsTts">
            <summary>
            Gets or sets a value indicating whether t t is s.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageCreatePayload.StickersIds">
            <summary>
            Gets or sets the stickers ids.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageCreatePayload.MessageReference">
            <summary>
            Gets or sets the message reference.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestChannelMessageCreateMultipartPayload">
            <summary>
            Represents a channel message create multipart payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageCreateMultipartPayload.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageCreateMultipartPayload.IsTts">
            <summary>
            Gets or sets a value indicating whether t t is s.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageCreateMultipartPayload.Embeds">
            <summary>
            Gets or sets the embeds.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageCreateMultipartPayload.Mentions">
            <summary>
            Gets or sets the mentions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageCreateMultipartPayload.MessageReference">
            <summary>
            Gets or sets the message reference.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestChannelMessageBulkDeletePayload">
            <summary>
            Represents a channel message bulk delete payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelMessageBulkDeletePayload.Messages">
            <summary>
            Gets or sets the messages.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestChannelInviteCreatePayload">
            <summary>
            Represents a channel invite create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelInviteCreatePayload.MaxAge">
            <summary>
            Gets or sets the max age.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelInviteCreatePayload.MaxUses">
            <summary>
            Gets or sets the max uses.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelInviteCreatePayload.TargetType">
            <summary>
            Gets or sets the target type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelInviteCreatePayload.TargetApplication">
            <summary>
            Gets or sets the target application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelInviteCreatePayload.TargetUserId">
            <summary>
            Gets or sets the target user id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelInviteCreatePayload.Temporary">
            <summary>
            Gets or sets a value indicating whether temporary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelInviteCreatePayload.Unique">
            <summary>
            Gets or sets a value indicating whether unique.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestChannelPermissionEditPayload">
            <summary>
            Represents a channel permission edit payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelPermissionEditPayload.Allow">
            <summary>
            Gets or sets the allow.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelPermissionEditPayload.Deny">
            <summary>
            Gets or sets the deny.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelPermissionEditPayload.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestChannelGroupDmRecipientAddPayload">
            <summary>
            Represents a channel group dm recipient add payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelGroupDmRecipientAddPayload.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestChannelGroupDmRecipientAddPayload.Nickname">
            <summary>
            Gets or sets the nickname.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.AcknowledgePayload">
            <summary>
            The acknowledge payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.AcknowledgePayload.Token">
            <summary>
            Gets or sets the token.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestThreadChannelCreatePayload">
            <summary>
            Represents a thread channel create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelCreatePayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelCreatePayload.AutoArchiveDuration">
            <summary>
            Gets or sets the auto archive duration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelCreatePayload.PerUserRateLimit">
            <summary>
            Gets or sets the rate limit per user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelCreatePayload.Type">
            <summary>
            Gets or sets the thread type.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestThreadChannelModifyPayload">
            <summary>
            Represents a thread channel modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelModifyPayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelModifyPayload.Archived">
            <summary>
            Gets or sets the archived.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelModifyPayload.AutoArchiveDuration">
            <summary>
            Gets or sets the auto archive duration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelModifyPayload.Locked">
            <summary>
            Gets or sets the locked.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelModifyPayload.PerUserRateLimit">
            <summary>
            Gets or sets the per user rate limit.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestThreadChannelModifyPayload.Invitable">
            <summary>
            Gets or sets the thread's invitable state.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.IReasonAction">
            <summary>
            The reason action.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.IReasonAction.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildCreatePayload">
            <summary>
            Represents a guild create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreatePayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreatePayload.RegionId">
            <summary>
            Gets or sets the region id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreatePayload.IconBase64">
            <summary>
            Gets or sets the icon base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreatePayload.VerificationLevel">
            <summary>
            Gets or sets the verification level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreatePayload.DefaultMessageNotifications">
            <summary>
            Gets or sets the default message notifications.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreatePayload.SystemChannelFlags">
            <summary>
            Gets or sets the system channel flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreatePayload.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreatePayload.Channels">
            <summary>
            Gets or sets the channels.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildCreateFromTemplatePayload">
            <summary>
            Represents a guild create from template payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreateFromTemplatePayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCreateFromTemplatePayload.IconBase64">
            <summary>
            Gets or sets the icon base64.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildModifyPayload">
            <summary>
            Represents a guild modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.IconBase64">
            <summary>
            Gets or sets the icon base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.VerificationLevel">
            <summary>
            Gets or sets the verification level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.DefaultMessageNotifications">
            <summary>
            Gets or sets the default message notifications.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.OwnerId">
            <summary>
            Gets or sets the owner id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.SplashBase64">
            <summary>
            Gets or sets the splash base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.BannerBase64">
            <summary>
            Gets or sets the banner base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.DiscoverySplashBase64">
            <summary>
            Gets or sets the discovery splash base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.AfkChannelId">
            <summary>
            Gets or sets the afk channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.AfkTimeout">
            <summary>
            Gets or sets the afk timeout.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.MfaLevel">
            <summary>
            Gets or sets the mfa level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.ExplicitContentFilter">
            <summary>
            Gets or sets the explicit content filter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.SystemChannelId">
            <summary>
            Gets or sets the system channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.SystemChannelFlags">
            <summary>
            Gets or sets the system channel flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.RulesChannelId">
            <summary>
            Gets or sets the rules channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.PublicUpdatesChannelId">
            <summary>
            Gets or sets the public updates channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.PreferredLocale">
            <summary>
            Gets or sets the preferred locale.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildModifyPayload.PremiumProgressBarEnabled">
            <summary>
            Gets or sets whether the premium progress bar should be enabled.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildCommunityModifyPayload">
            <summary>
            Represents a guild community modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCommunityModifyPayload.VerificationLevel">
            <summary>
            Gets or sets the verification level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCommunityModifyPayload.DefaultMessageNotifications">
            <summary>
            Gets or sets the default message notifications.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCommunityModifyPayload.ExplicitContentFilter">
            <summary>
            Gets or sets the explicit content filter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCommunityModifyPayload.RulesChannelId">
            <summary>
            Gets or sets the rules channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCommunityModifyPayload.PublicUpdatesChannelId">
            <summary>
            Gets or sets the public updates channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCommunityModifyPayload.PreferredLocale">
            <summary>
            Gets or sets the preferred locale.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCommunityModifyPayload.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildCommunityModifyPayload.Features">
            <summary>
            Gets or sets the features.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildMemberAddPayload">
            <summary>
            Represents a guild member add payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberAddPayload.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberAddPayload.Nickname">
            <summary>
            Gets or sets the nickname.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberAddPayload.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberAddPayload.Mute">
            <summary>
            Gets or sets a value indicating whether mute.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberAddPayload.Deaf">
            <summary>
            Gets or sets a value indicating whether deaf.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildChannelReorderPayload">
            <summary>
            Represents a guild channel reorder payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildChannelReorderPayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildChannelReorderPayload.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildChannelNewParentPayload">
            <summary>
            Represents a guild channel new parent payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildChannelNewParentPayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildChannelNewParentPayload.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildChannelNewParentPayload.ParentId">
            <summary>
            Gets or sets the parent id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildChannelNewParentPayload.LockPermissions">
            <summary>
            Gets or sets a value indicating whether lock permissions.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildChannelNoParentPayload">
            <summary>
            Represents a guild channel no parent payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildChannelNoParentPayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildChannelNoParentPayload.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildChannelNoParentPayload.ParentId">
            <summary>
            Gets or sets the parent id.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildRoleReorderPayload">
            <summary>
            Represents a guild role reorder payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildRoleReorderPayload.RoleId">
            <summary>
            Gets or sets the role id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildRoleReorderPayload.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildMemberModifyPayload">
            <summary>
            Represents a guild member modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberModifyPayload.Nickname">
            <summary>
            Gets or sets the nickname.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberModifyPayload.RoleIds">
            <summary>
            Gets or sets the role ids.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberModifyPayload.Mute">
            <summary>
            Gets or sets the mute.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberModifyPayload.Deafen">
            <summary>
            Gets or sets the deafen.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberModifyPayload.VoiceChannelId">
            <summary>
            Gets or sets the voice channel id.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildMemberTimeoutModifyPayload">
            <summary>
            Represents a guild member timeout modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMemberTimeoutModifyPayload.CommunicationDisabledUntil">
            <summary>
            Gets or sets the date until the member can communicate again.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildRolePayload">
            <summary>
            Represents a guild role payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildRolePayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildRolePayload.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildRolePayload.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildRolePayload.Hoist">
            <summary>
            Gets or sets a value indicating whether hoist.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildRolePayload.Mentionable">
            <summary>
            Gets or sets a value indicating whether mentionable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildRolePayload.IconBase64">
            <summary>
            Gets or sets the icon base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildRolePayload.UnicodeEmoji">
            <summary>
            Gets or sets the icon base64.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildPruneResultPayload">
            <summary>
            Represents a guild prune result payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildPruneResultPayload.Pruned">
            <summary>
            Gets or sets the pruned.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildIntegrationAttachPayload">
            <summary>
            Represents a guild integration attach payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildIntegrationAttachPayload.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildIntegrationAttachPayload.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildIntegrationModifyPayload">
            <summary>
            Represents a guild integration modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildIntegrationModifyPayload.ExpireBehavior">
            <summary>
            Gets or sets the expire behavior.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildIntegrationModifyPayload.ExpireGracePeriod">
            <summary>
            Gets or sets the expire grace period.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildIntegrationModifyPayload.EnableEmoticons">
            <summary>
            Gets or sets a value indicating whether enable emoticons.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildEmojiModifyPayload">
            <summary>
            Represents a guild emoji modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildEmojiModifyPayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildEmojiModifyPayload.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildEmojiCreatePayload">
            <summary>
            Represents a guild emoji create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildEmojiCreatePayload.ImageB64">
            <summary>
            Gets or sets the image b64.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildWidgetSettingsPayload">
            <summary>
            Represents a guild widget settings payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildWidgetSettingsPayload.Enabled">
            <summary>
            Gets or sets a value indicating whether enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildWidgetSettingsPayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildTemplateCreateOrModifyPayload">
            <summary>
            Represents a guild template create or modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildTemplateCreateOrModifyPayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildTemplateCreateOrModifyPayload.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildMembershipScreeningFormModifyPayload">
            <summary>
            Represents a guild membership screening form modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMembershipScreeningFormModifyPayload.Enabled">
            <summary>
            Gets or sets the enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMembershipScreeningFormModifyPayload.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildMembershipScreeningFormModifyPayload.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildWelcomeScreenModifyPayload">
            <summary>
            Represents a guild welcome screen modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildWelcomeScreenModifyPayload.Enabled">
            <summary>
            Gets or sets the enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildWelcomeScreenModifyPayload.WelcomeChannels">
            <summary>
            Gets or sets the welcome channels.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildWelcomeScreenModifyPayload.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildUpdateCurrentUserVoiceStatePayload">
            <summary>
            Represents a guild update current user voice state payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildUpdateCurrentUserVoiceStatePayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildUpdateCurrentUserVoiceStatePayload.Suppress">
            <summary>
            Gets or sets a value indicating whether suppress.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildUpdateCurrentUserVoiceStatePayload.RequestToSpeakTimestamp">
            <summary>
            Gets or sets the request to speak timestamp.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildUpdateUserVoiceStatePayload">
            <summary>
            Represents a guild update user voice state payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildUpdateUserVoiceStatePayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildUpdateUserVoiceStatePayload.Suppress">
            <summary>
            Gets or sets a value indicating whether suppress.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload">
            <summary>
            The rest guild scheduled event create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload.EntityMetadata">
            <summary>
            Gets or sets the entity metadata.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload.PrivacyLevel">
            <summary>
            Gets or sets the privacy level of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload.ScheduledStartTime">
            <summary>
            Gets or sets the time to schedule the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload.ScheduledEndTime">
            <summary>
            Gets or sets the time when the scheduled event is scheduled to end.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload.EntityType">
            <summary>
            Gets or sets the entity type of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventCreatePayload.CoverBase64">
            <summary>
            Gets or sets the image as base64.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload">
            <summary>
            The rest guild scheduled event modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload.EntityMetadata">
            <summary>
            Gets or sets the entity metadata.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload.ScheduledStartTime">
            <summary>
            Gets or sets the time to schedule the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload.ScheduledEndTime">
            <summary>
            Gets or sets the time when the scheduled event is scheduled to end.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload.EntityType">
            <summary>
            Gets or sets the entity type of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload.CoverBase64">
            <summary>
            Gets or sets the cover image as base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestGuildScheduledEventModifyPayload.Status">
            <summary>
            Gets or sets the status of the scheduled event.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestStageInstanceCreatePayload">
            <summary>
            Represents a stage instance create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestStageInstanceCreatePayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestStageInstanceCreatePayload.Topic">
            <summary>
            Gets or sets the topic.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestStageInstanceCreatePayload.PrivacyLevel">
            <summary>
            Gets or sets the privacy level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestStageInstanceCreatePayload.SendStartNotification">
            <summary>
            Whether everyone should be notified about the start.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestStageInstanceModifyPayload">
            <summary>
            Represents a stage instance modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestStageInstanceModifyPayload.Topic">
            <summary>
            Gets or sets the topic.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestStageInstanceModifyPayload.PrivacyLevel">
            <summary>
            Gets or sets the privacy level.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestStickerModifyPayload">
            <summary>
            Represents a sticker modify payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestStickerModifyPayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestStickerModifyPayload.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestStickerModifyPayload.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestUserDmCreatePayload">
            <summary>
            Represents a user dm create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserDmCreatePayload.Recipient">
            <summary>
            Gets or sets the recipient.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestUserGroupDmCreatePayload">
            <summary>
            Represents a user group dm create payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGroupDmCreatePayload.AccessTokens">
            <summary>
            Gets or sets the access tokens.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGroupDmCreatePayload.Nicknames">
            <summary>
            Gets or sets the nicknames.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestUserUpdateCurrentPayload">
            <summary>
            Represents a user update current payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserUpdateCurrentPayload.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserUpdateCurrentPayload.AvatarBase64">
            <summary>
            Gets or sets the avatar base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserUpdateCurrentPayload.AvatarSet">
            <summary>
            Gets or sets a value indicating whether avatar set.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.RestUserUpdateCurrentPayload.ShouldSerializeAvatarBase64">
            <summary>
            Gets whether the avatar should be serialized.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestUserGuild">
            <summary>
            Represents a user guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGuild.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGuild.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGuild.IconHash">
            <summary>
            Gets the icon hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGuild.IsOwner">
            <summary>
            Gets a value indicating whether is owner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGuild.Permissions">
            <summary>
            Gets the permissions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGuild.Features">
            <summary>
            Gets the guild features.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestUserGuildListPayload">
            <summary>
            Represents a user guild list payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGuildListPayload.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGuildListPayload.Before">
            <summary>
            Gets or sets the before.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestUserGuildListPayload.After">
            <summary>
            Gets or sets the after.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestWebhookPayload">
            <summary>
            Represents a webhook payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookPayload.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookPayload.AvatarBase64">
            <summary>
            Gets or sets the avatar base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookPayload.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookPayload.AvatarSet">
            <summary>
            Gets whether an avatar is set.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.RestWebhookPayload.ShouldSerializeAvatarBase64">
            <summary>
            Gets whether the avatar should be serialized.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestWebhookExecutePayload">
            <summary>
            Represents a webhook execute payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookExecutePayload.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookExecutePayload.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookExecutePayload.AvatarUrl">
            <summary>
            Gets or sets the avatar url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookExecutePayload.IsTts">
            <summary>
            Whether this message is tts.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookExecutePayload.Embeds">
            <summary>
            Gets or sets the embeds.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookExecutePayload.Mentions">
            <summary>
            Gets or sets the mentions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookExecutePayload.Components">
            <summary>
            Gets or sets the components.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookExecutePayload.Attachments">
            <summary>
            Gets or sets the attachments.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.RestWebhookMessageEditPayload">
            <summary>
            Represents a webhook message edit payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookMessageEditPayload.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookMessageEditPayload.Embeds">
            <summary>
            Gets or sets the embeds.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookMessageEditPayload.Mentions">
            <summary>
            Gets or sets the mentions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookMessageEditPayload.Attachments">
            <summary>
            Gets or sets the attachments.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.RestWebhookMessageEditPayload.Components">
            <summary>
            Gets or sets the components.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.ShardInfo">
            <summary>
            Represents data for identify payload's shard info.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ShardInfo.ShardId">
            <summary>
            Gets or sets this client's shard id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.ShardInfo.ShardCount">
            <summary>
            Gets or sets the total shard count for this token.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.ShardInfoConverter">
            <summary>
            Represents a shard info converter.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.ShardInfoConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.ShardInfoConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.ShardInfoConverter.ReadArrayObject(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the array object.
            </summary>
            <param name="reader">The reader.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.ShardInfoConverter.CanConvert(System.Type)">
            <summary>
            Whether this can be converted.
            </summary>
            <param name="objectType">The object type.</param>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.StatusUpdate">
            <summary>
            Represents data for websocket status update payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.StatusUpdate.IdleSince">
            <summary>
            Gets or sets the unix millisecond timestamp of when the user went idle.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.StatusUpdate.IsAfk">
            <summary>
            Gets or sets whether the user is AFK.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.StatusUpdate.Status">
            <summary>
            Gets or sets the status of the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.StatusUpdate.StatusString">
            <summary>
            Gets the status string of the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.StatusUpdate.Activity">
            <summary>
            Gets or sets the game the user is playing.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportActivity">
            <summary>
            Represents a game a user is playing.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Id">
            <summary>
            Gets or sets the id of user's activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Name">
            <summary>
            Gets or sets the name of the game the user is playing.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.StreamUrl">
            <summary>
            Gets or sets the stream URI, if applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.ActivityType">
            <summary>
            Gets or sets the livestream type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Details">
             <summary>
             Gets or sets the details.
            
             <para>This is a component of the rich presence, and, as such, can only be used by regular users.</para>
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.State">
             <summary>
             Gets or sets game state.
            
             <para>This is a component of the rich presence, and, as such, can only be used by regular users.</para>
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Emoji">
            <summary>
            Gets the emoji details for a custom status, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.ApplicationId">
             <summary>
             Gets ID of the application for which this rich presence is for.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.ApplicationIdStr">
            <summary>
            Gets or sets the application id string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Instance">
             <summary>
             Gets or sets instance status.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Party">
             <summary>
             Gets or sets information about the current game's party.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Assets">
             <summary>
             Gets or sets information about assets related to this rich presence.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Buttons">
             <summary>
             Gets or sets information about buttons in this rich presence.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Platform">
             <summary>
             Gets or sets platform in this rich presence.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.SyncId">
             <summary>
             Gets or sets sync_id in this rich presence.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.SessionId">
             <summary>
             Gets or sets session_id in this rich presence.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Timestamps">
             <summary>
             Gets or sets information about current game's timestamps.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.Secrets">
             <summary>
             Gets or sets information about current game's secret values.
            
             This is a component of the rich presence, and, as such, can only be used by regular users.
             </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.TransportActivity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Abstractions.TransportActivity"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.TransportActivity.#ctor(DisCatSharp.Entities.DiscordActivity)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Abstractions.TransportActivity"/> class.
            </summary>
            <param name="game">The game.</param>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.TransportActivity.IsRichPresence">
            <summary>
            Whether this activity is a rich presence.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.TransportActivity.IsCustomStatus">
            <summary>
            Whether this activity is a custom status.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportActivity.PresenceAssets">
            <summary>
            Represents information about assets attached to a rich presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.PresenceAssets.LargeImage">
            <summary>
            Gets the large image asset ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.PresenceAssets.LargeImageText">
            <summary>
            Gets the large image text.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.PresenceAssets.SmallImage">
            <summary>
            Gets the small image asset ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.PresenceAssets.SmallImageText">
            <summary>
            Gets the small image text.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportActivity.GameParty">
            <summary>
            Represents information about rich presence game party.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.GameParty.Id">
            <summary>
            Gets the game party ID.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.GameParty.Size">
            <summary>
            Gets the size of the party.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportActivity.GameParty.GamePartySize">
            <summary>
            Represents information about party size.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.GameParty.GamePartySize.Current">
            <summary>
            Gets the current number of players in the party.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.GameParty.GamePartySize.Maximum">
            <summary>
            Gets the maximum party size.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportActivity.GameTimestamps">
            <summary>
            Represents information about the game state's timestamps.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.GameTimestamps.Start">
            <summary>
            Gets the time the game has started.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.GameTimestamps.End">
            <summary>
            Gets the time the game is going to end.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportActivity.GameSecrets">
            <summary>
            Represents information about secret values for the Join, Spectate, and Match actions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.GameSecrets.Join">
            <summary>
            Gets the secret value for join action.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.GameSecrets.Match">
            <summary>
            Gets the secret value for match action.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportActivity.GameSecrets.Spectate">
            <summary>
            Gets the secret value for spectate action.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.GamePartySizeConverter">
            <summary>
            Represents a game party size converter.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.GamePartySizeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.GamePartySizeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.GamePartySizeConverter.ReadArrayObject(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the array object.
            </summary>
            <param name="reader">The reader.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.GamePartySizeConverter.CanConvert(System.Type)">
            <summary>
            Whether it can convert.
            </summary>
            <param name="objectType">The object type.</param>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportApplication">
            <summary>
            The transport application.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.IconHash">
            <summary>
            Gets or sets the icon hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.IsPublicBot">
            <summary>
            Whether the bot is public.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.TermsOfServiceUrl">
            <summary>
            Gets or sets the terms of service url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.PrivacyPolicyUrl">
            <summary>
            Gets or sets the privacy policy url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.BotRequiresCodeGrant">
            <summary>
            Gets or sets a value indicating whether the bot requires code grant.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.IsHook">
            <summary>
            Gets or sets a value indicating whether the bot is a hook.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Type">
            <summary>
            Gets or sets a value indicating whether the bot requires code grant.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.RpcOrigins">
            <summary>
            Gets or sets the rpc origins.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Team">
            <summary>
            Gets or sets the team.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.VerifyKey">
            <summary>
            Gets or sets the verify key.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.GuildId">
            <summary>
            Gets or sets the guild id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.PrimarySkuId">
            <summary>
            Gets or sets the primary sku id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Slug">
            <summary>
            Gets or sets the slug.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.CoverImageHash">
            <summary>
            Gets or sets the cover image hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.CustomInstallUrl">
            <summary>
            Gets or sets the custom install url.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.InstallParams">
            <summary>
            Gets or sets the install params.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportApplication.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.TransportApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Abstractions.TransportApplication"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportMember">
            <summary>
            Represents a transport member.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.AvatarHash">
            <summary>
            Gets the avatar hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.GuildAvatarHash">
            <summary>
            Gets the guild avatar hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.GuildBannerHash">
            <summary>
            Gets the guild banner hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.GuildBio">
            <summary>
            Gets the guild bio.
            This is not available to bots tho.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.User">
            <summary>
            Gets the user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.Nickname">
            <summary>
            Gets the nickname.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.Roles">
            <summary>
            Gets the roles.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.JoinedAt">
            <summary>
            Gets the joined at.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.IsDeafened">
            <summary>
            Whether this member is deafened.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.IsMuted">
            <summary>
            Whether this member is muted.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.PremiumSince">
            <summary>
            Gets the premium since.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.IsPending">
            <summary>
            Whether this member is marked as pending.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.CommunicationDisabledUntil">
            <summary>
            Gets the timeout time.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportMember.MemberFlags">
            <summary>
            Gets the members flags.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportTeam">
            <summary>
            The transport team.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportTeam.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportTeam.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportTeam.IconHash">
            <summary>
            Gets or sets the icon hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportTeam.OwnerId">
            <summary>
            Gets or sets the owner id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportTeam.Members">
            <summary>
            Gets or sets the members.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.TransportTeam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Abstractions.TransportTeam"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportTeamMember">
            <summary>
            The transport team member.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportTeamMember.MembershipState">
            <summary>
            Gets or sets the membership state.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportTeamMember.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportTeamMember.TeamId">
            <summary>
            Gets or sets the team id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportTeamMember.User">
            <summary>
            Gets or sets the user.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.TransportTeamMember.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Abstractions.TransportTeamMember"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.TransportUser">
            <summary>
            Represents a transport user.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.Username">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.Discriminator">
            <summary>
            Gets or sets the discriminator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.UsernameWithDiscriminator">
            <summary>
            Gets the username with discriminator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.AvatarHash">
            <summary>
            Gets the avatar hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.BannerHash">
            <summary>
            Gets the banner hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.BannerColor">
            <summary>
            Gets the banner color.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.IsBot">
            <summary>
            Gets a value indicating whether is bot.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.MfaEnabled">
            <summary>
            Gets a value indicating whether mfa enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.Verified">
            <summary>
            Gets a value indicating whether verified.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.Email">
            <summary>
            Gets the email.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.PremiumType">
            <summary>
            Gets the premium type.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.Locale">
            <summary>
            Gets the locale.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.OAuthFlags">
            <summary>
            Gets the OAuth flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.TransportUser.Bio">
            <summary>
            Gets the users bio.
            This is not available to bots tho.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.TransportUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Abstractions.TransportUser"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Abstractions.TransportUser.#ctor(DisCatSharp.Net.Abstractions.TransportUser)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Abstractions.TransportUser"/> class from an existing <see cref="T:DisCatSharp.Net.Abstractions.TransportUser"/>.
            </summary>
            <param name="other">The other transport user.</param>
        </member>
        <member name="T:DisCatSharp.Net.Abstractions.VoiceStateUpdate">
            <summary>
            Represents data for websocket voice state update payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.VoiceStateUpdate.GuildId">
            <summary>
            Gets or sets the guild for which the user is updating their voice state.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.VoiceStateUpdate.ChannelId">
            <summary>
            Gets or sets the channel user wants to connect to. Null if disconnecting.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.VoiceStateUpdate.Mute">
            <summary>
            Gets or sets whether the client is muted.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Abstractions.VoiceStateUpdate.Deafen">
            <summary>
            Gets or sets whether the client is deafened.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.GatewayInfo">
            <summary>
            Represents information used to identify with Discord.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.GatewayInfo.Url">
            <summary>
            Gets the gateway URL for the WebSocket connection.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.GatewayInfo.ShardCount">
            <summary>
            Gets the recommended amount of shards.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.GatewayInfo.SessionBucket">
            <summary>
            Gets the session start limit data.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.ConnectionEndpoint">
            <summary>
            Represents a network connection endpoint.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.ConnectionEndpoint.Hostname">
            <summary>
            Gets or sets the hostname associated with this endpoint.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.ConnectionEndpoint.Port">
            <summary>
            Gets or sets the port associated with this endpoint.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.ConnectionEndpoint.Secured">
            <summary>
            Gets or sets the secured status of this connection.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.ConnectionEndpoint.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new endpoint structure.
            </summary>
            <param name="hostname">Hostname to connect to.</param>
            <param name="port">Port to use for connection.</param>
            <param name="secured">Whether the connection should be secured (https/wss).</param>
        </member>
        <member name="M:DisCatSharp.Net.ConnectionEndpoint.GetHashCode">
            <summary>
            Gets the hash code of this endpoint.
            </summary>
            <returns>Hash code of this endpoint.</returns>
        </member>
        <member name="M:DisCatSharp.Net.ConnectionEndpoint.ToString">
            <summary>
            Gets the string representation of this connection endpoint.
            </summary>
            <returns>String representation of this endpoint.</returns>
        </member>
        <member name="M:DisCatSharp.Net.ConnectionEndpoint.ToHttpString">
            <summary>
            Returns a http string.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.ConnectionEndpoint.ToWebSocketString">
            <summary>
            Returns a web socket string.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.ApplicationCommandEditModel">
            <summary>
            Represents a application command edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ApplicationCommandEditModel.Name">
            <summary>
            Sets the command's new name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ApplicationCommandEditModel.Description">
            <summary>
            Sets the command's new description
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ApplicationCommandEditModel.NameLocalizations">
            <summary>
            Sets the command's name localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ApplicationCommandEditModel.DescriptionLocalizations">
            <summary>
            Sets the command's description localizations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ApplicationCommandEditModel.Options">
            <summary>
            Sets the command's new options.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ApplicationCommandEditModel.DefaultMemberPermissions">
            <summary>
            Sets the command's needed permissions.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ApplicationCommandEditModel.DmPermission">
            <summary>
            Sets whether the command can be used in direct messages.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.BaseEditModel">
            <summary>
            Represents the base edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.BaseEditModel.AuditLogReason">
            <summary>
            Reason given in audit logs
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.ChannelEditModel">
            <summary>
            Represents a channel edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.Name">
            <summary>
            Sets the channel's new name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.Type">
            <summary>
            Sets the channel's type.
            This can only be used to convert between text and news channels.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.Position">
            <summary>
            Sets the channel's new position.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.Topic">
            <summary>
            Sets the channel's new topic.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.Nsfw">
            <summary>
            Sets whether the channel is to be marked as NSFW.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.Parent">
            <summary>
            <para>Sets the parent of this channel.</para>
            <para>This should be channel with <see cref="P:DisCatSharp.Entities.DiscordChannel.Type"/> set to <see cref="F:DisCatSharp.ChannelType.Category"/>.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.Bitrate">
            <summary>
            Sets the voice channel's new bitrate.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.UserLimit">
            <summary>
            <para>Sets the voice channel's new user limit.</para>
            <para>Setting this to 0 will disable the user limit.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.PerUserRateLimit">
            <summary>
            <para>Sets the channel's new slow mode timeout.</para>
            <para>Setting this to null or 0 will disable slow mode.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.RtcRegion">
            <summary>
            <para>Sets the voice channel's region override.</para>
            <para>Setting this to null will set it to automatic.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.QualityMode">
            <summary>
            <para>Sets the voice channel's video quality.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.DefaultAutoArchiveDuration">
            <summary>
            Sets this channel's default duration for newly created threads, in minutes, to automatically archive the thread after recent activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.PermissionOverwrites">
            <summary>
            Sets the channel's permission overwrites.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ChannelEditModel.Banner">
            <summary>
            The new banner of the channel
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Models.ChannelEditModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Models.ChannelEditModel"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.GuildEditModel">
            <summary>
            Represents a guild edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.Name">
            <summary>
            The new guild name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.Icon">
            <summary>
            The new guild icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.VerificationLevel">
            <summary>
            The new guild verification level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.DefaultMessageNotifications">
            <summary>
            The new guild default message notification level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.MfaLevel">
            <summary>
            The new guild MFA level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.ExplicitContentFilter">
            <summary>
            The new guild explicit content filter level.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.AfkChannel">
            <summary>
            The new AFK voice channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.AfkTimeout">
            <summary>
            The new AFK timeout time in seconds.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.Owner">
            <summary>
            The new guild owner.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.Splash">
            <summary>
            The new guild splash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.SystemChannel">
            <summary>
            The new guild system channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.SystemChannelFlags">
            <summary>
            The guild system channel flags.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.Description">
            <summary>
            The guild description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.RulesChannel">
            <summary>
            The new guild rules channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.PublicUpdatesChannel">
            <summary>
            The new guild public updates channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.PreferredLocale">
            <summary>
            The new guild preferred locale.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.Banner">
            <summary>
            The new banner of the guild
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.DiscoverySplash">
            <summary>
            The new discovery splash image of the guild
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.GuildEditModel.PremiumProgressBarEnabled">
            <summary>
            Whether the premium progress bar should be enabled
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Models.GuildEditModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Models.GuildEditModel"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.MemberEditModel">
            <summary>
            Represents a member edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.MemberEditModel.Nickname">
            <summary>
            New nickname
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.MemberEditModel.Roles">
            <summary>
            New roles
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.MemberEditModel.Muted">
            <summary>
            Whether this user should be muted
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.MemberEditModel.Deafened">
            <summary>
            Whether this user should be deafened
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.MemberEditModel.VoiceChannel">
            <summary>
            Voice channel to move this user to, set to null to kick
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Models.MemberEditModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Models.MemberEditModel"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.MembershipScreeningEditModel">
            <summary>
            Represents a membership screening edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.MembershipScreeningEditModel.Enabled">
            <summary>
            Sets whether membership screening should be enabled for this guild
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.MembershipScreeningEditModel.Description">
            <summary>
            Sets the server description shown in the membership screening form
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.MembershipScreeningEditModel.Fields">
            <summary>
            Sets the fields in this membership screening form
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Models.MembershipScreeningEditModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Models.MembershipScreeningEditModel"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.RoleEditModel">
            <summary>
            Represents a role edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.RoleEditModel.Name">
            <summary>
            New role name
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.RoleEditModel.Permissions">
            <summary>
            New role permissions
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.RoleEditModel.Color">
            <summary>
            New role color
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.RoleEditModel.Hoist">
            <summary>
            Whether new role should be hoisted (Shown in the sidebar)
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.RoleEditModel.Mentionable">
            <summary>
            Whether new role should be mentionable
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.RoleEditModel.Icon">
            <summary>
            The new role icon.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.RoleEditModel.UnicodeEmoji">
            <summary>
            The new role icon from unicode emoji.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Models.RoleEditModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Models.RoleEditModel"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.ScheduledEventEditModel">
            <summary>
            Represents a scheduled event edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ScheduledEventEditModel.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ScheduledEventEditModel.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ScheduledEventEditModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ScheduledEventEditModel.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ScheduledEventEditModel.ScheduledStartTime">
            <summary>
            Gets or sets the time to schedule the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ScheduledEventEditModel.ScheduledEndTime">
            <summary>
            Gets or sets the time when the scheduled event is scheduled to end.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ScheduledEventEditModel.EntityType">
            <summary>
            Gets or sets the entity type of the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ScheduledEventEditModel.CoverImage">
            <summary>
            Gets or sets the cover image as base64.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ScheduledEventEditModel.Status">
            <summary>
            Gets or sets the status of the scheduled event.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Models.ScheduledEventEditModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Models.ScheduledEventEditModel"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.ThreadEditModel">
            <summary>
            Represents a thread edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ThreadEditModel.Name">
            <summary>
            Sets the thread's new name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ThreadEditModel.Locked">
            <summary>
            Sets the thread's locked state.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ThreadEditModel.Archived">
            <summary>
            Sets the thread's archived state.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ThreadEditModel.AutoArchiveDuration">
            <summary>
            Sets the thread's auto archive duration.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ThreadEditModel.PerUserRateLimit">
            <summary>
            Sets the thread's new user rate limit.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.ThreadEditModel.Invitable">
            <summary>
            Sets the thread's invitable state.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Models.ThreadEditModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.Models.ThreadEditModel"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Models.WelcomeScreenEditModel">
            <summary>
            Represents a welcome screen edit model.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.WelcomeScreenEditModel.Enabled">
            <summary>
            Sets whether the welcome screen should be enabled.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.WelcomeScreenEditModel.WelcomeChannels">
            <summary>
            Sets the welcome channels.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Models.WelcomeScreenEditModel.Description">
            <summary>
            Sets the serer description shown.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.BaseRestRequest">
            <summary>
            Represents a request sent over HTTP.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.BaseRestRequest.Discord">
            <summary>
            Gets the discord client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.BaseRestRequest.RequestTaskSource">
            <summary>
            Gets the request task source.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.BaseRestRequest.Url">
            <summary>
            Gets the url to which this request is going to be made.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.BaseRestRequest.Method">
            <summary>
            Gets the HTTP method used for this request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.BaseRestRequest.Route">
            <summary>
            Gets the generic path (no parameters) for this request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.BaseRestRequest.Headers">
            <summary>
            Gets the headers sent with this request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.BaseRestRequest.RateLimitWaitOverride">
            <summary>
            Gets the override for the rate limit bucket wait time.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.BaseRestRequest.RateLimitBucket">
            <summary>
            Gets the rate limit bucket this request is in.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.BaseRestRequest.#ctor(DisCatSharp.BaseDiscordClient,DisCatSharp.Net.RateLimitBucket,System.Uri,DisCatSharp.Net.RestRequestMethod,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{System.Double})">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Net.BaseRestRequest"/> with specified parameters.
            </summary>
            <param name="client"><see cref="T:DisCatSharp.DiscordClient"/> from which this request originated.</param>
            <param name="bucket">Rate limit bucket to place this request in.</param>
            <param name="url">Uri to which this request is going to be sent to.</param>
            <param name="method">Method to use for this request,</param>
            <param name="route">The generic route the request url will use.</param>
            <param name="headers">Additional headers for this request.</param>
            <param name="ratelimitWaitOverride">Override for ratelimit bucket wait time.</param>
        </member>
        <member name="M:DisCatSharp.Net.BaseRestRequest.WaitForCompletionAsync">
            <summary>
            Asynchronously waits for this request to complete.
            </summary>
            <returns>HTTP response to this request.</returns>
        </member>
        <member name="M:DisCatSharp.Net.BaseRestRequest.SetCompleted(DisCatSharp.Net.RestResponse)">
            <summary>
            Sets as completed.
            </summary>
            <param name="response">The response to set.</param>
        </member>
        <member name="M:DisCatSharp.Net.BaseRestRequest.SetFaulted(System.Exception)">
            <summary>
            Sets as faulted.
            </summary>
            <param name="ex">The exception to set.</param>
        </member>
        <member name="M:DisCatSharp.Net.BaseRestRequest.TrySetFaulted(System.Exception)">
            <summary>
            Tries to set as faulted.
            </summary>
            <param name="ex">The exception to set.</param>
        </member>
        <member name="T:DisCatSharp.Net.DiscordApiClient">
            <summary>
            Represents a discord api client.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.DiscordApiClient.REASON_HEADER_NAME">
            <summary>
            The audit log reason header name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.DiscordApiClient.Discord">
            <summary>
            Gets the discord client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.DiscordApiClient.Rest">
            <summary>
            Gets the rest client.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.#ctor(DisCatSharp.BaseDiscordClient)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.DiscordApiClient"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.#ctor(System.Net.IWebProxy,System.TimeSpan,System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.DiscordApiClient"/> class.
            </summary>
            <param name="proxy">The proxy.</param>
            <param name="timeout">The timeout.</param>
            <param name="useRelativeRateLimit">If true, use relative rate limit.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.BuildQueryString(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Builds the query string.
            </summary>
            <param name="values">The values.</param>
            <param name="post">Whether this query will be transmitted via POST.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.PrepareMessage(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Prepares the message.
            </summary>
            <param name="msgRaw">The msg_raw.</param>
            <returns>A DiscordMessage.</returns>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.PopulateMessage(DisCatSharp.Net.Abstractions.TransportUser,DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Populates the message.
            </summary>
            <param name="author">The author.</param>
            <param name="ret">The message.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DoRequestAsync(DisCatSharp.BaseDiscordClient,DisCatSharp.Net.RateLimitBucket,System.Uri,DisCatSharp.Net.RestRequestMethod,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,System.Nullable{System.Double})">
            <summary>
            Executes a rest request.
            </summary>
            <param name="client">The client.</param>
            <param name="bucket">The bucket.</param>
            <param name="url">The url.</param>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <param name="headers">The headers.</param>
            <param name="payload">The payload.</param>
            <param name="ratelimitWaitOverride">The ratelimit wait override.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DoStickerMultipartAsync(DisCatSharp.BaseDiscordClient,DisCatSharp.Net.RateLimitBucket,System.Uri,DisCatSharp.Net.RestRequestMethod,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},DisCatSharp.Entities.DiscordMessageFile,System.String,System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Executes a multipart rest request for stickers.
            </summary>
            <param name="client">The client.</param>
            <param name="bucket">The bucket.</param>
            <param name="url">The url.</param>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <param name="headers">The headers.</param>
            <param name="file">The file.</param>
            <param name="name">The sticker name.</param>
            <param name="tags">The sticker tag.</param>
            <param name="description">The sticker description.</param>
            <param name="ratelimitWaitOverride">The ratelimit wait override.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DoMultipartAsync(DisCatSharp.BaseDiscordClient,DisCatSharp.Net.RateLimitBucket,System.Uri,DisCatSharp.Net.RestRequestMethod,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyCollection{DisCatSharp.Entities.DiscordMessageFile},System.Nullable{System.Double})">
            <summary>
            Executes a multipart request.
            </summary>
            <param name="client">The client.</param>
            <param name="bucket">The bucket.</param>
            <param name="url">The url.</param>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <param name="headers">The headers.</param>
            <param name="values">The values.</param>
            <param name="files">The files.</param>
            <param name="ratelimitWaitOverride">The ratelimit wait override.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.SearchMembersAsync(System.UInt64,System.String,System.Nullable{System.Int32})">
            <summary>
            Searches the members async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="name">The name.</param>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildBanAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets the guild ban async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildAsync(System.String,System.String,DisCatSharp.Entities.Optional{System.String},System.Nullable{DisCatSharp.Entities.VerificationLevel},System.Nullable{DisCatSharp.Entities.DefaultMessageNotifications},System.Nullable{DisCatSharp.SystemChannelFlags})">
            <summary>
            Creates the guild async.
            </summary>
            <param name="name">The name.</param>
            <param name="regionId">The region_id.</param>
            <param name="iconb64">The iconb64.</param>
            <param name="verificationLevel">The verification_level.</param>
            <param name="defaultMessageNotifications">The default_message_notifications.</param>
            <param name="systemChannelFlags">The system_channel_flags.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildFromTemplateAsync(System.String,System.String,DisCatSharp.Entities.Optional{System.String})">
            <summary>
            Creates the guild from template async.
            </summary>
            <param name="templateCode">The template_code.</param>
            <param name="name">The name.</param>
            <param name="iconb64">The iconb64.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteGuildAsync(System.UInt64)">
            <summary>
            Deletes the guild async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildAsync(System.UInt64,DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{DisCatSharp.Entities.VerificationLevel},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DefaultMessageNotifications},DisCatSharp.Entities.Optional{DisCatSharp.Entities.MfaLevel},DisCatSharp.Entities.Optional{DisCatSharp.Entities.ExplicitContentFilter},DisCatSharp.Entities.Optional{System.Nullable{System.UInt64}},DisCatSharp.Entities.Optional{System.Int32},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.UInt64},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.Nullable{System.UInt64}},DisCatSharp.Entities.Optional{DisCatSharp.SystemChannelFlags},DisCatSharp.Entities.Optional{System.Nullable{System.UInt64}},DisCatSharp.Entities.Optional{System.Nullable{System.UInt64}},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.Boolean},System.String)">
            <summary>
            Modifies the guild.
            </summary>
            <param name="guildId">The guild id.</param>
            <param name="name">The name.</param>
            <param name="verificationLevel">The verification level.</param>
            <param name="defaultMessageNotifications">The default message notifications.</param>
            <param name="mfaLevel">The mfa level.</param>
            <param name="explicitContentFilter">The explicit content filter.</param>
            <param name="afkChannelId">The afk channel id.</param>
            <param name="afkTimeout">The afk timeout.</param>
            <param name="iconb64">The iconb64.</param>
            <param name="ownerId">The owner id.</param>
            <param name="splashb64">The splashb64.</param>
            <param name="systemChannelId">The system channel id.</param>
            <param name="systemChannelFlags">The system channel flags.</param>
            <param name="publicUpdatesChannelId">The public updates channel id.</param>
            <param name="rulesChannelId">The rules channel id.</param>
            <param name="description">The description.</param>
            <param name="bannerb64">The banner base64.</param>
            <param name="discoverySplashb64">The discovery base64.</param>
            <param name="preferredLocale">The preferred locale.</param>
            <param name="premiumProgressBarEnabled">Whether the premium progress bar should be enabled.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildCommunitySettingsAsync(System.UInt64,System.Collections.Generic.List{System.String},DisCatSharp.Entities.Optional{System.Nullable{System.UInt64}},DisCatSharp.Entities.Optional{System.Nullable{System.UInt64}},System.String,System.String,DisCatSharp.Entities.DefaultMessageNotifications,DisCatSharp.Entities.ExplicitContentFilter,DisCatSharp.Entities.VerificationLevel,System.String)">
            <summary>
            Modifies the guild community settings.
            </summary>
            <param name="guildId">The guild id.</param>
            <param name="features">The guild features.</param>
            <param name="rulesChannelId">The rules channel id.</param>
            <param name="publicUpdatesChannelId">The public updates channel id.</param>
            <param name="preferredLocale">The preferred locale.</param>
            <param name="description">The description.</param>
            <param name="defaultMessageNotifications">The default message notifications.</param>
            <param name="explicitContentFilter">The explicit content filter.</param>
            <param name="verificationLevel">The verification level.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildBansAsync(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Implements https://discord.com/developers/docs/resources/guild#get-guild-bans.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildBanAsync(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            Creates the guild ban async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
            <param name="deleteMessageDays">The delete_message_days.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.RemoveGuildBanAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Removes the guild ban async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.LeaveGuildAsync(System.UInt64)">
            <summary>
            Leaves the guild async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.AddGuildMemberAsync(System.UInt64,System.UInt64,System.String,System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordRole},System.Boolean,System.Boolean)">
            <summary>
            Adds the guild member async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
            <param name="accessToken">The access_token.</param>
            <param name="nick">The nick.</param>
            <param name="roles">The roles.</param>
            <param name="muted">If true, muted.</param>
            <param name="deafened">If true, deafened.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ListGuildMembersAsync(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.UInt64})">
            <summary>
            Lists the guild members async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="limit">The limit.</param>
            <param name="after">The after.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.AddGuildMemberRoleAsync(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Adds the guild member role async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
            <param name="roleId">The role_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.RemoveGuildMemberRoleAsync(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Removes the guild member role async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
            <param name="roleId">The role_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildChannelPositionAsync(System.UInt64,System.Collections.Generic.IEnumerable{DisCatSharp.Net.Abstractions.RestGuildChannelReorderPayload},System.String)">
            <summary>
            Modifies the guild channel position async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="pld">The pld.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildChannelParentAsync(System.UInt64,System.Collections.Generic.IEnumerable{DisCatSharp.Net.Abstractions.RestGuildChannelNewParentPayload},System.String)">
            <summary>
            Modifies the guild channel parent async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="pld">The pld.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DetachGuildChannelParentAsync(System.UInt64,System.Collections.Generic.IEnumerable{DisCatSharp.Net.Abstractions.RestGuildChannelNoParentPayload},System.String)">
            <summary>
            Detaches the guild channel parent async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="pld">The pld.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildRolePositionAsync(System.UInt64,System.Collections.Generic.IEnumerable{DisCatSharp.Net.Abstractions.RestGuildRoleReorderPayload},System.String)">
            <summary>
            Modifies the guild role position async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="pld">The pld.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetAuditLogsAsync(System.UInt64,System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Int32})">
            <summary>
            Gets the audit logs async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="limit">The limit.</param>
            <param name="after">The after.</param>
            <param name="before">The before.</param>
            <param name="responsible">The responsible.</param>
            <param name="actionType">The action_type.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildVanityUrlAsync(System.UInt64)">
            <summary>
            Gets the guild vanity url async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildWidgetAsync(System.UInt64)">
            <summary>
            Gets the guild widget async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildWidgetSettingsAsync(System.UInt64)">
            <summary>
            Gets the guild widget settings async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildWidgetSettingsAsync(System.UInt64,System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.String)">
            <summary>
            Modifies the guild widget settings async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="isEnabled">If true, is enabled.</param>
            <param name="channelId">The channel id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildTemplatesAsync(System.UInt64)">
            <summary>
            Gets the guild templates async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildTemplateAsync(System.UInt64,System.String,System.String)">
            <summary>
            Creates the guild template async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.SyncGuildTemplateAsync(System.UInt64,System.String)">
            <summary>
            Syncs the guild template async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="templateCode">The template_code.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildTemplateAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Modifies the guild template async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="templateCode">The template_code.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteGuildTemplateAsync(System.UInt64,System.String)">
            <summary>
            Deletes the guild template async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="templateCode">The template_code.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildMembershipScreeningFormAsync(System.UInt64)">
            <summary>
            Gets the guild membership screening form async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildMembershipScreeningFormAsync(System.UInt64,DisCatSharp.Entities.Optional{System.Boolean},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordGuildMembershipScreeningField[]},DisCatSharp.Entities.Optional{System.String})">
            <summary>
            Modifies the guild membership screening form async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="enabled">The enabled.</param>
            <param name="fields">The fields.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildWelcomeScreenAsync(System.UInt64)">
            <summary>
            Gets the guild welcome screen async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildWelcomeScreenAsync(System.UInt64,DisCatSharp.Entities.Optional{System.Boolean},DisCatSharp.Entities.Optional{System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordGuildWelcomeScreenChannel}},DisCatSharp.Entities.Optional{System.String})">
            <summary>
            Modifies the guild welcome screen async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="enabled">The enabled.</param>
            <param name="welcomeChannels">The welcome channels.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.UpdateCurrentUserVoiceStateAsync(System.UInt64,System.UInt64,System.Nullable{System.Boolean},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates the current user voice state async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="channelId">The channel id.</param>
            <param name="suppress">If true, suppress.</param>
            <param name="requestToSpeakTimestamp">The request to speak timestamp.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.UpdateUserVoiceStateAsync(System.UInt64,System.UInt64,System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Updates the user voice state async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
            <param name="channelId">The channel id.</param>
            <param name="suppress">If true, suppress.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildScheduledEventAsync(System.UInt64,System.Nullable{System.UInt64},DisCatSharp.Entities.DiscordScheduledEventEntityMetadata,System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.String,DisCatSharp.ScheduledEventEntityType,DisCatSharp.Entities.Optional{System.String},System.String)">
            <summary>
            Creates a scheduled event.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildScheduledEventAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.Optional{System.Nullable{System.UInt64}},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordScheduledEventEntityMetadata},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.DateTimeOffset},DisCatSharp.Entities.Optional{System.DateTimeOffset},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{DisCatSharp.ScheduledEventEntityType},DisCatSharp.Entities.Optional{DisCatSharp.ScheduledEventStatus},DisCatSharp.Entities.Optional{System.String},System.String)">
            <summary>
            Modifies a scheduled event.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildScheduledEventStatusAsync(System.UInt64,System.UInt64,DisCatSharp.ScheduledEventStatus,System.String)">
            <summary>
            Modifies a scheduled event.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildScheduledEventAsync(System.UInt64,System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Gets a scheduled event.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="scheduledEventId">The event id.</param>
            <param name="withUserCount">Whether to include user count.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ListGuildScheduledEventsAsync(System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Gets the guilds scheduled events.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="withUserCount">Whether to include the count of users subscribed to the scheduled event.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteGuildScheduledEventAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes a guild scheduled event.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="scheduledEventId">The scheduled event id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildScheduledEventRspvUsersAsync(System.UInt64,System.UInt64,System.Nullable{System.Int32},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean})">
            <summary>
            Gets the users who RSVP'd to a scheduled event.
            Optional with member objects.
            This endpoint is paginated.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="scheduledEventId">The scheduled event id.</param>
            <param name="limit">The limit how many users to receive from the event.</param>
            <param name="before">Get results before the given id.</param>
            <param name="after">Get results after the given id.</param>
            <param name="withMember">Whether to include guild member data. attaches guild_member property to the user object.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildChannelAsync(System.UInt64,System.String,DisCatSharp.ChannelType,System.Nullable{System.UInt64},DisCatSharp.Entities.Optional{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordOverwriteBuilder},System.Nullable{System.Boolean},DisCatSharp.Entities.Optional{System.Nullable{System.Int32}},System.Nullable{DisCatSharp.VideoQualityMode},System.Nullable{DisCatSharp.ThreadAutoArchiveDuration},System.String)">
            <summary>
            Creates the guild channel async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="topic">The topic.</param>
            <param name="bitrate">The bitrate.</param>
            <param name="userLimit">The user_limit.</param>
            <param name="overwrites">The overwrites.</param>
            <param name="nsfw">If true, nsfw.</param>
            <param name="perUserRateLimit">The per user rate limit.</param>
            <param name="qualityMode">The quality mode.</param>
            <param name="defaultAutoArchiveDuration">The default auto archive duration.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyChannelAsync(System.UInt64,System.String,System.Nullable{System.Int32},DisCatSharp.Entities.Optional{System.String},System.Nullable{System.Boolean},DisCatSharp.Entities.Optional{System.Nullable{System.UInt64}},System.Nullable{System.Int32},System.Nullable{System.Int32},DisCatSharp.Entities.Optional{System.Nullable{System.Int32}},DisCatSharp.Entities.Optional{System.String},System.Nullable{DisCatSharp.VideoQualityMode},System.Nullable{DisCatSharp.ThreadAutoArchiveDuration},DisCatSharp.Entities.Optional{DisCatSharp.ChannelType},System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordOverwriteBuilder},DisCatSharp.Entities.Optional{System.String},System.String)">
            <summary>
            Modifies the channel async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="topic">The topic.</param>
            <param name="nsfw">If true, nsfw.</param>
            <param name="parent">The parent.</param>
            <param name="bitrate">The bitrate.</param>
            <param name="userLimit">The user_limit.</param>
            <param name="perUserRateLimit">The per user rate limit.</param>
            <param name="rtcRegion">The rtc region.</param>
            <param name="qualityMode">The quality mode.</param>
            <param name="autoArchiveDuration">The default auto archive duration.</param>
            <param name="type">The type.</param>
            <param name="permissionOverwrites">The permission overwrites.</param>
            <param name="bannerb64">The banner.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetChannelAsync(System.UInt64)">
            <summary>
            Gets the channel async.
            </summary>
            <param name="channelId">The channel_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteChannelAsync(System.UInt64,System.String)">
            <summary>
            Deletes the channel async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets the message async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateMessageAsync(System.UInt64,System.String,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmbed},DisCatSharp.Entities.DiscordSticker,System.Nullable{System.UInt64},System.Boolean,System.Boolean)">
            <summary>
            Creates the message async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="content">The content.</param>
            <param name="embeds">The embeds.</param>
            <param name="sticker">The sticker.</param>
            <param name="replyMessageId">The reply message id.</param>
            <param name="mentionReply">If true, mention reply.</param>
            <param name="failOnInvalidReply">If true, fail on invalid reply.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateMessageAsync(System.UInt64,DisCatSharp.Entities.DiscordMessageBuilder)">
            <summary>
            Creates the message async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildChannelsAsync(System.UInt64)">
            <summary>
            Gets the guild channels async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateStageInstanceAsync(System.UInt64,System.String,System.Boolean,DisCatSharp.StagePrivacyLevel,System.String)">
            <summary>
            Creates the stage instance async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="topic">The topic.</param>
            <param name="sendStartNotification">Whether everyone should be notified about the stage.</param>
            <param name="privacyLevel">The privacy_level.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetStageInstanceAsync(System.UInt64)">
            <summary>
            Gets the stage instance async.
            </summary>
            <param name="channelId">The channel_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyStageInstanceAsync(System.UInt64,DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{DisCatSharp.StagePrivacyLevel},System.String)">
            <summary>
            Modifies the stage instance async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="topic">The topic.</param>
            <param name="privacyLevel">The privacy_level.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteStageInstanceAsync(System.UInt64,System.String)">
            <summary>
            Deletes the stage instance async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetChannelMessagesAsync(System.UInt64,System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets the channel messages async.
            </summary>
            <param name="channelId">The channel id.</param>
            <param name="limit">The limit.</param>
            <param name="before">The before.</param>
            <param name="after">The after.</param>
            <param name="around">The around.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetChannelMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets the channel message async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.EditMessageAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordEmbed}},DisCatSharp.Entities.Optional{System.Collections.Generic.IEnumerable{DisCatSharp.Entities.IMention}},System.Collections.Generic.IReadOnlyList{DisCatSharp.Entities.DiscordActionRowComponent},DisCatSharp.Entities.Optional{System.Boolean},System.Collections.Generic.IReadOnlyCollection{DisCatSharp.Entities.DiscordMessageFile},DisCatSharp.Entities.Optional{System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordAttachment}})">
            <summary>
            Edits the message async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
            <param name="content">The content.</param>
            <param name="embeds">The embeds.</param>
            <param name="mentions">The mentions.</param>
            <param name="components">The components.</param>
            <param name="suppressEmbed">The suppress_embed.</param>
            <param name="files">The files.</param>
            <param name="attachments">The attachments to keep.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteMessageAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes the message async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteMessagesAsync(System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Deletes the messages async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageIds">The message_ids.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetChannelInvitesAsync(System.UInt64)">
            <summary>
            Gets the channel invites async.
            </summary>
            <param name="channelId">The channel_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateChannelInviteAsync(System.UInt64,System.Int32,System.Int32,System.Nullable{DisCatSharp.TargetType},System.Nullable{DisCatSharp.TargetActivity},System.Nullable{System.UInt64},System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates the channel invite async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="maxAge">The max_age.</param>
            <param name="maxUses">The max_uses.</param>
            <param name="targetType">The target_type.</param>
            <param name="targetApplication">The target_application.</param>
            <param name="targetUser">The target_user.</param>
            <param name="temporary">If true, temporary.</param>
            <param name="unique">If true, unique.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteChannelPermissionAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes the channel permission async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="overwriteId">The overwrite_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.EditChannelPermissionsAsync(System.UInt64,System.UInt64,DisCatSharp.Permissions,DisCatSharp.Permissions,System.String,System.String)">
            <summary>
            Edits the channel permissions async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="overwriteId">The overwrite_id.</param>
            <param name="allow">The allow.</param>
            <param name="deny">The deny.</param>
            <param name="type">The type.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.TriggerTypingAsync(System.UInt64)">
            <summary>
            Triggers the typing async.
            </summary>
            <param name="channelId">The channel_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetPinnedMessagesAsync(System.UInt64)">
            <summary>
            Gets the pinned messages async.
            </summary>
            <param name="channelId">The channel_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.PinMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Pins the message async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.UnpinMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Unpins the message async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.AddGroupDmRecipientAsync(System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Adds the group dm recipient async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="userId">The user_id.</param>
            <param name="accessToken">The access_token.</param>
            <param name="nickname">The nickname.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.RemoveGroupDmRecipientAsync(System.UInt64,System.UInt64)">
            <summary>
            Removes the group dm recipient async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="userId">The user_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGroupDmAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.UInt64,System.String})">
            <summary>
            Creates the group dm async.
            </summary>
            <param name="accessTokens">The access_tokens.</param>
            <param name="nicks">The nicks.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateDmAsync(System.UInt64)">
            <summary>
            Creates the dm async.
            </summary>
            <param name="recipientId">The recipient_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.FollowChannelAsync(System.UInt64,System.UInt64)">
            <summary>
            Follows the channel async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="webhookChannelId">The webhook_channel_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CrosspostMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Crossposts the message async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetCurrentUserAsync">
            <summary>
            Gets the current user async.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetUserAsync(System.UInt64)">
            <summary>
            Gets the user async.
            </summary>
            <param name="userId">The user_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetUserAsync(System.String)">
            <summary>
            Gets the user async.
            </summary>
            <param name="userId">The user_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildMemberAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets the guild member async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.RemoveGuildMemberAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Removes the guild member async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyCurrentUserAsync(System.String,DisCatSharp.Entities.Optional{System.String})">
            <summary>
            Modifies the current user async.
            </summary>
            <param name="username">The username.</param>
            <param name="base64Avatar">The base64_avatar.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetCurrentUserGuildsAsync(System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets the current user guilds async.
            </summary>
            <param name="limit">The limit.</param>
            <param name="before">The before.</param>
            <param name="after">The after.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildMemberAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.Collections.Generic.IEnumerable{System.UInt64}},DisCatSharp.Entities.Optional{System.Boolean},DisCatSharp.Entities.Optional{System.Boolean},DisCatSharp.Entities.Optional{System.Nullable{System.UInt64}},System.String)">
            <summary>
            Modifies the guild member async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
            <param name="nick">The nick.</param>
            <param name="roleIds">The role_ids.</param>
            <param name="mute">The mute.</param>
            <param name="deaf">The deaf.</param>
            <param name="voiceChannelId">The voice_channel_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyTimeoutAsync(System.UInt64,System.UInt64,System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Modifies the time out of a guild member.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="userId">The user_id.</param>
            <param name="until">Datetime offset.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyCurrentMemberNicknameAsync(System.UInt64,System.String,System.String)">
            <summary>
            Modifies the current member nickname async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="nick">The nick.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildRolesAsync(System.UInt64)">
            <summary>
            Gets the guild roles async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildAsync(System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Gets the guild async.
            </summary>
            <param name="guildId">The guild id.</param>
            <param name="withCounts">If true, with_counts.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildRoleAsync(System.UInt64,System.UInt64,System.String,System.Nullable{DisCatSharp.Permissions},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},System.String)">
            <summary>
            Modifies the guild role async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="roleId">The role_id.</param>
            <param name="name">The name.</param>
            <param name="permissions">The permissions.</param>
            <param name="color">The color.</param>
            <param name="hoist">If true, hoist.</param>
            <param name="mentionable">If true, mentionable.</param>
            <param name="iconb64">The icon.</param>
            <param name="emoji">The unicode emoji icon.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteRoleAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes the role async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="roleId">The role_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildRoleAsync(System.UInt64,System.String,System.Nullable{DisCatSharp.Permissions},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Creates the guild role async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="name">The name.</param>
            <param name="permissions">The permissions.</param>
            <param name="color">The color.</param>
            <param name="hoist">If true, hoist.</param>
            <param name="mentionable">If true, mentionable.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildPruneCountAsync(System.UInt64,System.Int32,System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Gets the guild prune count async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="days">The days.</param>
            <param name="includeRoles">The include_roles.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.BeginGuildPruneAsync(System.UInt64,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Begins the guild prune async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="days">The days.</param>
            <param name="computePruneCount">If true, compute_prune_count.</param>
            <param name="includeRoles">The include_roles.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetTemplateAsync(System.String)">
            <summary>
            Gets the template async.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildIntegrationsAsync(System.UInt64)">
            <summary>
            Gets the guild integrations async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildPreviewAsync(System.UInt64)">
            <summary>
            Gets the guild preview async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildIntegrationAsync(System.UInt64,System.String,System.UInt64)">
            <summary>
            Creates the guild integration async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildIntegrationAsync(System.UInt64,System.UInt64,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Modifies the guild integration async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="integrationId">The integration_id.</param>
            <param name="expireBehaviour">The expire_behaviour.</param>
            <param name="expireGracePeriod">The expire_grace_period.</param>
            <param name="enableEmoticons">If true, enable_emoticons.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteGuildIntegrationAsync(System.UInt64,DisCatSharp.Entities.DiscordIntegration)">
            <summary>
            Deletes the guild integration async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="integration">The integration.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.SyncGuildIntegrationAsync(System.UInt64,System.UInt64)">
            <summary>
            Syncs the guild integration async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="integrationId">The integration_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildVoiceRegionsAsync(System.UInt64)">
            <summary>
            Gets the guild voice regions async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildInvitesAsync(System.UInt64)">
            <summary>
            Gets the guild invites async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetInviteAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Gets the invite async.
            </summary>
            <param name="inviteCode">The invite_code.</param>
            <param name="withCounts">If true, with_counts.</param>
            <param name="withExpiration">If true, with_expiration.</param>
            <param name="guildScheduledEventId">The scheduled event id to get.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteInviteAsync(System.String,System.String)">
            <summary>
            Deletes the invite async.
            </summary>
            <param name="inviteCode">The invite_code.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetUserConnectionsAsync">
            <summary>
            Gets the users connections async.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ListVoiceRegionsAsync">
            <summary>
            Lists the voice regions async.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateWebhookAsync(System.UInt64,System.String,DisCatSharp.Entities.Optional{System.String},System.String)">
            <summary>
            Creates the webhook async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="name">The name.</param>
            <param name="base64Avatar">The base64_avatar.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetChannelWebhooksAsync(System.UInt64)">
            <summary>
            Gets the channel webhooks async.
            </summary>
            <param name="channelId">The channel_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildWebhooksAsync(System.UInt64)">
            <summary>
            Gets the guild webhooks async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetWebhookAsync(System.UInt64)">
            <summary>
            Gets the webhook async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetWebhookWithTokenAsync(System.UInt64,System.String)">
            <summary>
            Gets the webhook with token async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyWebhookAsync(System.UInt64,System.UInt64,System.String,DisCatSharp.Entities.Optional{System.String},System.String)">
            <summary>
            Modifies the webhook async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="channelId">The channel id.</param>
            <param name="name">The name.</param>
            <param name="base64Avatar">The base64_avatar.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyWebhookAsync(System.UInt64,System.String,System.String,System.String,System.String)">
            <summary>
            Modifies the webhook async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="name">The name.</param>
            <param name="base64Avatar">The base64_avatar.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteWebhookAsync(System.UInt64,System.String)">
            <summary>
            Deletes the webhook async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteWebhookAsync(System.UInt64,System.String,System.String)">
            <summary>
            Deletes the webhook async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ExecuteWebhookAsync(System.UInt64,System.String,DisCatSharp.Entities.DiscordWebhookBuilder,System.String)">
            <summary>
            Executes the webhook async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="builder">The builder.</param>
            <param name="threadId">The thread_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ExecuteWebhookSlackAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Executes the webhook slack async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="jsonPayload">The json_payload.</param>
            <param name="threadId">The thread_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ExecuteWebhookGithubAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Executes the webhook github async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="jsonPayload">The json_payload.</param>
            <param name="threadId">The thread_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.EditWebhookMessageAsync(System.UInt64,System.String,System.String,DisCatSharp.Entities.DiscordWebhookBuilder,System.String)">
            <summary>
            Edits the webhook message async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="messageId">The message_id.</param>
            <param name="builder">The builder.</param>
            <param name="threadId">The thread_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.EditWebhookMessageAsync(System.UInt64,System.String,System.UInt64,DisCatSharp.Entities.DiscordWebhookBuilder,System.UInt64)">
            <summary>
            Edits the webhook message async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="messageId">The message_id.</param>
            <param name="builder">The builder.</param>
            <param name="threadId">The thread_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetWebhookMessageAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Gets the webhook message async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="messageId">The message_id.</param>
            <param name="threadId">The thread_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetWebhookMessageAsync(System.UInt64,System.String,System.UInt64)">
            <summary>
            Gets the webhook message async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="messageId">The message_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetWebhookMessageAsync(System.UInt64,System.String,System.UInt64,System.UInt64)">
            <summary>
            Gets the webhook message async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="messageId">The message_id.</param>
            <param name="threadId">The thread_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteWebhookMessageAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Deletes the webhook message async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="messageId">The message_id.</param>
            <param name="threadId">The thread_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteWebhookMessageAsync(System.UInt64,System.String,System.UInt64)">
            <summary>
            Deletes the webhook message async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="messageId">The message_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteWebhookMessageAsync(System.UInt64,System.String,System.UInt64,System.UInt64)">
            <summary>
            Deletes the webhook message async.
            </summary>
            <param name="webhookId">The webhook_id.</param>
            <param name="webhookToken">The webhook_token.</param>
            <param name="messageId">The message_id.</param>
            <param name="threadId">The thread_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateReactionAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Creates the reaction async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
            <param name="emoji">The emoji.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteOwnReactionAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes the own reaction async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
            <param name="emoji">The emoji.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteUserReactionAsync(System.UInt64,System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Deletes the user reaction async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
            <param name="userId">The user_id.</param>
            <param name="emoji">The emoji.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetReactionsAsync(System.UInt64,System.UInt64,System.String,System.Nullable{System.UInt64},System.Int32)">
            <summary>
            Gets the reactions async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
            <param name="emoji">The emoji.</param>
            <param name="afterId">The after_id.</param>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteAllReactionsAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes the all reactions async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteReactionsEmojiAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes the reactions emoji async.
            </summary>
            <param name="channelId">The channel_id.</param>
            <param name="messageId">The message_id.</param>
            <param name="emoji">The emoji.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateThreadAsync(System.UInt64,System.Nullable{System.UInt64},System.String,DisCatSharp.ThreadAutoArchiveDuration,DisCatSharp.ChannelType,System.Nullable{System.Int32},System.String)">
            <summary>
            Creates the thread.
            </summary>
            <param name="channelId">The channel id to create the thread in.</param>
            <param name="messageId">The optional message id to create the thread from.</param>
            <param name="name">The name of the thread.</param>
            <param name="autoArchiveDuration">The auto_archive_duration for the thread.</param>
            <param name="type">Can be either <see cref="F:DisCatSharp.ChannelType.PublicThread"/> or <see cref="F:DisCatSharp.ChannelType.PrivateThread"/>.</param>
            <param name="rateLimitPerUser">The rate limit per user.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetThreadAsync(System.UInt64)">
            <summary>
            Gets the thread.
            </summary>
            <param name="threadId">The thread id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.JoinThreadAsync(System.UInt64)">
            <summary>
            Joins the thread.
            </summary>
            <param name="channelId">The channel id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.LeaveThreadAsync(System.UInt64)">
            <summary>
            Leaves the thread.
            </summary>
            <param name="channelId">The channel id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.AddThreadMemberAsync(System.UInt64,System.UInt64)">
            <summary>
            Adds a thread member.
            </summary>
            <param name="channelId">The channel id to add the member to.</param>
            <param name="userId">The user id to add.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetThreadMemberAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a thread member.
            </summary>
            <param name="channelId">The channel id to get the member from.</param>
            <param name="userId">The user id to get.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.RemoveThreadMemberAsync(System.UInt64,System.UInt64)">
            <summary>
            Removes a thread member.
            </summary>
            <param name="channelId">The channel id to remove the member from.</param>
            <param name="userId">The user id to remove.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetThreadMembersAsync(System.UInt64)">
            <summary>
            Gets the thread members.
            </summary>
            <param name="threadId">The thread id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetActiveThreadsAsync(System.UInt64)">
            <summary>
            Gets the active threads in a guild.
            </summary>
            <param name="guildId">The guild id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetJoinedPrivateArchivedThreadsAsync(System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.Int32})">
            <summary>
            Gets the joined private archived threads in a channel.
            </summary>
            <param name="channelId">The channel id.</param>
            <param name="before">Get threads before snowflake.</param>
            <param name="limit">Limit the results.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetPublicArchivedThreadsAsync(System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.Int32})">
            <summary>
            Gets the public archived threads in a channel.
            </summary>
            <param name="channelId">The channel id.</param>
            <param name="before">Get threads before snowflake.</param>
            <param name="limit">Limit the results.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetPrivateArchivedThreadsAsync(System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.Int32})">
            <summary>
            Gets the private archived threads in a channel.
            </summary>
            <param name="channelId">The channel id.</param>
            <param name="before">Get threads before snowflake.</param>
            <param name="limit">Limit the results.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyThreadAsync(System.UInt64,System.String,DisCatSharp.Entities.Optional{System.Nullable{System.Boolean}},DisCatSharp.Entities.Optional{System.Nullable{System.Boolean}},DisCatSharp.Entities.Optional{System.Nullable{System.Int32}},DisCatSharp.Entities.Optional{System.Nullable{DisCatSharp.ThreadAutoArchiveDuration}},DisCatSharp.Entities.Optional{System.Nullable{System.Boolean}},System.String)">
            <summary>
            Modifies a thread.
            </summary>
            <param name="threadId">The thread to modify.</param>
            <param name="name">The new name.</param>
            <param name="locked">The new locked state.</param>
            <param name="archived">The new archived state.</param>
            <param name="perUserRateLimit">The new per user rate limit.</param>
            <param name="autoArchiveDuration">The new auto archive duration.</param>
            <param name="invitable">The new user invitable state.</param>
            <param name="reason">The reason for the modification.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteThreadAsync(System.UInt64,System.String)">
            <summary>
            Deletes a thread.
            </summary>
            <param name="threadId">The thread to delete.</param>
            <param name="reason">The reason for deletion.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildEmojisAsync(System.UInt64)">
            <summary>
            Gets the guild emojis async.
            </summary>
            <param name="guildId">The guild_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildEmojiAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets the guild emoji async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="emojiId">The emoji_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildEmojiAsync(System.UInt64,System.String,System.String,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Creates the guild emoji async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="name">The name.</param>
            <param name="imageb64">The imageb64.</param>
            <param name="roles">The roles.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildEmojiAsync(System.UInt64,System.UInt64,System.String,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Modifies the guild emoji async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="emojiId">The emoji_id.</param>
            <param name="name">The name.</param>
            <param name="roles">The roles.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteGuildEmojiAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes the guild emoji async.
            </summary>
            <param name="guildId">The guild_id.</param>
            <param name="emojiId">The emoji_id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetStickerAsync(System.UInt64)">
            <summary>
            Gets a sticker.
            </summary>
            <param name="stickerId">The sticker id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetStickerPacksAsync">
            <summary>
            Gets the sticker packs.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildStickersAsync(System.UInt64)">
            <summary>
            Gets the guild stickers.
            </summary>
            <param name="guildId">The guild id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildStickerAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a guild sticker.
            </summary>
            <param name="guildId">The guild id.</param>
            <param name="stickerId">The sticker id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildStickerAsync(System.UInt64,System.String,System.String,System.String,DisCatSharp.Entities.DiscordMessageFile,System.String)">
            <summary>
            Creates the guild sticker.
            </summary>
            <param name="guildId">The guild id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="tags">The tags.</param>
            <param name="file">The file.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.ModifyGuildStickerAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},System.String)">
            <summary>
            Modifies the guild sticker.
            </summary>
            <param name="guildId">The guild id.</param>
            <param name="stickerId">The sticker id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="tags">The tags.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteGuildStickerAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes the guild sticker async.
            </summary>
            <param name="guildId">The guild id.</param>
            <param name="stickerId">The sticker id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGlobalApplicationCommandsAsync(System.UInt64,System.Boolean)">
            <summary>
            Gets the global application commands.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="withLocalizations">Whether to get the full localization dict.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.BulkOverwriteGlobalApplicationCommandsAsync(System.UInt64,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommand})">
            <summary>
            Bulk overwrites the global application commands.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGlobalApplicationCommandAsync(System.UInt64,DisCatSharp.Entities.DiscordApplicationCommand)">
            <summary>
            Creates a global application command.
            </summary>
            <param name="applicationId">The applicationid.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGlobalApplicationCommandAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a global application command.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="commandId">The command id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.EditGlobalApplicationCommandAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.Collections.Generic.IReadOnlyCollection{DisCatSharp.Entities.DiscordApplicationCommandOption}},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordApplicationCommandLocalization},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordApplicationCommandLocalization},DisCatSharp.Entities.Optional{DisCatSharp.Permissions},DisCatSharp.Entities.Optional{System.Boolean})">
            <summary>
            Edits a global application command.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="commandId">The command id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="options">The options.</param>
            <param name="nameLocalization">The localizations of the name.</param>
            <param name="descriptionLocalization">The localizations of the description.</param>
            <param name="defaultMemberPermission">The default member permissions.</param>
            <param name="dmPermission">The dm permission.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteGlobalApplicationCommandAsync(System.UInt64,System.UInt64)">
            <summary>
            Deletes a global application command.
            </summary>
            <param name="applicationId">The application_id.</param>
            <param name="commandId">The command_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildApplicationCommandsAsync(System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Gets the guild application commands.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="guildId">The guild id.</param>
            <param name="withLocalizations">Whether to get the full localization dict.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.BulkOverwriteGuildApplicationCommandsAsync(System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{DisCatSharp.Entities.DiscordApplicationCommand})">
            <summary>
            Bulk overwrites the guild application commands.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="guildId">The guild id.</param>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateGuildApplicationCommandAsync(System.UInt64,System.UInt64,DisCatSharp.Entities.DiscordApplicationCommand)">
            <summary>
            Creates a guild application command.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="guildId">The guild id.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildApplicationCommandAsync(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Gets a guild application command.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="guildId">The guild id.</param>
            <param name="commandId">The command id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.EditGuildApplicationCommandAsync(System.UInt64,System.UInt64,System.UInt64,DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.String},DisCatSharp.Entities.Optional{System.Collections.Generic.IReadOnlyCollection{DisCatSharp.Entities.DiscordApplicationCommandOption}},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordApplicationCommandLocalization},DisCatSharp.Entities.Optional{DisCatSharp.Entities.DiscordApplicationCommandLocalization},DisCatSharp.Entities.Optional{DisCatSharp.Permissions},DisCatSharp.Entities.Optional{System.Boolean})">
            <summary>
            Edits a guild application command.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="guildId">The guild id.</param>
            <param name="commandId">The command id.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="options">The options.</param>
            <param name="nameLocalization">The localizations of the name.</param>
            <param name="descriptionLocalization">The localizations of the description.</param>
            <param name="defaultMemberPermission">The default member permissions.</param>
            <param name="dmPermission">The dm permission.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteGuildApplicationCommandAsync(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Deletes a guild application command.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="guildId">The guild id.</param>
            <param name="commandId">The command id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildApplicationCommandPermissionsAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets the guild application command permissions.
            </summary>
            <param name="applicationId">The target application id.</param>
            <param name="guildId">The target guild id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGuildApplicationCommandPermissionAsync(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Gets a guild application command permission.
            </summary>
            <param name="applicationId">The target application id.</param>
            <param name="guildId">The target guild id.</param>
            <param name="commandId">The target command id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateInteractionResponseAsync(System.UInt64,System.String,DisCatSharp.InteractionResponseType,DisCatSharp.Entities.DiscordInteractionResponseBuilder)">
            <summary>
            Creates the interaction response.
            </summary>
            <param name="interactionId">The interaction id.</param>
            <param name="interactionToken">The interaction token.</param>
            <param name="type">The type.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateInteractionModalResponseAsync(System.UInt64,System.String,DisCatSharp.InteractionResponseType,DisCatSharp.Entities.DiscordInteractionModalBuilder)">
            <summary>
            Creates the interaction response.
            </summary>
            <param name="interactionId">The interaction id.</param>
            <param name="interactionToken">The interaction token.</param>
            <param name="type">The type.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetOriginalInteractionResponseAsync(System.UInt64,System.String)">
            <summary>
            Gets the original interaction response.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="interactionToken">The interaction token.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.EditOriginalInteractionResponseAsync(System.UInt64,System.String,DisCatSharp.Entities.DiscordWebhookBuilder)">
            <summary>
            Edits the original interaction response.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="interactionToken">The interaction token.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteOriginalInteractionResponseAsync(System.UInt64,System.String)">
            <summary>
            Deletes the original interaction response.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="interactionToken">The interaction token.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.CreateFollowupMessageAsync(System.UInt64,System.String,DisCatSharp.Entities.DiscordFollowupMessageBuilder)">
            <summary>
            Creates the followup message.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="interactionToken">The interaction token.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetFollowupMessageAsync(System.UInt64,System.String,System.UInt64)">
            <summary>
            Gets the followup message.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="interactionToken">The interaction token.</param>
            <param name="messageId">The message id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.EditFollowupMessageAsync(System.UInt64,System.String,System.UInt64,DisCatSharp.Entities.DiscordWebhookBuilder)">
            <summary>
            Edits the followup message.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="interactionToken">The interaction token.</param>
            <param name="messageId">The message id.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.DeleteFollowupMessageAsync(System.UInt64,System.String,System.UInt64)">
            <summary>
            Deletes the followup message.
            </summary>
            <param name="applicationId">The application id.</param>
            <param name="interactionToken">The interaction token.</param>
            <param name="messageId">The message id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetCurrentApplicationInfoAsync">
            <summary>
            Gets the current application info async.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetApplicationInfoAsync(System.UInt64)">
            <summary>
            Gets the application info async.
            </summary>
            <param name="applicationId">The application_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetApplicationInfoAsync(System.String)">
            <summary>
            Gets the application info async.
            </summary>
            <param name="applicationId">The application_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetApplicationAssetsAsync(DisCatSharp.Entities.DiscordApplication)">
            <summary>
            Gets the application assets async.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="M:DisCatSharp.Net.DiscordApiClient.GetGatewayInfoAsync">
            <summary>
            Gets the gateway info async.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Endpoints">
            <summary>
            The discord endpoints.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.BASE_URI">
            <summary>
            The base discord api uri.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.CANARY_URI">
            <summary>
            The base discord canary api uri.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.PTB_URI">
            <summary>
            The base discord ptb api uri.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.OAUTH2">
            <summary>
            The oauth2 endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.AUTHORIZE">
            <summary>
            The oauth2 authorize endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.APPLICATIONS">
            <summary>
            The applications endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.REACTIONS">
            <summary>
            The message reactions endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.ME">
            <summary>
            The self (@me) endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.ORIGINAL">
            <summary>
            The @original endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.PERMISSIONS">
            <summary>
            The permissions endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.RECIPIENTS">
            <summary>
            The recipients endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.BULK_DELETE">
            <summary>
            The bulk-delete endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.INTEGRATIONS">
            <summary>
            The integrations endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.SYNC">
            <summary>
            The sync endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.PRUNE">
            <summary>
            The prune endpoint.
            Used for user removal.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.REGIONS">
            <summary>
            The regions endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.CONNECTIONS">
            <summary>
            The connections endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.ICONS">
            <summary>
            The icons endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.GATEWAY">
            <summary>
            The gateway endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.AUTH">
            <summary>
            The oauth2 auth endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.LOGIN">
            <summary>
            The oauth2 login endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.CHANNELS">
            <summary>
            The channels endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.MESSAGES">
            <summary>
            The messages endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.PINS">
            <summary>
            The pinned messages endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.USERS">
            <summary>
            The users endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.GUILDS">
            <summary>
            The guilds endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.GUILD_DISCOVERY_SPLASHES">
            <summary>
            The guild discovery splash endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.SPLASHES">
            <summary>
            The guild splash endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.SEARCH">
            <summary>
            The search endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.INVITES">
            <summary>
            The invites endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.ROLES">
            <summary>
            The roles endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.MEMBERS">
            <summary>
            The members endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.TYPING">
            <summary>
            The typing endpoint.
            Triggers a typing indicator inside a channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.AVATARS">
            <summary>
            The avatars endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.BANS">
            <summary>
            The bans endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.WEBHOOKS">
            <summary>
            The webhook endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.SLACK">
            <summary>
            The slack endpoint.
            Used for <see cref="T:DisCatSharp.Entities.DiscordWebhook"/>.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.GITHUB">
            <summary>
            The github endpoint.
            Used for <see cref="T:DisCatSharp.Entities.DiscordWebhook"/>.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.BOT">
            <summary>
            The bot endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.VOICE">
            <summary>
            The voice endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.AUDIT_LOGS">
            <summary>
            The audit logs endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.ACK">
            <summary>
            The acknowledge endpoint.
            Indicates that a message is read.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.NICK">
            <summary>
            The nickname endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.ASSETS">
            <summary>
            The assets endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.EMBED">
            <summary>
            The embed endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.EMOJIS">
            <summary>
            The emojis endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.VANITY_URL">
            <summary>
            The vanity url endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.PREVIEW">
            <summary>
            The guild preview endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.FOLLOWERS">
            <summary>
            The followers endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.CROSSPOST">
            <summary>
            The crosspost endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.WIDGET">
            <summary>
            The guild widget endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.WIDGET_JSON">
            <summary>
            The guild widget json endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.WIDGET_PNG">
            <summary>
            The guild widget png endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.TEMPLATES">
            <summary>
            The templates endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.MEMBER_VERIFICATION">
            <summary>
            The member verification gate endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.COMMANDS">
            <summary>
            The slash commands endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.INTERACTIONS">
            <summary>
            The interactions endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.CALLBACK">
            <summary>
            The interaction/command callback endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.WELCOME_SCREEN">
            <summary>
            The welcome screen endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.VOICE_STATES">
            <summary>
            The voice states endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.STAGE_INSTANCES">
            <summary>
            The stage instances endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.THREADS">
            <summary>
            The threads endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.THREAD_PUBLIC">
            <summary>
            The public threads endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.THREAD_PRIVATE">
            <summary>
            The private threads endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.THREAD_ACTIVE">
            <summary>
            The active threads endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.THREAD_ARCHIVED">
            <summary>
            The archived threads endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.THREAD_MEMBERS">
            <summary>
            The thread members endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.SCHEDULED_EVENTS">
            <summary>
            The guild scheduled events endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.GUILD_EVENTS">
            <summary>
            The guild scheduled events cover image endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.STICKERS">
            <summary>
            The stickers endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.STICKERPACKS">
            <summary>
            The sticker packs endpoint.
            Global nitro sticker packs.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.STORE">
            <summary>
            The store endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.APP_ASSETS">
            <summary>
            The app assets endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.APP_ICONS">
            <summary>
            The app icons endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.TEAM_ICONS">
            <summary>
            The team icons endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.CHANNEL_ICONS">
            <summary>
            The channel icons endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.BANNERS">
            <summary>
            The user banners endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.STICKER_APPLICATION">
            <summary>
            The sticker endpoint.
            This endpoint is the static nitro sticker application.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.ROLE_SUBSCRIPTIONS">
            <summary>
            The role subscription endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.GROUP_LISTINGS">
            <summary>
            The group listings endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.SUBSCRIPTION_LISTINGS">
            <summary>
            The subscription listings endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.DIRECTORY_ENTRIES">
            <summary>
            The directory entries endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.COUNTS">
            <summary>
            The counts endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.LIST">
            <summary>
            The list endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.ROLE_ICONS">
            <summary>
            The role icons endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.ACTIVITIES">
            <summary>
            The activities endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.CONFIG">
            <summary>
            The config endpoint.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Endpoints.EPHEMERAL_ATTACHMENTS">
            <summary>
            The ephemeral attachments endpoint.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.IpEndpoint">
            <summary>
            Represents a network connection IP endpoint.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.IpEndpoint.Address">
            <summary>
            Gets or sets the hostname associated with this endpoint.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.IpEndpoint.Port">
            <summary>
            Gets or sets the port associated with this endpoint.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.IpEndpoint.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new IP endpoint structure.
            </summary>
            <param name="address">IP address to connect to.</param>
            <param name="port">Port to use for connection.</param>
        </member>
        <member name="T:DisCatSharp.Net.MultipartWebRequest">
            <summary>
            Represents a multipart HTTP request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.MultipartWebRequest.Values">
            <summary>
            Gets the dictionary of values attached to this request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.MultipartWebRequest.Files">
            <summary>
            Gets the dictionary of files attached to this request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.MultipartWebRequest.OverwriteFileIdStart">
            <summary>
            Overwrites the file id start.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.MultipartWebRequest.#ctor(DisCatSharp.BaseDiscordClient,DisCatSharp.Net.RateLimitBucket,System.Uri,DisCatSharp.Net.RestRequestMethod,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyCollection{DisCatSharp.Entities.DiscordMessageFile},System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.MultipartWebRequest"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="bucket">The bucket.</param>
            <param name="url">The url.</param>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <param name="headers">The headers.</param>
            <param name="values">The values.</param>
            <param name="files">The files.</param>
            <param name="ratelimitWaitOverride">The ratelimit_wait_override.</param>
            <param name="overwriteFileIdStart">The file id start.</param>
        </member>
        <member name="T:DisCatSharp.Net.MultipartStickerWebRequest">
            <summary>
            Represents a multipart HTTP request for stickers.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.MultipartStickerWebRequest.File">
            <summary>
            Gets the file.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.MultipartStickerWebRequest.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.MultipartStickerWebRequest.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.MultipartStickerWebRequest.Tags">
            <summary>
            Gets the tags.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.MultipartStickerWebRequest.#ctor(DisCatSharp.BaseDiscordClient,DisCatSharp.Net.RateLimitBucket,System.Uri,DisCatSharp.Net.RestRequestMethod,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},DisCatSharp.Entities.DiscordMessageFile,System.String,System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.MultipartStickerWebRequest"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="bucket">The bucket.</param>
            <param name="url">The url.</param>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <param name="headers">The headers.</param>
            <param name="file">The file.</param>
            <param name="name">The sticker name.</param>
            <param name="tags">The sticker tag.</param>
            <param name="description">The sticker description.</param>
            <param name="ratelimitWaitOverride">The ratelimit_wait_override.</param>
        </member>
        <member name="T:DisCatSharp.Net.RateLimitBucket">
            <summary>
            Represents a rate limit bucket.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.GuildId">
            <summary>
            Gets the Id of the guild bucket.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.ChannelId">
            <summary>
            Gets the Id of the channel bucket.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.WebhookId">
            <summary>
            Gets the ID of the webhook bucket.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RateLimitBucket.BucketId">
            <summary>
            Gets the Id of the ratelimit bucket.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.Hash">
            <summary>
            Gets or sets the ratelimit hash of this bucket.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.RouteHashes">
            <summary>
            Gets the past route hashes associated with this bucket.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.LastAttemptAt">
            <summary>
            Gets when this bucket was last called in a request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.Remaining">
            <summary>
            Gets the number of uses left before pre-emptive rate limit is triggered.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.Maximum">
            <summary>
            Gets the maximum number of uses within a single bucket.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.Reset">
            <summary>
            Gets the timestamp at which the rate limit resets.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.ResetAfter">
            <summary>
            Gets the time interval to wait before the rate limit resets.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.IsGlobal">
            <summary>
            Gets a value indicating whether the ratelimit global.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.Scope">
            <summary>
            Gets the ratelimit scope.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RateLimitBucket.ResetAfterOffset">
            <summary>
            Gets the time interval to wait before the rate limit resets as offset
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RateLimitBucket.IsUnlimited">
            <summary>
            Gets whether this bucket has it's ratelimit determined.
            <para>This will be <see langword="false"/> if the ratelimit is determined.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RateLimitBucket.LimitTesting">
            <summary>
            If the initial request for this bucket that is determining the rate limits is currently executing
            This is a int because booleans can't be accessed atomically
            0 => False, all other values => True
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RateLimitBucket.LimitTestFinished">
            <summary>
            Task to wait for the rate limit test to finish
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RateLimitBucket.LimitValid">
            <summary>
            If the rate limits have been determined
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RateLimitBucket.NextReset">
            <summary>
            Rate limit reset in ticks, UTC on the next response after the rate limit has been reset
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RateLimitBucket.LimitResetting">
            <summary>
            If the rate limit is currently being reset.
            This is a int because booleans can't be accessed atomically.
            0 => False, all other values => True
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.RateLimitBucket"/> class.
            </summary>
            <param name="hash">The hash.</param>
            <param name="guildId">The guild_id.</param>
            <param name="channelId">The channel_id.</param>
            <param name="webhookId">The webhook_id.</param>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.GenerateBucketId(System.String,System.String,System.String,System.String)">
            <summary>
            Generates an ID for this request bucket.
            </summary>
            <param name="hash">Hash for this bucket.</param>
            <param name="guildId">Guild Id for this bucket.</param>
            <param name="channelId">Channel Id for this bucket.</param>
            <param name="webhookId">Webhook Id for this bucket.</param>
            <returns>Bucket Id.</returns>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.GenerateHashKey(DisCatSharp.Net.RestRequestMethod,System.String)">
            <summary>
            Generates the hash key.
            </summary>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.GenerateUnlimitedHash(DisCatSharp.Net.RestRequestMethod,System.String)">
            <summary>
            Generates the unlimited hash.
            </summary>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.ToString">
            <summary>
            Returns a string representation of this bucket.
            </summary>
            <returns>String representation of this bucket.</returns>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.Equals(System.Object)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Net.RateLimitBucket"/> is equal to another object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Whether the object is equal to this <see cref="T:DisCatSharp.Net.RateLimitBucket"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.Equals(DisCatSharp.Net.RateLimitBucket)">
            <summary>
            Checks whether this <see cref="T:DisCatSharp.Net.RateLimitBucket"/> is equal to another <see cref="T:DisCatSharp.Net.RateLimitBucket"/>.
            </summary>
            <param name="e"><see cref="T:DisCatSharp.Net.RateLimitBucket"/> to compare to.</param>
            <returns>Whether the <see cref="T:DisCatSharp.Net.RateLimitBucket"/> is equal to this <see cref="T:DisCatSharp.Net.RateLimitBucket"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:DisCatSharp.Net.RateLimitBucket"/>.
            </summary>
            <returns>The hash code for this <see cref="T:DisCatSharp.Net.RateLimitBucket"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.TryResetLimitAsync(System.DateTimeOffset)">
            <summary>
            Sets remaining number of requests to the maximum when the ratelimit is reset
            </summary>
            <param name="now">The datetime offset.</param>
        </member>
        <member name="M:DisCatSharp.Net.RateLimitBucket.SetInitialValues(System.Int32,System.Int32,System.DateTimeOffset)">
            <summary>
            Sets the initial values.
            </summary>
            <param name="max">The max.</param>
            <param name="usesLeft">The uses left.</param>
            <param name="newReset">The new reset.</param>
        </member>
        <member name="T:DisCatSharp.Net.RestClient">
            <summary>
            Represents a client used to make REST requests.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RestClient.s_routeArgumentRegex">
            <summary>
            Gets the route argument regex.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RestClient.HttpClient">
            <summary>
            Gets the http client.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestClient._discord">
            <summary>
            Gets the discord client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RestClient.Debug">
            <summary>
            Gets a value indicating whether debug is enabled.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestClient._logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestClient._routesToHashes">
            <summary>
            Gets the routes to hashes.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestClient._hashesToBuckets">
            <summary>
            Gets the hashes to buckets.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestClient._requestQueue">
            <summary>
            Gets the request queue.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestClient._globalRateLimitEvent">
            <summary>
            Gets the global rate limit event.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestClient._useResetAfter">
            <summary>
            Gets a value indicating whether use reset after.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.#ctor(DisCatSharp.BaseDiscordClient)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.RestClient"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.#ctor(System.Net.IWebProxy,System.TimeSpan,System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.RestClient"/> class.
            This is for meta-clients, such as the webhook client.
            </summary>
            <param name="proxy">The proxy.</param>
            <param name="timeout">The timeout.</param>
            <param name="useRelativeRatelimit">Whether to use relative ratelimit.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.GetBucket(DisCatSharp.Net.RestRequestMethod,System.String,System.Object,System.String@)">
            <summary>
            Gets a ratelimit bucket.
            </summary>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <param name="routeParams">The route parameters.</param>
            <param name="url">The url.</param>
            <returns>A ratelimit bucket.</returns>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.ExecuteRequestAsync(DisCatSharp.Net.BaseRestRequest)">
            <summary>
            Executes the request.
            </summary>
            <param name="request">The request to be executed.</param>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.ExecuteRequestAsync(DisCatSharp.Net.BaseRestRequest,DisCatSharp.Net.RateLimitBucket,System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            Executes the request.
            This is to allow proper rescheduling of the first request from a bucket.
            </summary>
            <param name="request">The request to be executed.</param>
            <param name="bucket">The bucket.</param>
            <param name="ratelimitTcs">The ratelimit task completion source.</param>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.FailInitialRateLimitTest(DisCatSharp.Net.BaseRestRequest,System.Threading.Tasks.TaskCompletionSource{System.Boolean},System.Boolean)">
            <summary>
            Fails the initial rate limit test.
            </summary>
            <param name="request">The request.</param>
            <param name="ratelimitTcs">The ratelimit task completion source.</param>
            <param name="resetToInitial">Whether to reset to initial values.</param>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.WaitForInitialRateLimit(DisCatSharp.Net.RateLimitBucket)">
            <summary>
            Waits for the initial rate limit.
            </summary>
            <param name="bucket">The bucket.</param>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.BuildRequest(DisCatSharp.Net.BaseRestRequest)">
            <summary>
            Builds the request.
            </summary>
            <param name="request">The request.</param>
            <returns>A http request message.</returns>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.Handle429(DisCatSharp.Net.RestResponse,System.Threading.Tasks.Task@,System.Boolean@)">
            <summary>
            Handles the HTTP 429 status.
            </summary>
            <param name="response">The response.</param>
            <param name="waitTask">The wait task.</param>
            <param name="global">If true, global.</param>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.UpdateBucket(DisCatSharp.Net.BaseRestRequest,DisCatSharp.Net.RestResponse,System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            Updates the bucket.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
            <param name="ratelimitTcs">The ratelimit task completion source.</param>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.UpdateHashCaches(DisCatSharp.Net.BaseRestRequest,DisCatSharp.Net.RateLimitBucket,System.String)">
            <summary>
            Updates the hash caches.
            </summary>
            <param name="request">The request.</param>
            <param name="bucket">The bucket.</param>
            <param name="newHash">The new hash.</param>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.CleanupBucketsAsync">
            <summary>
            Cleans the buckets.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.RestClient.Dispose">
            <summary>
            Disposes the rest client.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.RestRequest">
            <summary>
            Represents a non-multipart HTTP request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RestRequest.Payload">
            <summary>
            Gets the payload sent with this request.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.RestRequest.#ctor(DisCatSharp.BaseDiscordClient,DisCatSharp.Net.RateLimitBucket,System.Uri,DisCatSharp.Net.RestRequestMethod,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.RestRequest"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="bucket">The bucket.</param>
            <param name="url">The url.</param>
            <param name="method">The method.</param>
            <param name="route">The route.</param>
            <param name="headers">The headers.</param>
            <param name="payload">The payload.</param>
            <param name="ratelimitWaitOverride">The ratelimit wait override.</param>
        </member>
        <member name="T:DisCatSharp.Net.RestRequestMethod">
            <summary>
            Defines the HTTP method to use for an HTTP request.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestRequestMethod.GET">
            <summary>
            Defines that the request is a GET request.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestRequestMethod.POST">
            <summary>
            Defines that the request is a POST request.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestRequestMethod.DELETE">
            <summary>
            Defines that the request is a DELETE request.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestRequestMethod.PATCH">
            <summary>
            Defines that the request is a PATCH request.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestRequestMethod.PUT">
            <summary>
            Defines that the request is a PUT request.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.RestRequestMethod.HEAD">
            <summary>
            Defines that the request is a HEAD request.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.RestResponse">
            <summary>
            Represents a response sent by the remote HTTP party.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RestResponse.ResponseCode">
            <summary>
            Gets the response code sent by the remote party.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RestResponse.Headers">
            <summary>
            Gets the headers sent by the remote party.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.RestResponse.Response">
            <summary>
            Gets the contents of the response sent by the remote party.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.RestResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.RestResponse"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.SessionBucket">
            <summary>
            Represents the bucket limits for identifying to Discord.
            <para>This is only relevant for clients that are manually sharding.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.SessionBucket.Total">
            <summary>
            Gets the total amount of sessions per token.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.SessionBucket.Remaining">
            <summary>
            Gets the remaining amount of sessions for this token.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.SessionBucket.ResetAfter">
            <summary>
            Gets the datetime when the <see cref="P:DisCatSharp.Net.SessionBucket.Remaining"/> will reset.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.SessionBucket.MaxConcurrency">
            <summary>
            Gets the maximum amount of shards that can boot concurrently.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.SessionBucket.ResetAfterInternal">
            <summary>
            Gets the reset after value.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.SessionBucket.ToString">
            <summary>
            Returns a readable session bucket string.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Serialization.DiscordComponentJsonConverter">
            <summary>
            Represents a discord component json converter.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Serialization.DiscordComponentJsonConverter.CanWrite">
            <summary>
            Whether the converter can write.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.DiscordComponentJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.DiscordComponentJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.DiscordComponentJsonConverter.CanConvert(System.Type)">
            <summary>
            Whether the json can convert.
            </summary>
            <param name="objectType">The object type.</param>
        </member>
        <member name="T:DisCatSharp.Net.Serialization.DiscordJson">
            <summary>
            Represents discord json.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.DiscordJson.SerializeObject(System.Object)">
            <summary>Serializes the specified object to a JSON string.</summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.DiscordJson.PopulateObject(Newtonsoft.Json.Linq.JToken,System.Object)">
            <summary>Populates an object with the values from a JSON node.</summary>
            <param name="value">The token to populate the object with.</param>
            <param name="target">The object to populate.</param>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.DiscordJson.ToDiscordObject``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts this token into an object, passing any properties through extra <see cref="T:Newtonsoft.Json.JsonConverter"/>s if needed.
            </summary>
            <param name="token">The token to convert</param>
            <typeparam name="T">Type to convert to</typeparam>
            <returns>The converted token</returns>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.DiscordJson.SerializeObjectInternal(System.Object,System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes the object.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="jsonSerializer">The json serializer.</param>
        </member>
        <member name="T:DisCatSharp.Net.Serialization.SnowflakeArrayAsDictionaryJsonConverter">
            <summary>
            Used for a <see cref="T:System.Collections.Generic.Dictionary`2"/> or <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> mapping
            <see cref="T:System.UInt64"/> to any class extending <see cref="T:DisCatSharp.Entities.SnowflakeObject"/> (or, as a special case,
            <see cref="T:DisCatSharp.Entities.DiscordVoiceState"/>). When serializing, discards the ulong
            keys and writes only the values. When deserializing, pulls the keys from <see cref="P:DisCatSharp.Entities.SnowflakeObject.Id"/> (or,
            in the case of <see cref="T:DisCatSharp.Entities.DiscordVoiceState"/>, <see cref="P:DisCatSharp.Entities.DiscordVoiceState.UserId"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.SnowflakeArrayAsDictionaryJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.SnowflakeArrayAsDictionaryJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:DisCatSharp.Net.Serialization.SnowflakeArrayAsDictionaryJsonConverter.CanConvert(System.Type)">
            <summary>
            Whether the snowflake can be converted.
            </summary>
            <param name="objectType">The object type.</param>
        </member>
        <member name="T:DisCatSharp.Net.Udp.UdpClientFactoryDelegate">
            <summary>
            Creates an instance of a UDP client implementation.
            </summary>
            <returns>Constructed UDP client implementation.</returns>
        </member>
        <member name="T:DisCatSharp.Net.Udp.BaseUdpClient">
            <summary>
            Represents a base abstraction for all UDP client implementations.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Udp.BaseUdpClient.Setup(DisCatSharp.Net.ConnectionEndpoint)">
            <summary>
            Configures the UDP client.
            </summary>
            <param name="endpoint">Endpoint that the client will be communicating with.</param>
        </member>
        <member name="M:DisCatSharp.Net.Udp.BaseUdpClient.SendAsync(System.Byte[],System.Int32)">
            <summary>
            Sends a datagram.
            </summary>
            <param name="data">Datagram.</param>
            <param name="dataLength">Length of the datagram.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Net.Udp.BaseUdpClient.ReceiveAsync">
            <summary>
            Receives a datagram.
            </summary>
            <returns>The received bytes.</returns>
        </member>
        <member name="M:DisCatSharp.Net.Udp.BaseUdpClient.Close">
            <summary>
            Closes and disposes the client.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.Udp.DcsUdpClient">
            <summary>
            The default, native-based UDP client implementation.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Udp.DcsUdpClient._client">
            <summary>
            Gets the client.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Udp.DcsUdpClient._endPoint">
            <summary>
            Gets the end point.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Udp.DcsUdpClient._packetQueue">
            <summary>
            Gets the packet queue.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Udp.DcsUdpClient._receiverTask">
            <summary>
            Gets the receiver task.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.Udp.DcsUdpClient._tokenSource">
            <summary>
            Gets the cancellation token source.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.Udp.DcsUdpClient.TOKEN">
            <summary>
            Gets the cancellation token.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Udp.DcsUdpClient.#ctor">
            <summary>
            Creates a new UDP client instance.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Udp.DcsUdpClient.Setup(DisCatSharp.Net.ConnectionEndpoint)">
            <summary>
            Configures the UDP client.
            </summary>
            <param name="endpoint">Endpoint that the client will be communicating with.</param>
        </member>
        <member name="M:DisCatSharp.Net.Udp.DcsUdpClient.SendAsync(System.Byte[],System.Int32)">
            <summary>
            Sends a datagram.
            </summary>
            <param name="data">Datagram.</param>
            <param name="dataLength">Length of the datagram.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Net.Udp.DcsUdpClient.ReceiveAsync">
            <summary>
            Receives a datagram.
            </summary>
            <returns>The received bytes.</returns>
        </member>
        <member name="M:DisCatSharp.Net.Udp.DcsUdpClient.Close">
            <summary>
            Closes and disposes the client.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Udp.DcsUdpClient.ReceiverLoopAsync">
            <summary>
            Receivers the loop.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.Udp.DcsUdpClient.CreateNew">
            <summary>
            Creates a new instance of <see cref="T:DisCatSharp.Net.Udp.BaseUdpClient"/>.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.WebSocket.WebSocketClientFactoryDelegate">
            <summary>
            Creates an instance of a WebSocket client implementation.
            </summary>
            <param name="proxy">Proxy settings to use for the new WebSocket client instance.</param>
            <param name="provider">Service provider.</param>
            <returns>Constructed WebSocket client implementation.</returns>
        </member>
        <member name="T:DisCatSharp.Net.WebSocket.IWebSocketClient">
            <summary>
            Represents a base abstraction for all WebSocket client implementations.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.WebSocket.IWebSocketClient.Proxy">
            <summary>
            Gets the proxy settings for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.WebSocket.IWebSocketClient.DefaultHeaders">
            <summary>
            Gets the collection of default headers to send when connecting to the remote endpoint.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.WebSocket.IWebSocketClient.ServiceProvider">
            <summary>
            <para>Gets the service provider.</para>
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.IWebSocketClient.ConnectAsync(System.Uri)">
            <summary>
            Connects to a specified remote WebSocket endpoint.
            </summary>
            <param name="uri">The URI of the WebSocket endpoint.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.IWebSocketClient.DisconnectAsync(System.Int32,System.String)">
            <summary>
            Disconnects the WebSocket connection.
            </summary>
            <param name="code">The code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.IWebSocketClient.SendMessageAsync(System.String)">
            <summary>
            Send a message to the WebSocket server.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.IWebSocketClient.AddDefaultHeader(System.String,System.String)">
            <summary>
            Adds a header to the default header collection.
            </summary>
            <param name="name">Name of the header to add.</param>
            <param name="value">Value of the header to add.</param>
            <returns>Whether the operation succeeded.</returns>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.IWebSocketClient.RemoveDefaultHeader(System.String)">
            <summary>
            Removes a header from the default header collection.
            </summary>
            <param name="name">Name of the header to remove.</param>
            <returns>Whether the operation succeeded.</returns>
        </member>
        <member name="E:DisCatSharp.Net.WebSocket.IWebSocketClient.Connected">
            <summary>
            Triggered when the client connects successfully.
            </summary>
        </member>
        <member name="E:DisCatSharp.Net.WebSocket.IWebSocketClient.Disconnected">
            <summary>
            Triggered when the client is disconnected.
            </summary>
        </member>
        <member name="E:DisCatSharp.Net.WebSocket.IWebSocketClient.MessageReceived">
            <summary>
            Triggered when the client receives a message from the remote party.
            </summary>
        </member>
        <member name="E:DisCatSharp.Net.WebSocket.IWebSocketClient.ExceptionThrown">
            <summary>
            Triggered when an error occurs in the client.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.WebSocket.PayloadDecompressor">
            <summary>
            Represents a payload decompressor.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.PayloadDecompressor.ZLIB_FLUSH">
            <summary>
            The zlib flush.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.PayloadDecompressor.ZLIB_PREFIX">
            <summary>
            The zlib prefix.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.WebSocket.PayloadDecompressor.CompressionLevel">
            <summary>
            Gets the compression level.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.PayloadDecompressor._compressedStream">
            <summary>
            Gets the compressed stream.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.PayloadDecompressor._decompressorStream">
            <summary>
            Gets the decompressor stream.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.PayloadDecompressor.#ctor(DisCatSharp.GatewayCompressionLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.WebSocket.PayloadDecompressor"/> class.
            </summary>
            <param name="compressionLevel">The compression level.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.PayloadDecompressor.TryDecompress(System.ArraySegment{System.Byte},System.IO.MemoryStream)">
            <summary>
            Tries the decompress.
            </summary>
            <param name="compressed">The compressed bytes.</param>
            <param name="decompressed">The decompressed memory stream.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.PayloadDecompressor.Dispose">
            <summary>
            Disposes the decompressor.
            </summary>
        </member>
        <member name="T:DisCatSharp.Net.WebSocket.SocketLock">
            <summary>
            Represents a socket lock.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.WebSocket.SocketLock.ApplicationId">
            <summary>
            Gets the application id.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.SocketLock._lockSemaphore">
            <summary>
            Gets the lock semaphore.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.SocketLock._timeoutCancelSource">
            <summary>
            Gets or sets the timeout cancel source.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.WebSocket.SocketLock.TIMEOUT_CANCEL">
            <summary>
            Gets the cancel token.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.SocketLock._unlockTask">
            <summary>
            Gets or sets the unlock task.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.SocketLock._maxConcurrency">
            <summary>
            Gets or sets the max concurrency.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.SocketLock.#ctor(System.UInt64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Net.WebSocket.SocketLock"/> class.
            </summary>
            <param name="appId">The app id.</param>
            <param name="maxConcurrency">The max concurrency.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.SocketLock.LockAsync">
            <summary>
            Locks the socket.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.SocketLock.UnlockAfter(System.TimeSpan)">
            <summary>
            Unlocks the socket after a given timespan.
            </summary>
            <param name="unlockDelay">The unlock delay.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.SocketLock.WaitAsync">
            <summary>
            Waits for the socket lock.
            </summary>
            <returns>A Task.</returns>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.SocketLock.Dispose">
            <summary>
            Disposes the socket lock.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.SocketLock.InternalUnlock(System.Threading.Tasks.Task)">
            <summary>
            Unlocks the socket.
            </summary>
            <param name="t">The task.</param>
        </member>
        <member name="T:DisCatSharp.Net.WebSocket.WebSocketClient">
            <summary>
            The default, native-based WebSocket client implementation.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.WebSocketClient.OUTGOING_CHUNK_SIZE">
            <summary>
            The outgoing chunk size.
            </summary>
        </member>
        <member name="F:DisCatSharp.Net.WebSocket.WebSocketClient.INCOMING_CHUNK_SIZE">
            <summary>
            The incoming chunk size.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.WebSocket.WebSocketClient.Proxy">
            <summary>
            Gets the proxy settings for this client.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.WebSocket.WebSocketClient.DefaultHeaders">
            <summary>
            Gets the collection of default headers to send when connecting to the remote endpoint.
            </summary>
        </member>
        <member name="P:DisCatSharp.Net.WebSocket.WebSocketClient.DisCatSharp#Net#WebSocket#IWebSocketClient#ServiceProvider">
            <summary>
            Gets or sets the service provider.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.#ctor(System.Net.IWebProxy,System.IServiceProvider)">
            <summary>
            Instantiates a new WebSocket client with specified proxy settings.
            </summary>
            <param name="proxy">Proxy settings for the client.</param>
            <param name="provider">Service provider.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.ConnectAsync(System.Uri)">
            <summary>
            Connects to a specified remote WebSocket endpoint.
            </summary>
            <param name="uri">The URI of the WebSocket endpoint.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.DisconnectAsync(System.Int32,System.String)">
            <summary>
            Disconnects the WebSocket connection.
            </summary>
            <param name="code">The code</param>
            <param name="message">The message</param>
            <created>Lala Sabathil,06.07.2021</created>
            <changed>Lala Sabathil,06.07.2021</changed>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.SendMessageAsync(System.String)">
            <summary>
            Send a message to the WebSocket server.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.AddDefaultHeader(System.String,System.String)">
            <summary>
            Adds a header to the default header collection.
            </summary>
            <param name="name">Name of the header to add.</param>
            <param name="value">Value of the header to add.</param>
            <returns>Whether the operation succeeded.</returns>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.RemoveDefaultHeader(System.String)">
            <summary>
            Removes a header from the default header collection.
            </summary>
            <param name="name">Name of the header to remove.</param>
            <returns>Whether the operation succeeded.</returns>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.Dispose">
            <summary>
            Disposes of resources used by this WebSocket client instance.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.ReceiverLoopAsync">
            <summary>
            Receivers the loop.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.CreateNew(System.Net.IWebProxy,System.IServiceProvider)">
            <summary>
            Creates a new instance of <see cref="T:DisCatSharp.Net.WebSocket.WebSocketClient"/>.
            </summary>
            <param name="proxy">Proxy to use for this client instance.</param>
            <param name="provider">Service provider.</param>
            <returns>An instance of <see cref="T:DisCatSharp.Net.WebSocket.WebSocketClient"/>.</returns>
        </member>
        <member name="E:DisCatSharp.Net.WebSocket.WebSocketClient.Connected">
            <summary>
            Triggered when the client connects successfully.
            </summary>
        </member>
        <member name="E:DisCatSharp.Net.WebSocket.WebSocketClient.Disconnected">
            <summary>
            Triggered when the client is disconnected.
            </summary>
        </member>
        <member name="E:DisCatSharp.Net.WebSocket.WebSocketClient.MessageReceived">
            <summary>
            Triggered when the client receives a message from the remote party.
            </summary>
        </member>
        <member name="E:DisCatSharp.Net.WebSocket.WebSocketClient.ExceptionThrown">
            <summary>
            Triggered when an error occurs in the client.
            </summary>
        </member>
        <member name="M:DisCatSharp.Net.WebSocket.WebSocketClient.EventErrorHandler``1(DisCatSharp.Common.Utilities.AsyncEvent{DisCatSharp.Net.WebSocket.WebSocketClient,``0},System.Exception,DisCatSharp.Common.Utilities.AsyncEventHandler{DisCatSharp.Net.WebSocket.WebSocketClient,``0},DisCatSharp.Net.WebSocket.WebSocketClient,``0)">
            <summary>
            Events the error handler.
            </summary>
            <param name="asyncEvent">The event.</param>
            <param name="ex">The exception.</param>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="T:DisCatSharp.ApplicationCommandOptionType">
            <summary>
            Represents the type of parameter when invoking an interaction.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.SubCommand">
            <summary>
            Whether this parameter is another subcommand.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.SubCommandGroup">
            <summary>
            Whether this parameter is apart of a subcommand group.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.String">
            <summary>
            Whether this parameter is a string.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.Integer">
            <summary>
            Whether this parameter is an integer.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.Boolean">
            <summary>
            Whether this parameter is a boolean.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.User">
            <summary>
            Whether this parameter is a Discord user.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.Channel">
            <summary>
            Whether this parameter is a Discord channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.Role">
            <summary>
            Whether this parameter is a Discord role.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.Mentionable">
            <summary>
            Whether this parameter is a mentionable.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.Number">
            <summary>
            Whether this parameter is a number.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandOptionType.Attachment">
            <summary>
            Whether this parameter is a attachment.
            </summary>
        </member>
        <member name="T:DisCatSharp.ApplicationCommandPermissionType">
            <summary>
            Represents the type of the application command permission.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandPermissionType.Role">
            <summary>
            The permission is bound to a role.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandPermissionType.User">
            <summary>
            The permission is bound to a user.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationCommandPermissionType.Channel">
            <summary>
            The permission is bound to a channel.
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.ApplicationCommandType">
            <summary>
            Represents the type of an <see cref="T:DisCatSharp.Entities.DiscordApplicationCommand"/>.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ApplicationCommandType.ChatInput">
            <summary>
            This command is registered as a slash-command, aka "Chat Input".
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ApplicationCommandType.User">
            <summary>
            This command is registered as a user context menu, and is applicable when interacting a user.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ApplicationCommandType.Message">
            <summary>
            This command is registered as a message context menu, and is applicable when interacting with a message.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ApplicationCommandType.AutoCompleteRequest">
            <summary>
            Inbound only: An auto-complete option is being interacted with.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ApplicationCommandType.ModalSubmit">
            <summary>
            Inbound only: A modal was submitted.
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.CoreDomain">
            <summary>
            Core Domains
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordMarketing">
            <summary>
            dis.gd
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordAdmin">
            <summary>
            discord.co
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.Discord">
            <summary>
            discord.com
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordDesign">
            <summary>
            discord.design
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordDev">
            <summary>
            discord.dev
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordShortlink">
            <summary>
            discord.gg
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordGift">
            <summary>
            discord.gift
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordMedia">
            <summary>
            discord.media
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordTemplate">
            <summary>
            discord.new
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordMerch">
            <summary>
            discord.store
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordTools">
            <summary>
            discord.tools
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordAppOld">
            <summary>
            discordapp.com
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordAppMediaProxy">
            <summary>
            discordapp.net
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordMerchOld">
            <summary>
            discordmerch.com
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordActivityAlt">
            <summary>
            discordpartygames.com
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordActivityAlt2">
            <summary>
            discord-activities.com
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordActivity">
            <summary>
            discordsays.com
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordStatus">
            <summary>
            discordstatus.com
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.CoreDomain.DiscordCdn">
            <summary>
            cdn.discordapp.com
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.OtherDomain">
            <summary>
            Other Domains
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OtherDomain.Airhorn">
            <summary>
            airhorn.solutions
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OtherDomain.AirhornAlt">
            <summary>
            airhornbot.com
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OtherDomain.AprilFools">
            <summary>
            bigbeans.solutions
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OtherDomain.HypeSquadMeme">
            <summary>
            watchanimeattheoffice.com
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.UnusedDomain">
            <summary>
            Unused Domains
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.UnusedDomain.DiscordAppIo">
            <summary>
            discordapp.io
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.UnusedDomain.DiscordCdnCom">
            <summary>
            discordcdn.com
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.DiscordDomain">
            <summary>
            Represents a discord domain.
            </summary>
        </member>
        <member name="M:DisCatSharp.Enums.DiscordDomain.GetDomain(System.Enum)">
            <summary>
            Gets a domain.
            Valid types: <see cref="T:DisCatSharp.Enums.CoreDomain"/>, <see cref="T:DisCatSharp.Enums.OtherDomain"/> and <see cref="T:DisCatSharp.Enums.UnusedDomain"/>.
            </summary>
            <param name="domainEnum">The domain type.</param>
            <returns>A DomainHelpAttribute.</returns>
        </member>
        <member name="T:DisCatSharp.Enums.DomainHelpAttribute">
            <summary>
            Defines a description and url for this domain.
            </summary>
        </member>
        <member name="P:DisCatSharp.Enums.DomainHelpAttribute.Description">
            <summary>
            Gets the Description for this domain.
            </summary>
        </member>
        <member name="P:DisCatSharp.Enums.DomainHelpAttribute.Uri">
            <summary>
            Gets the Uri for this domain.
            </summary>
        </member>
        <member name="P:DisCatSharp.Enums.DomainHelpAttribute.Domain">
            <summary>
            Gets the Domain for this domain.
            </summary>
        </member>
        <member name="P:DisCatSharp.Enums.DomainHelpAttribute.Url">
            <summary>
            Gets the Url for this domain.
            </summary>
        </member>
        <member name="M:DisCatSharp.Enums.DomainHelpAttribute.#ctor(System.String,System.String)">
            <summary>
            Defines a description and URIs for this domain.
            </summary>
            <param name="desc">Description for this domain.</param>
            <param name="domain">Url for this domain.</param>
        </member>
        <member name="T:DisCatSharp.Enums.DiscordShortlink">
            <summary>
            Discord short links.
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.MemberFlags">
            <summary>
            Represents additional details of a member account.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.MemberFlags.None">
            <summary>
            This member has no flags.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.MemberFlags.DidRejoin">
            <summary>
            This member has joined and left the guild before.
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.RoleFlags">
            <summary>
            Represents additional details of a role.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.RoleFlags.None">
            <summary>
            This role has no flags.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.RoleFlags.InPrompt">
            <summary>
            This role is in a prompt.
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.ButtonStyle">
            <summary>
            Represents a button's style/color.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ButtonStyle.Primary">
            <summary>
            Blurple button.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ButtonStyle.Secondary">
            <summary>
            Grey button.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ButtonStyle.Success">
            <summary>
            Green button.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ButtonStyle.Danger">
            <summary>
            Red button.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ButtonStyle.Link">
            <summary>
            Link Button.
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.ComponentType">
            <summary>
            Represents a type of component.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ComponentType.ActionRow">
            <summary>
            A row of components.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ComponentType.Button">
            <summary>
            A button.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ComponentType.Select">
            <summary>
            A select menu.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.ComponentType.InputText">
            <summary>
            A input text.
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.TextComponentStyle">
            <summary>
            Represents a button's style/color.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.TextComponentStyle.Small">
            <summary>
            A small text input.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.TextComponentStyle.Paragraph">
            <summary>
            A paragraph text input.
            </summary>
        </member>
        <member name="T:DisCatSharp.Enums.OAuth">
            <summary>
            The oauth scopes.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuth.BOT_DEFAULT">
            <summary>
            The default scopes for bots.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuth.BOT_MINIMAL">
            <summary>
            The bot minimal scopes.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuth.BOT_ONLY">
            <summary>
            The bot only scope.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuth.IDENTIFY_BASIC">
            <summary>
            The basic identify scopes.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuth.IDENTIFY_EXTENDED">
            <summary>
            The extended identify scopes.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuth.ALL">
            <summary>
            All scopes for bots and identify.
            </summary>
        </member>
        <member name="M:DisCatSharp.Enums.OAuth.ResolveScopes(DisCatSharp.Enums.OAuthScopes)">
            <summary>
            The oauth scope.
            </summary>
            <summary>
            Resolves the scopes.
            </summary>
            <param name="scope">The scope.</param>
            <returns>A string representing the scopes.</returns>
        </member>
        <member name="T:DisCatSharp.Enums.OAuthScopes">
            <summary>
            The oauth scopes.
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuthScopes.BOT_DEFAULT">
            <summary>
            Scopes: bot applications.commands (Excluding applications.commands.permissions.update for now)
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuthScopes.BOT_MINIMAL">
            <summary>
            Scopes: bot applications.commands
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuthScopes.BOT_ONLY">
            <summary>
            Scopes: bot
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuthScopes.IDENTIFY_BASIC">
            <summary>
            Scopes: identify email
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuthScopes.IDENTIFY_EXTENDED">
            <summary>
            Scopes: identify email guilds connections
            </summary>
        </member>
        <member name="F:DisCatSharp.Enums.OAuthScopes.ALL">
            <summary>
            Scopes: bot applications.commands applications.commands.permissions.update identify email guilds connections
            </summary>
        </member>
        <member name="T:DisCatSharp.ApplicationFlags">
            <summary>
            Represents additional details of an application.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.EmbeddedReleased">
            <summary>
            The application is embedded and can be used by users.
            This was introdruced to avoid users using in-dev apps.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.ManagedEmoji">
            <summary>
            The application is a managed emoji.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.GroupDmCreate">
            <summary>
            The application can create group dms.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.RpcHasConnected">
            <summary>
            The application has connected to RPC.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.GatewayPresence">
            <summary>
            The application can track presence data.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.GatewayPresenceLimited">
            <summary>
            The application can track presence data (limited).
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.GatewayGuildMembers">
            <summary>
            The application can track guild members.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.GatewayGuildMembersLimited">
            <summary>
            The application can track guild members (limited).
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.VerificationPendingGuildLimit">
            <summary>
            The application can track pending guild member verifications (limited).
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.Embedded">
            <summary>
            The application is embedded.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.GatewayMessageContent">
            <summary>
            The application can track message content.
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.GatewayMessageContentLimited">
            <summary>
            The application can track message content (limited).
            </summary>
        </member>
        <member name="F:DisCatSharp.ApplicationFlags.EmbeddedFirstParty">
            <summary>
            Related to embedded applications.
            </summary>
        </member>
        <member name="T:DisCatSharp.ChannelFlags">
            <summary>
            Represents a channel's flags.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelFlags.RemovedFromHome">
            <summary>
            Indicates that this channel is removed from the guilds home feed.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelFlags.Pinned">
            <summary>
            Indicates that this thread is pinned to the top of its parent forum channel.
            Forum channel thread only.
            </summary>
        </member>
        <member name="T:DisCatSharp.ChannelType">
            <summary>
            Represents a channel's type.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.Text">
            <summary>
            Indicates that this is a text channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.Private">
            <summary>
            Indicates that this is a private channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.Voice">
            <summary>
            Indicates that this is a voice channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.Group">
            <summary>
            Indicates that this is a group direct message channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.Category">
            <summary>
            Indicates that this is a channel category.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.News">
            <summary>
            Indicates that this is a news channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.Store">
            <summary>
            Indicates that this is a store channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.NewsThread">
            <summary>
            Indicates that this is a temporary sub-channel within a news channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.PublicThread">
            <summary>
            Indicates that this is a temporary sub-channel within a text channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.PrivateThread">
            <summary>
            Indicates that this is a temporary sub-channel within a text channel that is only viewable
            by those invited and those with the MANAGE_THREADS permission.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.Stage">
            <summary>
            Indicates that this is a stage channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.GuildDirectory">
            <summary>
            Indicates that this is a guild directory channel.
            This is used for hub guilds (feature for schools).
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.Forum">
            <summary>
            Indicates that this is a guild forum channel (Threads only channel).
            </summary>
        </member>
        <member name="F:DisCatSharp.ChannelType.Unknown">
            <summary>
            Indicates unknown channel type.
            </summary>
        </member>
        <member name="T:DisCatSharp.DirectoryCategory">
            <summary>
            Represents a directory entries primary category type.
            </summary>
        </member>
        <member name="F:DisCatSharp.DirectoryCategory.Clubs">
            <summary>
            Indicates that this entry falls under the category Clubs.
            </summary>
        </member>
        <member name="F:DisCatSharp.DirectoryCategory.Classes">
            <summary>
            Indicates that this entry falls under the category Classes.
            </summary>
        </member>
        <member name="F:DisCatSharp.DirectoryCategory.SocialAndStudy">
            <summary>
            Indicates that this entry falls under the category Social and Study.
            </summary>
        </member>
        <member name="F:DisCatSharp.DirectoryCategory.MajorsAndSubjects">
            <summary>
            Indicates that this entry falls under the category Majors and Subjects.
            </summary>
        </member>
        <member name="F:DisCatSharp.DirectoryCategory.Miscellaneous">
            <summary>
            Indicates that this entry falls under the category Miscellaneous.
            </summary>
        </member>
        <member name="F:DisCatSharp.DirectoryCategory.Unknown">
            <summary>
            Indicates unknown category type.
            </summary>
        </member>
        <member name="T:DisCatSharp.OverwriteType">
            <summary>
            Represents a channel permission overwrite's type.
            </summary>
        </member>
        <member name="F:DisCatSharp.OverwriteType.Role">
            <summary>
            Specifies that this overwrite applies to a role.
            </summary>
        </member>
        <member name="F:DisCatSharp.OverwriteType.Member">
            <summary>
            Specifies that this overwrite applies to a member.
            </summary>
        </member>
        <member name="T:DisCatSharp.VideoQualityMode">
            <summary>
            Represents the video quality mode of a voice channel. This is applicable to voice channels only.
            </summary>
        </member>
        <member name="F:DisCatSharp.VideoQualityMode.Auto">
            <summary>
            Indicates that the video quality is automatically chosen, or there is no value set.
            </summary>
        </member>
        <member name="F:DisCatSharp.VideoQualityMode.Full">
            <summary>
            Indicates that the video quality is 720p.
            </summary>
        </member>
        <member name="T:DisCatSharp.GatewayCompressionLevel">
            <summary>
            Determines at which level should the WebSocket traffic be compressed.
            </summary>
        </member>
        <member name="F:DisCatSharp.GatewayCompressionLevel.None">
            <summary>
            Defines that traffic should not be compressed at all.
            </summary>
        </member>
        <member name="F:DisCatSharp.GatewayCompressionLevel.Payload">
            <summary>
            Defines that traffic should be compressed at payload level.
            </summary>
        </member>
        <member name="F:DisCatSharp.GatewayCompressionLevel.Stream">
            <summary>
            Defines that entire traffic stream should be compressed.
            </summary>
        </member>
        <member name="T:DisCatSharp.HubType">
            <summary>
            Represents a guilds hub type.
            </summary>
        </member>
        <member name="F:DisCatSharp.HubType.Default">
            <summary>
            Indicates that the hub is a default one.
            </summary>
        </member>
        <member name="F:DisCatSharp.HubType.HighSchool">
            <summary>
            Indicates that the hub is a high school.
            </summary>
        </member>
        <member name="F:DisCatSharp.HubType.College">
            <summary>
            Indicates that the hub is a college.
            </summary>
        </member>
        <member name="T:DisCatSharp.MembershipScreeningFieldType">
            <summary>
            Represents a membership screening field type
            </summary>
        </member>
        <member name="F:DisCatSharp.MembershipScreeningFieldType.Terms">
            <summary>
            Specifies the server rules
            </summary>
        </member>
        <member name="T:DisCatSharp.NsfwLevel">
            <summary>
            Represents a guild's content level.
            </summary>
        </member>
        <member name="F:DisCatSharp.NsfwLevel.Default">
            <summary>
            Indicates the guild has no special NSFW level.
            </summary>
        </member>
        <member name="F:DisCatSharp.NsfwLevel.Explicit">
            <summary>
            Indicates the guild has extremely suggestive or mature content that would only be suitable for users over 18
            </summary>
        </member>
        <member name="F:DisCatSharp.NsfwLevel.Safe">
            <summary>
            Indicates the guild has no content that could be deemed NSFW. It is SFW.
            </summary>
        </member>
        <member name="F:DisCatSharp.NsfwLevel.Age_Restricted">
            <summary>
            Indicates the guild has mildly NSFW content that may not be suitable for users under 18.
            </summary>
        </member>
        <member name="T:DisCatSharp.PremiumTier">
            <summary>
            Represents a server's premium tier.
            </summary>
        </member>
        <member name="F:DisCatSharp.PremiumTier.None">
            <summary>
            Indicates that this server was not boosted.
            </summary>
        </member>
        <member name="F:DisCatSharp.PremiumTier.TierOne">
            <summary>
            Indicates that this server was boosted two times.
            </summary>
        </member>
        <member name="F:DisCatSharp.PremiumTier.TierTwo">
            <summary>
            Indicates that this server was boosted seven times.
            </summary>
        </member>
        <member name="F:DisCatSharp.PremiumTier.TierThree">
            <summary>
            Indicates that this server was boosted fourteen times.
            </summary>
        </member>
        <member name="F:DisCatSharp.PremiumTier.Unknown">
            <summary>
            Indicates an unknown premium tier.
            </summary>
        </member>
        <member name="T:DisCatSharp.PriceTierType">
            <summary>
            Represents a price tier type.
            </summary>
        </member>
        <member name="F:DisCatSharp.PriceTierType.GuildRoleSubscriptions">
            <summary>
            Indicates that this is a role subscription.
            </summary>
        </member>
        <member name="T:DisCatSharp.SystemChannelFlagsExtension">
            <summary>
            Represents a system channel flags extension.
            </summary>
        </member>
        <member name="M:DisCatSharp.SystemChannelFlagsExtension.HasSystemChannelFlag(DisCatSharp.SystemChannelFlags,DisCatSharp.SystemChannelFlags)">
            <summary>
            Calculates whether these system channel flags contain a specific flag.
            </summary>
            <param name="baseFlags">The existing flags.</param>
            <param name="flag">The flag to search for.</param>
            <returns></returns>
        </member>
        <member name="T:DisCatSharp.SystemChannelFlags">
            <summary>
            Represents settings for a guild's system channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.SystemChannelFlags.SuppressJoinNotifications">
            <summary>
            Member join messages are disabled.
            </summary>
        </member>
        <member name="F:DisCatSharp.SystemChannelFlags.SuppressPremiumSubscriptions">
            <summary>
            Server boost messages are disabled.
            </summary>
        </member>
        <member name="F:DisCatSharp.SystemChannelFlags.SuppressGuildReminderNotifications">
            <summary>
            Server setup tips are disabled.
            </summary>
        </member>
        <member name="F:DisCatSharp.SystemChannelFlags.SuppressJoinNotificationReplies">
            <summary>
            Suppress member join sticker replies.
            </summary>
        </member>
        <member name="F:DisCatSharp.SystemChannelFlags.SuppressRoleSubbscriptionPurchaseNotification">
            <summary>
            Role subscription purchase messages are disabled.
            </summary>
        </member>
        <member name="F:DisCatSharp.SystemChannelFlags.SuppressRoleSubbscriptionPurchaseNotificationReplies">
            <summary>
            Suppress role subscription purchase sticker replies.
            </summary>
        </member>
        <member name="T:DisCatSharp.InteractionResponseType">
            <summary>
            Represents the type of interaction response
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionResponseType.Pong">
            <summary>
            Acknowledges a Ping.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionResponseType.ChannelMessageWithSource">
            <summary>
            Responds to the interaction with a message.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionResponseType.DeferredChannelMessageWithSource">
            <summary>
            Acknowledges an interaction to edit to a response later. The user sees a "thinking" state.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionResponseType.DeferredMessageUpdate">
            <summary>
            Acknowledges a component interaction to allow a response later.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionResponseType.UpdateMessage">
            <summary>
            Responds to a component interaction by editing the message it's attached to.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionResponseType.AutoCompleteResult">
            <summary>
            Responds to an auto-complete request.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionResponseType.Modal">
            <summary>
            Responds to the interaction with a modal.
            </summary>
        </member>
        <member name="T:DisCatSharp.InteractionType">
            <summary>
            Represents the type of interaction used.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionType.Ping">
            <summary>
            Sent when registering an HTTP interaction endpoint with Discord. Must be replied to with a Pong.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionType.ApplicationCommand">
            <summary>
            An application command.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionType.Component">
            <summary>
            A component.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionType.AutoComplete">
            <summary>
            An autocomplete field.
            </summary>
        </member>
        <member name="F:DisCatSharp.InteractionType.ModalSubmit">
            <summary>
            A modal component.
            </summary>
        </member>
        <member name="T:DisCatSharp.InviteType">
            <summary>
            Represents the invite type .
            </summary>
        </member>
        <member name="F:DisCatSharp.InviteType.Guild">
            <summary>
            Represents a guild invite.
            </summary>
        </member>
        <member name="F:DisCatSharp.InviteType.GroupDm">
            <summary>
            Represents a group dm invite.
            </summary>
        </member>
        <member name="F:DisCatSharp.InviteType.User">
            <summary>
            Represents a friend invite.
            </summary>
        </member>
        <member name="T:DisCatSharp.TargetActivity">
            <summary>
            Represents the activity this invite is for.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.None">
            <summary>
            Represents no embedded application.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.Betrayal">
            <summary>
            Represents the embedded application Betrayal.io.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.ChessInThePark">
            <summary>
            Represents the embedded application Chess in the park.
            Dev?
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.DoodleCrew">
            <summary>
            Represents the embedded application Doodle Crew.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.Fishington">
            <summary>
            Represents the embedded application Fishington.io.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.LetterTile">
            <summary>
            Represents the embedded application Letter Tile.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.PokerNight">
            <summary>
            Represents the embedded application Poker Night.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.SpellCast">
            <summary>
            Represents the embedded application Spell Cast.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.WatchTogether">
            <summary>
            Represents the embedded application Watch Together.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.WatchTogetherDev">
            <summary>
            Represents the embedded application Watch Together.
            This is the dev version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.WordSnacks">
            <summary>
            Represents the embedded application Word Snacks.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.YouTubeTogether">
            <summary>
            Represents the embedded application YouTube Together.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.Awkword">
            <summary>
            Represents the embedded application Awkword.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.Putts">
            <summary>
            Represents the embedded application Putts.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG3Prod">
            <summary>
            Represents the embedded application CG3 Prod.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG4Prod">
            <summary>
            Represents the embedded application CG4 Prod.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.SketchyArtist">
            <summary>
            Represents the embedded application Sketchy Artist.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.SketchyArtistDev">
            <summary>
            Represents the embedded application Sketchy Artist.
            This is the dev version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.WordSnacksDev">
            <summary>
            Represents the embedded application Word Snacks.
            This is the dev version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.DoodleCrewDev">
            <summary>
            Represents the embedded application Doodle Crew.
            This is the dev version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.ChessInTheParkDev">
            <summary>
            Represents the embedded application Chess in the park.
            This is the dev version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG3Dev">
            <summary>
            Represents the embedded application CG3 Dev.
            This is the dev version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG4kDev">
            <summary>
            Represents the embedded application CG4 Dev.
            This is the dev version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.DecodersDev">
            <summary>
            Represents the embedded application Decoders.
            This is the dev version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.PNStaging">
            <summary>
            Represents the embedded application PN.
            This is the staging version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG2Staging">
            <summary>
            Represents the embedded application CG2.
            This is the staging version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG3Staging">
            <summary>
            Represents the embedded application CG3.
            This is the staging version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG4Staging">
            <summary>
            Represents the embedded application CG4.
            This is the staging version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.PokerQA">
            <summary>
            Represents the embedded application Poker.
            This is the QA version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG2QA">
            <summary>
            Represents the embedded application CG2.
            This is the QA version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG3QA">
            <summary>
            Represents the embedded application CG 3.
            This is the QA version.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetActivity.CG4QA">
            <summary>
            Represents the embedded application CG 4.
            This is the QA version.
            </summary>
        </member>
        <member name="T:DisCatSharp.TargetType">
            <summary>
            Represents the invite type .
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetType.Streaming">
            <summary>
            Represents a streaming invite.
            </summary>
        </member>
        <member name="F:DisCatSharp.TargetType.EmbeddedApplication">
            <summary>
            Represents a activity invite.
            </summary>
        </member>
        <member name="T:DisCatSharp.MentionType">
            <summary>
            Type of mention being made
            </summary>
        </member>
        <member name="F:DisCatSharp.MentionType.None">
            <summary>
            No mention (wtf?)
            </summary>
        </member>
        <member name="F:DisCatSharp.MentionType.Username">
            <summary>
            Mentioned Username
            </summary>
        </member>
        <member name="F:DisCatSharp.MentionType.Nickname">
            <summary>
            Mentioned Nickname
            </summary>
        </member>
        <member name="F:DisCatSharp.MentionType.Channel">
            <summary>
            Mentioned Channel
            </summary>
        </member>
        <member name="F:DisCatSharp.MentionType.Role">
            <summary>
            Mentioned Role
            </summary>
        </member>
        <member name="T:DisCatSharp.MessageActivityType">
            <summary>
            Indicates the type of MessageActivity for the Rich Presence.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageActivityType.Join">
            <summary>
            Invites the user to join.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageActivityType.Spectate">
            <summary>
            Invites the user to spectate.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageActivityType.Listen">
            <summary>
            Invites the user to listen.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageActivityType.JoinRequest">
            <summary>
            Allows the user to request to join.
            </summary>
        </member>
        <member name="T:DisCatSharp.MessageFlagExtensions">
            <summary>
            Represents a message flag extensions.
            </summary>
        </member>
        <member name="M:DisCatSharp.MessageFlagExtensions.HasMessageFlag(DisCatSharp.MessageFlags,DisCatSharp.MessageFlags)">
            <summary>
            Calculates whether these message flags contain a specific flag.
            </summary>
            <param name="baseFlags">The existing flags.</param>
            <param name="flag">The flags to search for.</param>
            <returns></returns>
        </member>
        <member name="T:DisCatSharp.MessageFlags">
            <summary>
            Represents additional features of a message.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageFlags.Crossposted">
            <summary>
            Whether this message is the original message that was published from a news channel to subscriber channels.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageFlags.IsCrosspost">
            <summary>
            Whether this message is crossposted (automatically posted in a subscriber channel).
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageFlags.SuppressedEmbeds">
            <summary>
            Whether any embeds in the message are hidden.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageFlags.SourceMessageDelete">
            <summary>
            The source message for this crosspost has been deleted.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageFlags.Urgent">
            <summary>
            The message came from the urgent message system.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageFlags.HasThread">
            <summary>
            The message has an associated thread, with the same id as the message.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageFlags.Ephemeral">
            <summary>
            The message is only visible to the user who invoked the interaction.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageFlags.Loading">
            <summary>
            The message is an interaction response and the bot is "thinking".
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageFlags.FailedToMentionSomeRolesInThread">
            <summary>
            The message is warning that some roles failed to mention in thread.
            </summary>
        </member>
        <member name="T:DisCatSharp.MessageType">
            <summary>
            Represents the type of a message.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.Default">
            <summary>
            Indicates a regular message.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.RecipientAdd">
            <summary>
            Message indicating a recipient was added to a group direct message or a thread channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.RecipientRemove">
            <summary>
            Message indicating a recipient was removed from a group direct message or a thread channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.Call">
            <summary>
            Message indicating a call.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.ChannelNameChange">
            <summary>
            Message indicating a group direct message or thread channel rename.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.ChannelIconChange">
            <summary>
            Message indicating a group direct message channel icon change.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.ChannelPinnedMessage">
            <summary>
            Message indicating a user pinned a message to a channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.GuildMemberJoin">
            <summary>
            Message indicating a guild member joined. Most frequently seen in newer, smaller guilds.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.UserPremiumGuildSubscription">
            <summary>
            Message indicating a member nitro boosted a guild.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.TierOneUserPremiumGuildSubscription">
            <summary>
            Message indicating a guild reached tier one of nitro boosts.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.TierTwoUserPremiumGuildSubscription">
            <summary>
            Message indicating a guild reached tier two of nitro boosts.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.TierThreeUserPremiumGuildSubscription">
            <summary>
            Message indicating a guild reached tier three of nitro boosts.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.ChannelFollowAdd">
            <summary>
            Message indicating a user followed a news channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.GuildStream">
            <summary>
            Message indicating a user is streaming in a guild.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.GuildDiscoveryDisqualified">
            <summary>
            Message indicating a guild was removed from guild discovery.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.GuildDiscoveryRequalified">
            <summary>
            Message indicating a guild was re-added to guild discovery.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.GuildDiscoveryGracePeriodInitialWarning">
            <summary>
            Message indicating that a guild has failed to meet guild discovery requirements for a week.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.GuildDiscoveryGracePeriodFinalWarning">
            <summary>
            Message indicating that a guild has failed to meet guild discovery requirements for 3 weeks.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.ThreadCreated">
            <summary>
            Message indicating a thread was created.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.Reply">
            <summary>
            Message indicating a user replied to another user.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.ChatInputCommand">
            <summary>
            Message indicating an slash command was invoked.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.ThreadStarterMessage">
            <summary>
            Message indicating a new was message sent as the first message in threads that are started from an existing message in the parent channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.GuildInviteReminder">
            <summary>
            Message reminding you to invite people to help you build the server.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.ContextMenuCommand">
            <summary>
            Message indicating an context menu command was invoked.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.AutoModerationAction">
            <summary>
            Message indicating the guilds automod acted.
            </summary>
        </member>
        <member name="F:DisCatSharp.MessageType.RoleSubscriptionPurchase">
            <summary>
            Message indicating that a member purchased a role subscription.
            </summary>
        </member>
        <member name="T:DisCatSharp.TimestampFormat">
            <summary>
            Denotes the type of formatting to use for timestamps.
            </summary>
        </member>
        <member name="F:DisCatSharp.TimestampFormat.ShortDate">
            <summary>
            A short date. e.g. 18/06/2021.
            </summary>
        </member>
        <member name="F:DisCatSharp.TimestampFormat.LongDate">
            <summary>
            A long date. e.g. 18 June 2021.
            </summary>
        </member>
        <member name="F:DisCatSharp.TimestampFormat.ShortDateTime">
            <summary>
            A short date and time. e.g. 18 June 2021 03:50.
            </summary>
        </member>
        <member name="F:DisCatSharp.TimestampFormat.LongDateTime">
            <summary>
            A long date and time. e.g. Friday 18 June 2021 03:50.
            </summary>
        </member>
        <member name="F:DisCatSharp.TimestampFormat.ShortTime">
            <summary>
            A short time. e.g. 03:50.
            </summary>
        </member>
        <member name="F:DisCatSharp.TimestampFormat.LongTime">
            <summary>
            A long time. e.g. 03:50:15.
            </summary>
        </member>
        <member name="F:DisCatSharp.TimestampFormat.RelativeTime">
            <summary>
            The time relative to the client. e.g. An hour ago.
            </summary>
        </member>
        <member name="T:DisCatSharp.PermissionMethods">
            <summary>
            Represents permission methods.
            </summary>
        </member>
        <member name="P:DisCatSharp.PermissionMethods.FullPerms">
            <summary>
            Gets the full permissions enum (long).
            </summary>
        </member>
        <member name="M:DisCatSharp.PermissionMethods.HasPermission(DisCatSharp.Permissions,DisCatSharp.Permissions)">
            <summary>
            Calculates whether this permission set contains the given permission.
            </summary>
            <param name="p">The permissions to calculate from</param>
            <param name="permission">permission you want to check</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.PermissionMethods.Grant(DisCatSharp.Permissions,DisCatSharp.Permissions)">
            <summary>
            Grants permissions.
            </summary>
            <param name="p">The permissions to add to.</param>
            <param name="grant">Permission to add.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.PermissionMethods.Revoke(DisCatSharp.Permissions,DisCatSharp.Permissions)">
            <summary>
            Revokes permissions.
            </summary>
            <param name="p">The permissions to take from.</param>
            <param name="revoke">Permission to take.</param>
            <returns></returns>
        </member>
        <member name="T:DisCatSharp.PermissionLevel">
            <summary>
            Whether a permission is allowed, denied or unset
            </summary>
        </member>
        <member name="F:DisCatSharp.PermissionLevel.Allowed">
            <summary>
            Said permission is Allowed
            </summary>
        </member>
        <member name="F:DisCatSharp.PermissionLevel.Denied">
            <summary>
            Said permission is Denied
            </summary>
        </member>
        <member name="F:DisCatSharp.PermissionLevel.Unset">
            <summary>
            Said permission is Unset
            </summary>
        </member>
        <member name="T:DisCatSharp.Permissions">
            <summary>
            Bitwise permission flags.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.None">
            <summary>
            Indicates no permissions given.
            This disallows users to run application command per default.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.All">
            <summary>
            Indicates all permissions are granted
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.CreateInstantInvite">
            <summary>
            Allows creation of instant channel invites.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.KickMembers">
            <summary>
            Allows kicking members.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.BanMembers">
            <summary>
            Allows banning and unbanning members.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.Administrator">
            <summary>
            Enables full access on a given guild. This also overrides other permissions.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ManageChannels">
            <summary>
            Allows managing channels.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ManageGuild">
            <summary>
            Allows managing the guild.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.AddReactions">
            <summary>
            Allows adding reactions to messages.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ViewAuditLog">
            <summary>
            Allows viewing audit log entries.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.PrioritySpeaker">
            <summary>
            Allows the use of priority speaker.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.Stream">
            <summary>
            Allows the user to go live.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.AccessChannels">
            <summary>
            Allows accessing text and voice channels. Disabling this permission hides channels.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.SendMessages">
            <summary>
            Allows sending messages (does not allow sending messages in threads).
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.SendTtsMessages">
            <summary>
            Allows sending text-to-speech messages.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ManageMessages">
            <summary>
            Allows managing messages of other users.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.EmbedLinks">
            <summary>
            Allows embedding content in messages.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.AttachFiles">
            <summary>
            Allows uploading files.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ReadMessageHistory">
            <summary>
            Allows reading message history.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.MentionEveryone">
            <summary>
            Allows using @everyone and @here mentions.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.UseExternalEmojis">
            <summary>
            Allows using emojis from external servers, such as twitch or nitro emojis.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.UseVoice">
            <summary>
            Allows connecting to voice chat.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.Speak">
            <summary>
            Allows speaking in voice chat.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.MuteMembers">
            <summary>
            Allows muting other members in voice chat.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.DeafenMembers">
            <summary>
            Allows deafening other members in voice chat.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.MoveMembers">
            <summary>
            Allows moving voice chat members.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.UseVoiceDetection">
            <summary>
            Allows using voice activation in voice chat. Revoking this will usage of push-to-talk.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ChangeNickname">
            <summary>
            Allows changing of own nickname.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ManageNicknames">
            <summary>
            Allows managing nicknames of other members.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ManageRoles">
            <summary>
            Allows managing roles in a guild.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ManageWebhooks">
            <summary>
            Allows managing webhooks in a guild.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ManageEmojisAndStickers">
            <summary>
            Allows managing guild emojis and stickers.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.UseApplicationCommands">
            <summary>
            Allows the user to use slash commands.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.RequestToSpeak">
            <summary>
            Allows for requesting to speak in stage channels.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ManageEvents">
            <summary>
            Allows managing guild events.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ManageThreads">
            <summary>
            Allows for deleting and archiving threads, and viewing all private threads.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.CreatePublicThreads">
            <summary>
            Allows for creating threads.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.CreatePrivateThreads">
            <summary>
            Allows for creating private threads.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.UseExternalStickers">
            <summary>
            Allows the usage of custom stickers from other servers.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.SendMessagesInThreads">
            <summary>
            Allows for sending messages in threads.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.StartEmbeddedActivities">
            <summary>
            Allows for launching activities (applications with the `EMBEDDED` flag) in a voice channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.Permissions.ModerateMembers">
            <summary>
            Allows to perform limited moderation actions (timeout).
            </summary>
        </member>
        <member name="T:DisCatSharp.PermissionStringAttribute">
            <summary>
            Defines a readable name for this permission.
            </summary>
        </member>
        <member name="P:DisCatSharp.PermissionStringAttribute.String">
            <summary>
            Gets the readable name for this permission.
            </summary>
        </member>
        <member name="M:DisCatSharp.PermissionStringAttribute.#ctor(System.String)">
            <summary>
            Defines a readable name for this permission.
            </summary>
            <param name="str">Readable name for this permission.</param>
        </member>
        <member name="T:DisCatSharp.ScheduledEventEntityType">
            <summary>
            Represents the entity type for a scheduled event.
            </summary>
        </member>
        <member name="F:DisCatSharp.ScheduledEventEntityType.StageInstance">
            <summary>
            Indicates that the events is hold in a stage instance.
            </summary>
        </member>
        <member name="F:DisCatSharp.ScheduledEventEntityType.Voice">
            <summary>
            Indicates that the events is hold in a voice channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.ScheduledEventEntityType.External">
            <summary>
            Indicates that the events is hold external.
            </summary>
        </member>
        <member name="T:DisCatSharp.ScheduledEventPrivacyLevel">
            <summary>
            Represents the privacy level for a guild scheduled event.
            </summary>
        </member>
        <member name="F:DisCatSharp.ScheduledEventPrivacyLevel.Public">
            <summary>
            Indicates that the guild scheduled event is public.
            </summary>
        </member>
        <member name="F:DisCatSharp.ScheduledEventPrivacyLevel.GuildOnly">
            <summary>
            Indicates that the the guild scheduled event is only accessible to guild members.
            </summary>
        </member>
        <member name="T:DisCatSharp.ScheduledEventStatus">
            <summary>
            Represents the status for a scheduled event.
            </summary>
        </member>
        <member name="F:DisCatSharp.ScheduledEventStatus.Scheduled">
            <summary>
            Indicates that the event is scheduled.
            </summary>
        </member>
        <member name="F:DisCatSharp.ScheduledEventStatus.Active">
            <summary>
            Indicates that the event is active.
            </summary>
        </member>
        <member name="F:DisCatSharp.ScheduledEventStatus.Completed">
            <summary>
            Indicates that the event is completed.
            </summary>
        </member>
        <member name="F:DisCatSharp.ScheduledEventStatus.Canceled">
            <summary>
            Indicates that the event is canceled.
            </summary>
        </member>
        <member name="T:DisCatSharp.StagePrivacyLevel">
            <summary>
            Represents the privacy level for a stage.
            </summary>
        </member>
        <member name="F:DisCatSharp.StagePrivacyLevel.Public">
            <summary>
            Indicates that the stage is public visible.
            </summary>
        </member>
        <member name="F:DisCatSharp.StagePrivacyLevel.GuildOnly">
            <summary>
            Indicates that the stage is only visible to guild members.
            </summary>
        </member>
        <member name="T:DisCatSharp.ThreadAutoArchiveDuration">
            <summary>
            Represents the auto-archive duration for a thread.
            </summary>
        </member>
        <member name="F:DisCatSharp.ThreadAutoArchiveDuration.OneHour">
            <summary>
            Indicates that the thread will be auto archived after one hour.
            </summary>
        </member>
        <member name="F:DisCatSharp.ThreadAutoArchiveDuration.OneDay">
            <summary>
            Indicates that the thread will be auto archived after one day / 24 hours.
            </summary>
        </member>
        <member name="F:DisCatSharp.ThreadAutoArchiveDuration.ThreeDays">
            <summary>
            Indicates that the thread will be auto archived after three days.
            </summary>
        </member>
        <member name="F:DisCatSharp.ThreadAutoArchiveDuration.OneWeek">
            <summary>
            Indicates that the thread will be auto archived after a week.
            </summary>
        </member>
        <member name="T:DisCatSharp.ThreadMemberFlags">
            <summary>
            Represents notification settings for a thread.
            </summary>
        </member>
        <member name="F:DisCatSharp.ThreadMemberFlags.HasInteracted">
            <summary>
            Indicates that the notification setting is set to has interacted.
            </summary>
        </member>
        <member name="F:DisCatSharp.ThreadMemberFlags.AllMessages">
            <summary>
            Indicates that the notification setting is set to all messages.
            </summary>
        </member>
        <member name="F:DisCatSharp.ThreadMemberFlags.OnlyMentions">
            <summary>
            Indicates that the notification setting is set to only mentions.
            </summary>
        </member>
        <member name="F:DisCatSharp.ThreadMemberFlags.None">
            <summary>
            Indicates that the notification setting is set to none.
            </summary>
        </member>
        <member name="T:DisCatSharp.TokenType">
            <summary>
            Represents the token type
            </summary>
        </member>
        <member name="F:DisCatSharp.TokenType.User">
            <summary>
            User token type
            </summary>
        </member>
        <member name="F:DisCatSharp.TokenType.Bot">
            <summary>
            Bot token type
            </summary>
        </member>
        <member name="F:DisCatSharp.TokenType.Bearer">
            <summary>
            Bearer token type (used for oAuth)
            </summary>
        </member>
        <member name="T:DisCatSharp.PremiumType">
            <summary>
            The type of Nitro subscription on a user's account.
            </summary>
        </member>
        <member name="F:DisCatSharp.PremiumType.None">
            <summary>
            User does not have any perks.
            </summary>
        </member>
        <member name="F:DisCatSharp.PremiumType.NitroClassic">
            <summary>
            Includes basic app perks like animated emojis and avatars.
            </summary>
        </member>
        <member name="F:DisCatSharp.PremiumType.Nitro">
            <summary>
            Includes all app perks.
            </summary>
        </member>
        <member name="T:DisCatSharp.UserFlags">
            <summary>
            Represents additional details of a users account.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.None">
            <summary>
            The user has no flags.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.Staff">
            <summary>
            The user is a Discord employee.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.Partner">
            <summary>
            The user is a Discord partner.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.HypeSquad">
            <summary>
            The user has the HypeSquad badge.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.BugHunterLevelOne">
            <summary>
            The user reached the first bug hunter tier.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.MfaSms">
            <summary>
            The user has SMS recovery for 2FA enabled.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.PremiumPromoDismissed">
            <summary>
            The user is marked as dismissed Nitro promotion
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.HouseBravery">
            <summary>
            The user is a member of house bravery.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.HouseBrilliance">
            <summary>
            The user is a member of house brilliance.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.HouseBalance">
            <summary>
            The user is a member of house balance.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.PremiumEarlySupporter">
            <summary>
            The user has the early supporter badge.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.TeamPseudoUser">
            <summary>
            User is a <see cref="T:DisCatSharp.Entities.DiscordTeam"/>.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.PartnerOrVerificationApplication">
            <summary>
            Relates to partner/verification applications.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.System">
            <summary>
            Whether the user is an official system user.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.HasUnreadUrgentMessages">
            <summary>
            Whether the user has unread system messages.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.BugHunterLevelTwo">
            <summary>
            The user reached the second bug hunter tier.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.UnderageDeleted">
            <summary>
            The user has a pending deletion for being underage in DOB prompt.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.VerifiedBot">
            <summary>
            The user is a verified bot.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.VerifiedDeveloper">
            <summary>
            The user is a verified bot developer.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.CertifiedModerator">
            <summary>
            The user is a discord certified moderator.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.BotHttpInteractions">
            <summary>
            The user is a bot and has set an interactions endpoint url.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.Spammer">
            <summary>
            The user is disabled for being a spammer.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.DisablePremium">
            <summary>
            Nitro is disabled for user.
            Used by discord staff instead of forcedNonPremium.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.PremiumDiscriminator">
            <summary>
            The user has a premium discriminator.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.UsedDesktopClient">
            <summary>
            The user has used the desktop client
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.UsedWebClient">
            <summary>
            The user has used the web client
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.UsedMobileClient">
            <summary>
            The user has used the mobile client
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.Disabled">
            <summary>
            The user is currently temporarily or permanently disabled.
            </summary>
        </member>
        <member name="F:DisCatSharp.UserFlags.VerifiedEmail">
            <summary>
            The user has a verified email.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ApplicationCommandEventArgs">
            <summary>
            Represents arguments for application command events.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ApplicationCommandEventArgs.Command">
            <summary>
            Gets the command that was modified.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ApplicationCommandEventArgs.Guild">
            <summary>
            Gets the optional guild of the command.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ApplicationCommandEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ApplicationCommandEventArgs"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="T:DisCatSharp.EventArgs.ApplicationCommandPermissionsUpdateEventArgs">
            <summary>
            Represents arguments for application command permissions update events.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ApplicationCommandPermissionsUpdateEventArgs.Permissions">
            <summary>
            Gets the application command permissions.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ApplicationCommandPermissionsUpdateEventArgs.Command">
            <summary>
            Gets the application command.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ApplicationCommandPermissionsUpdateEventArgs.ApplicationId">
            <summary>
            Gets the application id.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ApplicationCommandPermissionsUpdateEventArgs.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ApplicationCommandPermissionsUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ApplicationCommandPermissionsUpdateEventArgs"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildApplicationCommandCountEventArgs">
            <summary>
            Represents arguments for application command events.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildApplicationCommandCountEventArgs.SlashCommands">
            <summary>
            Gets the count of slash commands.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildApplicationCommandCountEventArgs.UserContextMenuCommands">
            <summary>
            Gets the count of user context menu commands.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildApplicationCommandCountEventArgs.MessageContextMenuCommands">
            <summary>
            Gets the count of message context menu commands.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildApplicationCommandCountEventArgs.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildApplicationCommandCountEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildApplicationCommandCountEventArgs"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="T:DisCatSharp.EventArgs.ChannelCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ChannelCreated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelCreateEventArgs.Channel">
            <summary>
            Gets the channel that was created.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the channel was created.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ChannelCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ChannelCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ChannelDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ChannelDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelDeleteEventArgs.Channel">
            <summary>
            Gets the channel that was deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelDeleteEventArgs.Guild">
            <summary>
            Gets the guild this channel belonged to.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ChannelDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ChannelDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ChannelPinsUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ChannelPinsUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelPinsUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelPinsUpdateEventArgs.Channel">
            <summary>
            Gets the channel in which the update occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelPinsUpdateEventArgs.LastPinTimestamp">
            <summary>
            Gets the timestamp of the latest pin.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ChannelPinsUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ChannelPinsUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ChannelUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ChannelUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelUpdateEventArgs.ChannelAfter">
            <summary>
            Gets the post-update channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelUpdateEventArgs.ChannelBefore">
            <summary>
            Gets the pre-update channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ChannelUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ChannelUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ChannelUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.DmChannelDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.DmChannelDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.DmChannelDeleteEventArgs.Channel">
            <summary>
            Gets the direct message channel that was deleted.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.DmChannelDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.DmChannelDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ClientErrorEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ClientErrored"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ClientErrorEventArgs.Exception">
            <summary>
            Gets the exception thrown by the client.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ClientErrorEventArgs.EventName">
            <summary>
            Gets the name of the event that threw the exception.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ClientErrorEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ClientErrorEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.DiscordEventArgs">
            <summary>
            Common base for all other <see cref="T:DisCatSharp.DiscordClient"/>-related event argument classes.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.DiscordEventArgs.ServiceProvider">
            <summary>
            <para>Gets the service provider.</para>
            <para>This allows passing data around without resorting to static members.</para>
            <para>Defaults to an empty service provider.</para>
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.DiscordEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.DiscordEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.EmbeddedActivityUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.EmbeddedActivityUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.EmbeddedActivityUpdateEventArgs.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.EmbeddedActivityUpdateEventArgs.Channel">
            <summary>
            Gets the channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.EmbeddedActivityUpdateEventArgs.EmbeddedActivityBefore">
            <summary>
            Gets the embedded activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.EmbeddedActivityUpdateEventArgs.EmbeddedActivityAfter">
            <summary>
            Gets the embedded activity.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.EmbeddedActivityUpdateEventArgs.Users">
            <summary>
            Gets the users in the activity.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.EmbeddedActivityUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.EmbeddedActivityUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildBanAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildBanAdded"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildBanAddEventArgs.Member">
            <summary>
            Gets the member that was banned.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildBanAddEventArgs.Guild">
            <summary>
            Gets the guild this member was banned in.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildBanAddEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildBanAddEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildBanRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildBanRemoved"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildBanRemoveEventArgs.Member">
            <summary>
            Gets the member that just got unbanned.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildBanRemoveEventArgs.Guild">
            <summary>
            Gets the guild this member was unbanned in.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildBanRemoveEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildBanRemoveEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildCreated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildCreateEventArgs.Guild">
            <summary>
            Gets the guild that was created.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildDeleteEventArgs.Guild">
            <summary>
            Gets the guild that was deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildDeleteEventArgs.Unavailable">
            <summary>
            Gets whether the guild is unavailable or not.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildDownloadCompletedEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildDownloadCompleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildDownloadCompletedEventArgs.Guilds">
            <summary>
            Gets the dictionary of guilds that just finished downloading.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildDownloadCompletedEventArgs.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.UInt64,DisCatSharp.Entities.DiscordGuild},System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildDownloadCompletedEventArgs"/> class.
            </summary>
            <param name="guilds">The guilds.</param>
            <param name="provider">Service provider.</param>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildEmojisUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildEmojisUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildEmojisUpdateEventArgs.EmojisAfter">
            <summary>
            Gets the list of emojis after the change.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildEmojisUpdateEventArgs.EmojisBefore">
            <summary>
            Gets the list of emojis before the change.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildEmojisUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildEmojisUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildEmojisUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildIntegrationsUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildIntegrationsUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildIntegrationsUpdateEventArgs.Guild">
            <summary>
            Gets the guild that had its integrations updated.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildIntegrationsUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildIntegrationsUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildStickersUpdateEventArgs">
            <summary>
            Represents event args for the <see cref="E:DisCatSharp.DiscordClient.GuildStickersUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildStickersUpdateEventArgs.StickersAfter">
            <summary>
            Gets the list of stickers after the change.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildStickersUpdateEventArgs.StickersBefore">
            <summary>
            Gets the list of stickers before the change.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildStickersUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildStickersUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildStickersUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildUpdateEventArgs.GuildBefore">
            <summary>
            Gets the guild before it was updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildUpdateEventArgs.GuildAfter">
            <summary>
            Gets the guild after it was updated.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildIntegrationCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildIntegrationCreated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildIntegrationCreateEventArgs.Integration">
             <summary>
             Gets the integration that was created.
             </summary>
            
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildIntegrationCreateEventArgs.Guild">
            <summary>
            Gets the guild where the integration was created.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildIntegrationCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildIntegrationCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildIntegrationDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildIntegrationDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildIntegrationDeleteEventArgs.IntegrationId">
             <summary>
             Gets the integration id which where deleted.
             </summary>
            
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildIntegrationDeleteEventArgs.Guild">
            <summary>
            Gets the guild where the integration which where deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildIntegrationDeleteEventArgs.ApplicationId">
            <summary>
            Gets the application id of the integration which where deleted.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildIntegrationDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildIntegrationDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildIntegrationUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildIntegrationUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildIntegrationUpdateEventArgs.Integration">
             <summary>
             Gets the integration that was updated.
             </summary>
            
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildIntegrationUpdateEventArgs.Guild">
            <summary>
            Gets the guild where the integration was updated.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildIntegrationUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildIntegrationUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildMemberAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildMemberAdded"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberAddEventArgs.Member">
            <summary>
            Gets the member that was added.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberAddEventArgs.Guild">
            <summary>
            Gets the guild the member was added to.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildMemberAddEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildMemberAddEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildMemberRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildMemberRemoved"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberRemoveEventArgs.Guild">
            <summary>
            Gets the guild the member was removed from.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberRemoveEventArgs.Member">
            <summary>
            Gets the member that was removed.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildMemberRemoveEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildMemberRemoveEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildMembersChunkEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildMembersChunked"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMembersChunkEventArgs.Guild">
            <summary>
            Gets the guild that requested this chunk.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMembersChunkEventArgs.Members">
            <summary>
            Gets the collection of members returned from this chunk.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMembersChunkEventArgs.ChunkIndex">
            <summary>
            Gets the current chunk index from the response.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMembersChunkEventArgs.ChunkCount">
            <summary>
            Gets the total amount of chunks for the request.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMembersChunkEventArgs.Presences">
            <summary>
            Gets the collection of presences returned from this chunk, if specified.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMembersChunkEventArgs.NotFound">
            <summary>
            Gets the returned Ids that were not found in the chunk, if specified.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMembersChunkEventArgs.Nonce">
            <summary>
            Gets the unique string used to identify the request, if specified.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildMembersChunkEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildMembersChunkEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildMemberUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.RolesAfter">
            <summary>
            Gets a collection containing post-update roles.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.RolesBefore">
            <summary>
            Gets a collection containing pre-update roles.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.NicknameAfter">
            <summary>
            Gets the member's new nickname.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.NicknameBefore">
            <summary>
            Gets the member's old nickname.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.PendingBefore">
            <summary>
            Gets whether the member had passed membership screening before the update.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.PendingAfter">
            <summary>
            Gets whether the member had passed membership screening after the update.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.TimeoutBefore">
            <summary>
            Gets whether the member is timed out before the update.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.TimeoutAfter">
            <summary>
            Gets whether the member is timed out after the update.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.Member">
            <summary>
            Gets the member that was updated.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildMemberUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildRoleCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildRoleCreated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildRoleCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the role was created.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildRoleCreateEventArgs.Role">
            <summary>
            Gets the role that was created.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildRoleCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildRoleCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildRoleDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildRoleDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildRoleDeleteEventArgs.Guild">
            <summary>
            Gets the guild in which the role was deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildRoleDeleteEventArgs.Role">
            <summary>
            Gets the role that was deleted.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildRoleDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildRoleDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildRoleUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildRoleUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildRoleUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildRoleUpdateEventArgs.RoleAfter">
            <summary>
            Gets the post-update role.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildRoleUpdateEventArgs.RoleBefore">
            <summary>
            Gets the pre-update role.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildRoleUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildRoleUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildScheduledEventCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventCreated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventCreateEventArgs.ScheduledEvent">
            <summary>
            Gets the scheduled event that was created.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the scheduled event was created.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildScheduledEventCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildScheduledEventCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildScheduledEventDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventDeleteEventArgs.ScheduledEvent">
            <summary>
            Gets the scheduled event that was deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventDeleteEventArgs.Reason">
            <summary>
            Gets the reason of deletion for the scheduled event.
            Important to determine why and how it was deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventDeleteEventArgs.Guild">
            <summary>
            Gets the guild in which the scheduled event was deleted.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildScheduledEventDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildScheduledEventDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildScheduledEventUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUpdateEventArgs.ScheduledEventAfter">
            <summary>
            Gets the scheduled event that was updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUpdateEventArgs.ScheduledEventBefore">
            <summary>
            Gets the old scheduled event that was updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the scheduled event was updated.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildScheduledEventUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildScheduledEventUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildScheduledEventUserAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventUserAdded"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUserAddEventArgs.ScheduledEvent">
            <summary>
            Gets the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUserAddEventArgs.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUserAddEventArgs.User">
            <summary>
            Gets the user which has subscribed to this scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUserAddEventArgs.Member">
            <summary>
            Gets the member which has subscribed to this scheduled event.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildScheduledEventUserAddEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildScheduledEventUserAddEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildScheduledEventUserRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildScheduledEventUserRemoved"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUserRemoveEventArgs.ScheduledEvent">
            <summary>
            Gets the scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUserRemoveEventArgs.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUserRemoveEventArgs.User">
            <summary>
            Gets the user which has unsubscribed from this scheduled event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildScheduledEventUserRemoveEventArgs.Member">
            <summary>
            Gets the member which has unsubscribed from this scheduled event.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildScheduledEventUserRemoveEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildScheduledEventUserRemoveEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildMemberTimeoutAdded"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs.Target">
            <summary>
            Gets the member that was timed out.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs.Actor">
            <summary>
            Gets the member that timed out the member.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs.Guild">
            <summary>
            Gets the guild this member was timed out.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs.AuditLogId">
            <summary>
            Gets the audit log id.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs.AuditLogReason">
            <summary>
            Gets the audit log reason.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs.Timeout">
            <summary>
            Gets the timeout time.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildMemberTimeoutRemoved"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs.Target">
            <summary>
            Gets the member that was affected by the timeout.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs.Actor">
            <summary>
            Gets the member that removed the timeout for the member.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs.Guild">
            <summary>
            Gets the guild this member was timed out.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs.AuditLogId">
            <summary>
            Gets the audit log id.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs.AuditLogReason">
            <summary>
            Gets the audit log reason.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs.TimeoutBefore">
            <summary>
            Gets the timeout time before the remove.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildMemberTimeoutRemoveEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.GuildMemberTimeoutChanged"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs.Target">
            <summary>
            Gets the member that was timed out.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs.Actor">
            <summary>
            Gets the member that timed out the member.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs.Guild">
            <summary>
            Gets the guild this member was timed out.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs.AuditLogId">
            <summary>
            Gets the audit log id.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs.AuditLogReason">
            <summary>
            Gets the audit log reason.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs.TimeoutBefore">
            <summary>
            Gets the timeout time before the update.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs.TimeoutAfter">
            <summary>
            Gets the timeout time after the update.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.GuildMemberTimeoutUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.GuildMemberTimeoutAddEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.HeartbeatEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.Heartbeated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.HeartbeatEventArgs.Ping">
            <summary>
            Gets the round-trip time of the heartbeat.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.HeartbeatEventArgs.Timestamp">
            <summary>
            Gets the timestamp of the heartbeat.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.HeartbeatEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.HeartbeatEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ContextMenuInteractionCreateEventArgs">
            <summary>
            The context menu interaction create event args.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ContextMenuInteractionCreateEventArgs.Type">
            <summary>
            The type of context menu that was used. This is never <see cref="F:DisCatSharp.Enums.ApplicationCommandType.ChatInput"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ContextMenuInteractionCreateEventArgs.User">
            <summary>
            The user that invoked this interaction. Can be cast to a member if this was on a guild.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ContextMenuInteractionCreateEventArgs.TargetUser">
            <summary>
            The user this interaction targets, if applicable.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ContextMenuInteractionCreateEventArgs.TargetMessage">
            <summary>
            The message this interaction targets, if applicable.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ContextMenuInteractionCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ContextMenuInteractionCreateEventArgs"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="T:DisCatSharp.EventArgs.InteractionCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.InteractionCreated"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.InteractionCreateEventArgs.Interaction">
            <summary>
            Gets the interaction data that was invoked.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.InteractionCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.InteractionCreateEventArgs"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="T:DisCatSharp.EventArgs.InviteCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.InviteCreated"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.InviteCreateEventArgs.Guild">
            <summary>
            Gets the guild that created the invite.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.InviteCreateEventArgs.Channel">
            <summary>
            Gets the channel that the invite is for.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.InviteCreateEventArgs.Invite">
            <summary>
            Gets the created invite.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.InviteCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.InviteCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.InviteDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.InviteDeleted"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.InviteDeleteEventArgs.Guild">
            <summary>
            Gets the guild that deleted the invite.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.InviteDeleteEventArgs.Channel">
            <summary>
            Gets the channel that the invite was for.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.InviteDeleteEventArgs.Invite">
            <summary>
            Gets the deleted invite.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.InviteDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.InviteDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ComponentInteractionCreated"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs.Id">
            <summary>
            The Id of the component that was interacted with.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs.User">
            <summary>
            The user that invoked this interaction.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs.Guild">
            <summary>
            The guild this interaction was invoked on, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs.Channel">
            <summary>
            The channel this interaction was invoked in.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs.Values">
            <summary>
            The value(s) selected. Only applicable to SelectMenu components.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs.Message">
            <summary>
            The message this interaction is attached to.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ComponentInteractionCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.MessageAcknowledgeEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.MessageAcknowledged"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageAcknowledgeEventArgs.Message">
            <summary>
            Gets the message that was acknowledged.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageAcknowledgeEventArgs.Channel">
            <summary>
            Gets the channel for which the message was acknowledged.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.MessageAcknowledgeEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.MessageAcknowledgeEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.MessageBulkDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.MessagesBulkDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageBulkDeleteEventArgs.Messages">
            <summary>
            Gets a collection of the deleted messages.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageBulkDeleteEventArgs.Channel">
            <summary>
            Gets the channel in which the deletion occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageBulkDeleteEventArgs.Guild">
            <summary>
            Gets the guild in which the deletion occurred.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.MessageBulkDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.MessageBulkDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.MessageCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.MessageCreated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageCreateEventArgs.Message">
            <summary>
            Gets the message that was created.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageCreateEventArgs.Channel">
            <summary>
            Gets the channel this message belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageCreateEventArgs.Guild">
            <summary>
            Gets the guild this message belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageCreateEventArgs.Author">
            <summary>
            Gets the author of the message.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageCreateEventArgs.MentionedUsers">
            <summary>
            Gets the collection of mentioned users.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageCreateEventArgs.MentionedRoles">
            <summary>
            Gets the collection of mentioned roles.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageCreateEventArgs.MentionedChannels">
            <summary>
            Gets the collection of mentioned channels.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.MessageCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.MessageCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.MessageDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.MessageDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageDeleteEventArgs.Message">
            <summary>
            Gets the message that was deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageDeleteEventArgs.Channel">
            <summary>
            Gets the channel this message belonged to.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageDeleteEventArgs.Guild">
            <summary>
            Gets the guild this message belonged to.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.MessageDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.MessageDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.MessageUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.MessageUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageUpdateEventArgs.Message">
            <summary>
            Gets the message that was updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageUpdateEventArgs.MessageBefore">
            <summary>
            Gets the message before it got updated. This property will be null if the message was not cached.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageUpdateEventArgs.Channel">
            <summary>
            Gets the channel this message belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageUpdateEventArgs.Guild">
            <summary>
            Gets the guild this message belongs to.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageUpdateEventArgs.Author">
            <summary>
            Gets the author of the message.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageUpdateEventArgs.MentionedUsers">
            <summary>
            Gets the collection of mentioned users.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageUpdateEventArgs.MentionedRoles">
            <summary>
            Gets the collection of mentioned roles.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageUpdateEventArgs.MentionedChannels">
            <summary>
            Gets the collection of mentioned channels.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.MessageUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.MessageUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.MessageReactionAddEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.MessageReactionAdded"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionAddEventArgs.Message">
            <summary>
            Gets the message for which the update occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionAddEventArgs.Channel">
            <summary>
            Gets the channel to which this message belongs.
            </summary>
            <remarks>
            This will be <c>null</c> for an uncached channel, which will usually happen for when this event triggers on
            DM channels in which no prior messages were received or sent.
            </remarks>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionAddEventArgs.User">
            <summary>
            Gets the user who created the reaction.
            <para>This can be cast to a <see cref="T:DisCatSharp.Entities.DiscordMember"/> if the reaction was in a guild.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionAddEventArgs.Guild">
            <summary>
            Gets the guild in which the reaction was added.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionAddEventArgs.Emoji">
            <summary>
            Gets the emoji used for this reaction.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.MessageReactionAddEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.MessageReactionAddEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.MessageReactionRemoveEmojiEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.MessageReactionRemovedEmoji"/>
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionRemoveEmojiEventArgs.Channel">
            <summary>
            Gets the channel the removed reactions were in.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionRemoveEmojiEventArgs.Guild">
            <summary>
            Gets the guild the removed reactions were in.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionRemoveEmojiEventArgs.Message">
            <summary>
            Gets the message that had the removed reactions.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionRemoveEmojiEventArgs.Emoji">
            <summary>
            Gets the emoji of the reaction that was removed.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.MessageReactionRemoveEmojiEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.MessageReactionRemoveEmojiEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.MessageReactionRemoveEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.MessageReactionRemoved"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionRemoveEventArgs.Message">
            <summary>
            Gets the message for which the update occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionRemoveEventArgs.Channel">
            <summary>
            Gets the channel to which this message belongs.
            </summary>
            <remarks>
            This will be <c>null</c> for an uncached channel, which will usually happen for when this event triggers on
            DM channels in which no prior messages were received or sent.
            </remarks>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionRemoveEventArgs.User">
            <summary>
            Gets the users whose reaction was removed.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionRemoveEventArgs.Guild">
            <summary>
            Gets the guild in which the reaction was deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionRemoveEventArgs.Emoji">
            <summary>
            Gets the emoji used for this reaction.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.MessageReactionRemoveEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.MessageReactionRemoveEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.MessageReactionsClearEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.MessageReactionsCleared"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionsClearEventArgs.Message">
            <summary>
            Gets the message for which the update occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionsClearEventArgs.Channel">
            <summary>
            Gets the channel to which this message belongs.
            </summary>
            <remarks>
            This will be <c>null</c> for an uncached channel, which will usually happen for when this event triggers on
            DM channels in which no prior messages were received or sent.
            </remarks>
        </member>
        <member name="P:DisCatSharp.EventArgs.MessageReactionsClearEventArgs.Guild">
            <summary>
            Gets the guild in which the reactions were cleared.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.MessageReactionsClearEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.MessageReactionsClearEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.PayloadReceivedEventArgs">
            <summary>
            Represents a gateway payload.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PayloadReceivedEventArgs.Json">
            <summary>
            The JSON from this payload event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PayloadReceivedEventArgs.PayloadObject">
            <summary>
            Gets or sets the payload object.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PayloadReceivedEventArgs.EventName">
            <summary>
            The name of this event.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.PayloadReceivedEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.PayloadReceivedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.RateLimitExceptionEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.RateLimitHit"/> event.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.RateLimitExceptionEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.HeartbeatEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ReadyEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.Ready"/> event.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ReadyEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ReadyEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.SocketCloseEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.SocketClosed"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.SocketCloseEventArgs.CloseCode">
            <summary>
            Gets the close code sent by remote host.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.SocketCloseEventArgs.CloseMessage">
            <summary>
            Gets the close message sent by remote host.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.SocketCloseEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.SocketCloseEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.SocketErrorEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.SocketErrored"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.SocketErrorEventArgs.Exception">
            <summary>
            Gets the exception thrown by websocket client.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.SocketErrorEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.SocketErrorEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.SocketEventArgs">
            <summary>
            Represents basic socket event arguments.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.SocketEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Creates a new event argument container.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.SocketMessageEventArgs">
            <summary>
            Represents base class for raw socket message event arguments.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.SocketTextMessageEventArgs">
            <summary>
            Represents arguments for text message websocket event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.SocketTextMessageEventArgs.Message">
            <summary>
            Gets the received message string.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.SocketTextMessageEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of text message event arguments.
            </summary>
            <param name="message">Received message string.</param>
        </member>
        <member name="T:DisCatSharp.EventArgs.SocketBinaryMessageEventArgs">
            <summary>
            Represents arguments for binary message websocket event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.SocketBinaryMessageEventArgs.Message">
            <summary>
            Gets the received message bytes.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.SocketBinaryMessageEventArgs.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of binary message event arguments.
            </summary>
            <param name="message">Received message bytes.</param>
        </member>
        <member name="T:DisCatSharp.EventArgs.StageInstanceCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.StageInstanceCreated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.StageInstanceCreateEventArgs.StageInstance">
            <summary>
            Gets the stage instance that was created.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.StageInstanceCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the stage instance was created.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.StageInstanceCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.StageInstanceCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.StageInstanceDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.StageInstanceDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.StageInstanceDeleteEventArgs.StageInstance">
            <summary>
            Gets the stage instance that was deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.StageInstanceDeleteEventArgs.Guild">
            <summary>
            Gets the guild in which the stage instance was deleted.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.StageInstanceDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.StageInstanceDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.StageInstanceUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.StageInstanceUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.StageInstanceUpdateEventArgs.StageInstance">
            <summary>
            Gets the stage instance that was updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.StageInstanceUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the stage instance was updated.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.StageInstanceUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.StageInstanceUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ThreadCreateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ThreadCreated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadCreateEventArgs.Thread">
            <summary>
            Gets the thread that was created.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadCreateEventArgs.Parent">
            <summary>
            Gets the threads parent channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadCreateEventArgs.Guild">
            <summary>
            Gets the guild in which the thread was created.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ThreadCreateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ThreadCreateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ThreadDeleteEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ThreadDeleted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadDeleteEventArgs.Thread">
            <summary>
            Gets the thread that was deleted.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadDeleteEventArgs.Parent">
            <summary>
            Gets the threads parent channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadDeleteEventArgs.Guild">
            <summary>
            Gets the guild this thread belonged to.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadDeleteEventArgs.Type">
            <summary>
            Gets the threads type.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ThreadDeleteEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ThreadDeleteEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ThreadListSyncEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ThreadListSynced"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadListSyncEventArgs.Members">
            <summary>
            Gets all thread member objects from the synced threads for the current user, indicating which threads the current user has been added to
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadListSyncEventArgs.Threads">
            <summary>
            Gets all active threads in the given channels that the current user can access.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadListSyncEventArgs.Channels">
            <summary>
            Gets the parent channels whose threads are being synced. If empty, then threads are synced for the guild. May contain channels that have no active threads as well.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadListSyncEventArgs.Guild">
            <summary>
            Gets the guild being synced.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ThreadListSyncEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ThreadListSyncEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ThreadMembersUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs.MemberCount">
            <summary>
            Gets the approximate number of members in the thread, capped at 50.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs.RemovedMembers">
            <summary>
            Gets the users who were removed from the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs.AddedMembers">
            <summary>
            Gets the users who were added to the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs.ThreadId">
            <summary>
            Gets the id of the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs.Thread">
            <summary>
            Gets the id of the thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs.Guild">
            <summary>
            Gets the guild.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ThreadMembersUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ThreadMemberUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ThreadMemberUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadMemberUpdateEventArgs.ThreadMember">
            <summary>
            Gets the thread member that was updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadMemberUpdateEventArgs.Thread">
            <summary>
            Gets the thread.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ThreadMemberUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ThreadMemberUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ThreadUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.ThreadUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadUpdateEventArgs.ThreadAfter">
            <summary>
            Gets the post-update thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadUpdateEventArgs.ThreadBefore">
            <summary>
            Gets the pre-update thread.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadUpdateEventArgs.Parent">
            <summary>
            Gets the threads parent channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ThreadUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the thread was updated.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ThreadUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ThreadUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.TypingStartEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.TypingStarted"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.TypingStartEventArgs.Channel">
            <summary>
            Gets the channel in which the indicator was triggered.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.TypingStartEventArgs.User">
            <summary>
            Gets the user that started typing.
            <para>This can be cast to a <see cref="T:DisCatSharp.Entities.DiscordMember"/> if the typing occurred in a guild.</para>
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.TypingStartEventArgs.Guild">
            <summary>
            Gets the guild in which the indicator was triggered.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.TypingStartEventArgs.StartedAt">
            <summary>
            Gets the date and time at which the user started typing.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.TypingStartEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.TypingStartEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.UnknownEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.UnknownEvent"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.UnknownEventArgs.EventName">
            <summary>
            Gets the event's name.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.UnknownEventArgs.Json">
            <summary>
            Gets the event's data.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.UnknownEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.UnknownEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.PresenceUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.PresenceUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PresenceUpdateEventArgs.User">
            <summary>
            Gets the user whose presence was updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PresenceUpdateEventArgs.Activity">
            <summary>
            Gets the user's new game.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PresenceUpdateEventArgs.Status">
            <summary>
            Gets the user's status.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PresenceUpdateEventArgs.PresenceBefore">
            <summary>
            Gets the user's old presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PresenceUpdateEventArgs.PresenceAfter">
            <summary>
            Gets the user's new presence.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PresenceUpdateEventArgs.UserBefore">
            <summary>
            Gets the user prior to presence update.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.PresenceUpdateEventArgs.UserAfter">
            <summary>
            Gets the user after the presence update.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.PresenceUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.PresenceUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.UserSettingsUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.UserSettingsUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.UserSettingsUpdateEventArgs.User">
            <summary>
            Gets the user whose settings were updated.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.UserSettingsUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.UserSettingsUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.UserSpeakingEventArgs">
            <summary>
            Represents arguments for UserSpeaking event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.UserSpeakingEventArgs.User">
            <summary>
            Gets the users whose speaking state changed.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.UserSpeakingEventArgs.Ssrc">
            <summary>
            Gets the SSRC of the audio source.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.UserSpeakingEventArgs.Speaking">
            <summary>
            Gets whether this user is speaking.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.UserSpeakingEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.UserSpeakingEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.UserUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.UserUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.UserUpdateEventArgs.UserAfter">
            <summary>
            Gets the post-update user.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.UserUpdateEventArgs.UserBefore">
            <summary>
            Gets the pre-update user.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.UserUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.UserUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.VoiceServerUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.VoiceServerUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.VoiceServerUpdateEventArgs.Guild">
            <summary>
            Gets the guild for which the update occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.VoiceServerUpdateEventArgs.Endpoint">
            <summary>
            Gets the new voice endpoint.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.VoiceServerUpdateEventArgs.VoiceToken">
            <summary>
            Gets the voice connection token.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.VoiceServerUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.VoiceServerUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.VoiceStateUpdateEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.VoiceStateUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.VoiceStateUpdateEventArgs.User">
            <summary>
            Gets the user whose voice state was updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.VoiceStateUpdateEventArgs.Guild">
            <summary>
            Gets the guild in which the update occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.VoiceStateUpdateEventArgs.Channel">
            <summary>
            Gets the related voice channel.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.VoiceStateUpdateEventArgs.Before">
            <summary>
            Gets the voice state pre-update.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.VoiceStateUpdateEventArgs.After">
            <summary>
            Gets the voice state post-update.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.VoiceStateUpdateEventArgs.SessionId">
            <summary>
            Gets the ID of voice session.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.VoiceStateUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.VoiceStateUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.WebhooksUpdateEventArgs">
            <summary>
            Represents arguments to <see cref="E:DisCatSharp.DiscordClient.WebhooksUpdated"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.WebhooksUpdateEventArgs.Guild">
            <summary>
            Gets the guild that had its webhooks updated.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.WebhooksUpdateEventArgs.Channel">
            <summary>
            Gets the channel to which the webhook belongs to.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.WebhooksUpdateEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.WebhooksUpdateEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.EventArgs.ZombiedEventArgs">
            <summary>
            Represents arguments for <see cref="E:DisCatSharp.DiscordClient.Zombied"/> event.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ZombiedEventArgs.Failures">
            <summary>
            Gets how many heartbeat failures have occurred.
            </summary>
        </member>
        <member name="P:DisCatSharp.EventArgs.ZombiedEventArgs.GuildDownloadCompleted">
            <summary>
            Gets whether the zombie event occurred whilst guilds are downloading.
            </summary>
        </member>
        <member name="M:DisCatSharp.EventArgs.ZombiedEventArgs.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.EventArgs.ZombiedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Exceptions.BadRequestException">
            <summary>
            Represents an exception thrown when a malformed request is sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.BadRequestException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.BadRequestException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.BadRequestException.Code">
            <summary>
            Gets the error code for this exception.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.BadRequestException.JsonMessage">
            <summary>
            Gets the JSON message received.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.BadRequestException.Errors">
            <summary>
            Gets the form error responses in JSON format.
            </summary>
        </member>
        <member name="M:DisCatSharp.Exceptions.BadRequestException.#ctor(DisCatSharp.Net.BaseRestRequest,DisCatSharp.Net.RestResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Exceptions.BadRequestException"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
        </member>
        <member name="T:DisCatSharp.Exceptions.NotFoundException">
            <summary>
            Represents an exception thrown when a requested resource is not found.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.NotFoundException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.NotFoundException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.NotFoundException.JsonMessage">
            <summary>
            Gets the JSON received.
            </summary>
        </member>
        <member name="M:DisCatSharp.Exceptions.NotFoundException.#ctor(DisCatSharp.Net.BaseRestRequest,DisCatSharp.Net.RestResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Exceptions.NotFoundException"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
        </member>
        <member name="T:DisCatSharp.Exceptions.RateLimitException">
            <summary>
            Represents an exception thrown when too many requests are sent.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.RateLimitException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.RateLimitException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.RateLimitException.JsonMessage">
            <summary>
            Gets the JSON received.
            </summary>
        </member>
        <member name="M:DisCatSharp.Exceptions.RateLimitException.#ctor(DisCatSharp.Net.BaseRestRequest,DisCatSharp.Net.RestResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Exceptions.RateLimitException"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
        </member>
        <member name="T:DisCatSharp.Exceptions.RequestSizeException">
            <summary>
            Represents an exception thrown when the request sent to Discord is too large.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.RequestSizeException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.RequestSizeException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.RequestSizeException.JsonMessage">
            <summary>
            Gets the JSON received.
            </summary>
        </member>
        <member name="M:DisCatSharp.Exceptions.RequestSizeException.#ctor(DisCatSharp.Net.BaseRestRequest,DisCatSharp.Net.RestResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Exceptions.RequestSizeException"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
        </member>
        <member name="T:DisCatSharp.Exceptions.ServerErrorException">
            <summary>
            Represents an exception thrown when Discord returns an Internal Server Error.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.ServerErrorException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.ServerErrorException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.ServerErrorException.JsonMessage">
            <summary>
            Gets the JSON received.
            </summary>
        </member>
        <member name="M:DisCatSharp.Exceptions.ServerErrorException.#ctor(DisCatSharp.Net.BaseRestRequest,DisCatSharp.Net.RestResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Exceptions.ServerErrorException"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
        </member>
        <member name="T:DisCatSharp.Exceptions.UnauthorizedException">
            <summary>
            Represents an exception thrown when requester doesn't have necessary permissions to complete the request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.UnauthorizedException.WebRequest">
            <summary>
            Gets the request that caused the exception.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.UnauthorizedException.WebResponse">
            <summary>
            Gets the response to the request.
            </summary>
        </member>
        <member name="P:DisCatSharp.Exceptions.UnauthorizedException.JsonMessage">
            <summary>
            Gets the JSON received.
            </summary>
        </member>
        <member name="M:DisCatSharp.Exceptions.UnauthorizedException.#ctor(DisCatSharp.Net.BaseRestRequest,DisCatSharp.Net.RestResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Exceptions.UnauthorizedException"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
        </member>
        <member name="T:DisCatSharp.Formatter">
            <summary>
            Contains markdown formatting helpers.
            </summary>
        </member>
        <member name="P:DisCatSharp.Formatter.s_mdSanitizeRegex">
            <summary>
            Gets the md sanitize regex.
            </summary>
        </member>
        <member name="P:DisCatSharp.Formatter.s_mdStripRegex">
            <summary>
            Gets the md strip regex.
            </summary>
        </member>
        <member name="M:DisCatSharp.Formatter.BlockCode(System.String,System.String)">
            <summary>
            Creates a block of code.
            </summary>
            <param name="content">Contents of the block.</param>
            <param name="language">Language to use for highlighting.</param>
            <returns>Formatted block of code.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.InlineCode(System.String)">
            <summary>
            Creates inline code snippet.
            </summary>
            <param name="content">Contents of the snippet.</param>
            <returns>Formatted inline code snippet.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Timestamp(System.TimeSpan,DisCatSharp.TimestampFormat)">
            <summary>
            Creates a rendered timestamp.
            </summary>
            <param name="time">The time from now.</param>
            <param name="format">The format to render the timestamp in. Defaults to relative.</param>
            <returns>A formatted timestamp.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Timestamp(System.DateTimeOffset,DisCatSharp.TimestampFormat)">
            <summary>
            Creates a rendered timestamp.
            </summary>
            <param name="time">Timestamp to format.</param>
            <param name="format">The format to render the timestamp in. Defaults to relative.</param>
            <returns>A formatted timestamp.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Timestamp(System.DateTime,DisCatSharp.TimestampFormat)">
            <summary>
            Creates a rendered timestamp.
            </summary>
            <param name="time">The time from now.</param>
            <param name="format">The format to render the timestamp in. Defaults to relative.</param>
            <returns>A formatted timestamp relative to now.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Bold(System.String)">
            <summary>
            Creates bold text.
            </summary>
            <param name="content">Text to embolden.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Italic(System.String)">
            <summary>
            Creates italicized text.
            </summary>
            <param name="content">Text to italicize.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Spoiler(System.String)">
            <summary>
            Creates spoiler from text.
            </summary>
            <param name="content">Text to spoiler.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Underline(System.String)">
            <summary>
            Creates underlined text.
            </summary>
            <param name="content">Text to underline.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Strike(System.String)">
            <summary>
            Creates strikethrough text.
            </summary>
            <param name="content">Text to strikethrough.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.EmbedlessUrl(System.Uri)">
            <summary>
            Creates a URL that won't create a link preview.
            </summary>
            <param name="url">Url to prevent from being previewed.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.MaskedUrl(System.String,System.Uri,System.String)">
            <summary>
            Creates a masked link. This link will display as specified text, and alternatively provided alt text. This can only be used in embeds.
            </summary>
            <param name="text">Text to display the link as.</param>
            <param name="url">Url that the link will lead to.</param>
            <param name="altText">Alt text to display on hover.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Sanitize(System.String)">
            <summary>
            Escapes all markdown formatting from specified text.
            </summary>
            <param name="text">Text to sanitize.</param>
            <returns>Sanitized text.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Strip(System.String)">
            <summary>
            Removes all markdown formatting from specified text.
            </summary>
            <param name="text">Text to strip of formatting.</param>
            <returns>Formatting-stripped text.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Mention(DisCatSharp.Entities.DiscordUser,System.Boolean)">
            <summary>
            Creates a mention for specified user or member. Can optionally specify to resolve nicknames.
            </summary>
            <param name="user">User to create mention for.</param>
            <param name="nickname">Whether the mention should resolve nicknames or not.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Mention(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Creates a mention for specified channel.
            </summary>
            <param name="channel">Channel to mention.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Mention(DisCatSharp.Entities.DiscordRole)">
            <summary>
            Creates a mention for specified role.
            </summary>
            <param name="role">Role to mention.</param>
            <returns>Formatted mention.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.Emoji(DisCatSharp.Entities.DiscordEmoji)">
            <summary>
            Creates a custom emoji string.
            </summary>
            <param name="emoji">Emoji to display.</param>
            <returns>Formatted emoji.</returns>
        </member>
        <member name="M:DisCatSharp.Formatter.AttachedImageUrl(System.String)">
            <summary>
            Creates a url for using attachments in embeds. This can only be used as an Image URL, Thumbnail URL, Author icon URL or Footer icon URL.
            </summary>
            <param name="filename">Name of attached image to display</param>
            <returns></returns>
        </member>
        <member name="T:DisCatSharp.ImageTool">
            <summary>
            Tool to detect image formats and convert from binary data to base64 strings.
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.PNG_MAGIC">
            <summary>
            The png magic .
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.JPEG_MAGIC_1">
            <summary>
            The jpeg magic 1.
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.JPEG_MAGIC_2">
            <summary>
            The jpeg magic 2.
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.GIF_MAGIC_1">
            <summary>
            The gif magic 1
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.GIF_MAGIC_2">
            <summary>
            The gif magic 2.
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.WEBP_MAGIC_1">
            <summary>
            The webp magic 1.
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.WEBP_MAGIC_2">
            <summary>
            The webp magic 2.
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.GIF_MASK">
            <summary>
            The gif mask.
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.MASK32">
            <summary>
            The mask 32.
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageTool.MASK16">
            <summary>
            The mask 16.
            </summary>
        </member>
        <member name="P:DisCatSharp.ImageTool.SourceStream">
            <summary>
            Gets the stream this tool is operating on.
            </summary>
        </member>
        <member name="M:DisCatSharp.ImageTool.#ctor(System.IO.Stream)">
            <summary>
            Creates a new image tool from given stream.
            </summary>
            <param name="stream">Stream to work with.</param>
        </member>
        <member name="M:DisCatSharp.ImageTool.GetFormat">
            <summary>
            Detects the format of this image.
            </summary>
            <returns>Detected format.</returns>
        </member>
        <member name="M:DisCatSharp.ImageTool.GetBase64">
            <summary>
            Converts this image into base64 data format string.
            </summary>
            <returns>Data-scheme base64 string.</returns>
        </member>
        <member name="M:DisCatSharp.ImageTool.Dispose">
            <summary>
            Disposes this image tool.
            </summary>
        </member>
        <member name="M:DisCatSharp.ImageTool.Base64FromStream(System.IO.Stream)">
            <summary>
            Utility function to convert an image stream into a base 64 string.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The base 64 string.</returns>
        </member>
        <member name="M:DisCatSharp.ImageTool.Base64FromStream(DisCatSharp.Entities.Optional{System.IO.Stream})">
            <summary>
            Utility function to convert an optional image stream into an optional base 64 string.
            </summary>
            <param name="stream">The optional stream.</param>
            <returns>The optional base 64 string.</returns>
        </member>
        <member name="T:DisCatSharp.ImageFormat">
            <summary>
            Represents format of an image.
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageFormat.Unknown">
            <summary>
            The format is unknown
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageFormat.Jpeg">
            <summary>
            The format is a jpeg
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageFormat.Png">
            <summary>
            The format is a png
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageFormat.Gif">
            <summary>
            The format is a gif
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageFormat.WebP">
            <summary>
            The format is a webp
            </summary>
        </member>
        <member name="F:DisCatSharp.ImageFormat.Auto">
            <summary>
            The format will be automatically detected
            </summary>
        </member>
        <member name="T:DisCatSharp.Internals">
            <summary>
            Internal tools.
            </summary>
        </member>
        <member name="P:DisCatSharp.Internals.s_versionHeader">
            <summary>
            Gets the version of the library
            </summary>
        </member>
        <member name="P:DisCatSharp.Internals.s_permissionStrings">
            <summary>
            Gets the permission strings.
            </summary>
        </member>
        <member name="P:DisCatSharp.Internals.Utf8">
            <summary>
            Gets the utf8 encoding
            </summary>
        </member>
        <member name="M:DisCatSharp.Internals.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Internals"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Internals.IsVoiceJoinable(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Whether the <see cref="T:DisCatSharp.Entities.DiscordChannel"/> is joinable via voice.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:DisCatSharp.Internals.IsThreadHolder(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Whether the <see cref="T:DisCatSharp.Entities.DiscordChannel"/> can have threads.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:DisCatSharp.Internals.IsThread(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Whether the <see cref="T:DisCatSharp.Entities.DiscordChannel"/> is related to threads.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:DisCatSharp.Internals.IsWritable(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Whether users can write the <see cref="T:DisCatSharp.Entities.DiscordChannel"/>.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:DisCatSharp.Internals.IsMovableInParent(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Whether the <see cref="T:DisCatSharp.Entities.DiscordChannel"/> is moveable in a parent.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:DisCatSharp.Internals.IsMovable(DisCatSharp.Entities.DiscordChannel)">
            <summary>
            Whether the <see cref="T:DisCatSharp.Entities.DiscordChannel"/> is moveable.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="T:DisCatSharp.CompositeDefaultLogger">
            <summary>
            Represents a composite default logger.
            </summary>
        </member>
        <member name="F:DisCatSharp.CompositeDefaultLogger._loggers">
            <summary>
            Gets the loggers.
            </summary>
        </member>
        <member name="M:DisCatSharp.CompositeDefaultLogger.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILoggerProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.CompositeDefaultLogger"/> class.
            </summary>
            <param name="providers">The providers.</param>
        </member>
        <member name="M:DisCatSharp.CompositeDefaultLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Whether the logger is enabled.
            </summary>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:DisCatSharp.CompositeDefaultLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Logs an event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="eventId">The event id.</param>
            <param name="state">The state.</param>
            <param name="exception">The exception.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:DisCatSharp.CompositeDefaultLogger.BeginScope``1(``0)">
            <summary>
            Begins the scope.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:DisCatSharp.DefaultLogger">
            <summary>
            Represents a default logger.
            </summary>
        </member>
        <member name="F:DisCatSharp.DefaultLogger._minimumLevel">
            <summary>
            Gets the minimum log level.
            </summary>
        </member>
        <member name="F:DisCatSharp.DefaultLogger._timestampFormat">
            <summary>
            Gets the timestamp format.
            </summary>
        </member>
        <member name="M:DisCatSharp.DefaultLogger.#ctor(DisCatSharp.BaseDiscordClient)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.DefaultLogger"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLogger.#ctor(Microsoft.Extensions.Logging.LogLevel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.DefaultLogger"/> class.
            </summary>
            <param name="minLevel">The min level.</param>
            <param name="timestampFormat">The timestamp format.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Logs an event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="eventId">The event id.</param>
            <param name="state">The state.</param>
            <param name="exception">The exception.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Whether the logger is enabled.
            </summary>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLogger.BeginScope``1(``0)">
            <summary>
            Begins the scope.
            </summary>
            <param name="state">The state.</param>
            <returns>An IDisposable.</returns>
        </member>
        <member name="T:DisCatSharp.DefaultLoggerFactory">
            <summary>
            Represents a default logger factory.
            </summary>
        </member>
        <member name="F:DisCatSharp.DefaultLoggerFactory._providers">
            <summary>
            Gets the providers.
            </summary>
        </member>
        <member name="M:DisCatSharp.DefaultLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            Adds a provider.
            </summary>
            <param name="provider">The provider to be added.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates the logger.
            </summary>
            <param name="categoryName">The category name.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLoggerFactory.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:DisCatSharp.DefaultLoggerProvider">
            <summary>
            Represents a default logger provider.
            </summary>
        </member>
        <member name="F:DisCatSharp.DefaultLoggerProvider._minimumLevel">
            <summary>
            Gets the minimum log level.
            </summary>
        </member>
        <member name="F:DisCatSharp.DefaultLoggerProvider._timestampFormat">
            <summary>
            Gets the timestamp format.
            </summary>
        </member>
        <member name="M:DisCatSharp.DefaultLoggerProvider.#ctor(DisCatSharp.BaseDiscordClient)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.DefaultLoggerProvider"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLoggerProvider.#ctor(DisCatSharp.DiscordWebhookClient)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.DefaultLoggerProvider"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLoggerProvider.#ctor(Microsoft.Extensions.Logging.LogLevel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.DefaultLoggerProvider"/> class.
            </summary>
            <param name="minLevel">The min level.</param>
            <param name="timestampFormat">The timestamp format.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLoggerProvider.CreateLogger(System.String)">
            <summary>
            Creates the logger.
            </summary>
            <param name="categoryName">The category name.</param>
        </member>
        <member name="M:DisCatSharp.DefaultLoggerProvider.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:DisCatSharp.LoggerEvents">
            <summary>
            Contains well-defined event IDs used by core of DisCatSharp.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.Misc">
            <summary>
            Miscellaneous events, that do not fit in any other category.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.Startup">
            <summary>
            Events pertaining to startup tasks.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.ConnectionFailure">
            <summary>
            Events typically emitted whenever WebSocket connections fail or are terminated.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.SessionUpdate">
            <summary>
            Events pertaining to Discord-issued session state updates.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.EventHandlerException">
            <summary>
            Events emitted when exceptions are thrown in handlers attached to async events.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.WebSocketReceive">
            <summary>
            Events emitted for various high-level WebSocket receive events.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.WebSocketReceiveRaw">
            <summary>
            Events emitted for various low-level WebSocket receive events.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.WebSocketSendRaw">
            <summary>
            Events emitted for various low-level WebSocket send events.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.WebSocketReceiveFailure">
            <summary>
            Events emitted for various WebSocket payload processing failures, typically when deserialization or decoding fails.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.Heartbeat">
            <summary>
            Events pertaining to connection lifecycle, specifically, heartbeats.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.HeartbeatFailure">
            <summary>
            Events pertaining to various heartbeat failures, typically fatal.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.ConnectionClose">
            <summary>
            Events pertaining to clean connection closes.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.RestError">
            <summary>
            Events emitted when REST processing fails for any reason.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.ShardStartup">
            <summary>
            Events pertaining to the <see cref="T:DisCatSharp.DiscordShardedClient"/> shard startup.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.RatelimitHit">
            <summary>
            Events pertaining to ratelimit exhaustion.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.RatelimitDiag">
            <summary>
            Events pertaining to ratelimit diagnostics. Typically contain raw bucket info.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.RatelimitPreemptive">
            <summary>
            Events emitted when a ratelimit is exhausted and a request is preemptively blocked.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.AuditLog">
            <summary>
            Events pertaining to audit log processing.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.GatewayWsRx">
            <summary>
            Events containing raw (but decompressed) payloads, received from Discord Gateway.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.GatewayWsTx">
            <summary>
            Events containing raw payloads, as they're being sent to Discord Gateway.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.Intents">
            <summary>
            Events pertaining to Gateway Intents. Typically diagnostic information.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.ShardShutdown">
            <summary>
            Events pertaining to autosharded client shard shutdown, clean or otherwise.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.ShardClientError">
            <summary>
            Events pertaining to the <see cref="T:DisCatSharp.DiscordShardedClient"/>'s shards not initializing correctly.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.RestRx">
            <summary>
            Events containing raw payloads, as they're received from Discord's REST API.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.RestTx">
            <summary>
            Events containing raw payloads, as they're sent to Discord's REST API.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.RestCleaner">
            <summary>
            Event is rest cleaner.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.RestHashMover">
            <summary>
            Event is rest hash mover.
            </summary>
        </member>
        <member name="P:DisCatSharp.LoggerEvents.ShardRest">
            <summary>
            Events pertaining to Discord API requests from the <see cref="T:DisCatSharp.DiscordShardedClient"/>.
            </summary>
        </member>
        <member name="T:DisCatSharp.ShardedLoggerFactory">
            <summary>
            Represents a sharded logger factory.
            </summary>
        </member>
        <member name="F:DisCatSharp.ShardedLoggerFactory._logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:DisCatSharp.ShardedLoggerFactory.#ctor(Microsoft.Extensions.Logging.ILogger{DisCatSharp.BaseDiscordClient})">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.ShardedLoggerFactory"/> class.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:DisCatSharp.ShardedLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            Adds a provider.
            </summary>
            <param name="provider">The provider to be added.</param>
        </member>
        <member name="M:DisCatSharp.ShardedLoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates a logger.
            </summary>
            <param name="categoryName">The category name.</param>
        </member>
        <member name="M:DisCatSharp.ShardedLoggerFactory.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:DisCatSharp.QueryUriBuilder">
            <summary>
            Represents a query uri builder.
            </summary>
        </member>
        <member name="P:DisCatSharp.QueryUriBuilder.SourceUri">
            <summary>
            Gets the source uri.
            </summary>
        </member>
        <member name="P:DisCatSharp.QueryUriBuilder.QueryParameters">
            <summary>
            Gets the query parameters.
            </summary>
        </member>
        <member name="M:DisCatSharp.QueryUriBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.QueryUriBuilder"/> class.
            </summary>
            <param name="uri">The uri.</param>
        </member>
        <member name="M:DisCatSharp.QueryUriBuilder.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.QueryUriBuilder"/> class.
            </summary>
            <param name="uri">The uri.</param>
        </member>
        <member name="M:DisCatSharp.QueryUriBuilder.AddParameter(System.String,System.String)">
            <summary>
            Adds a parameter.
            </summary>
            <param name="key">The key to be added.</param>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:DisCatSharp.QueryUriBuilder.Build">
            <summary>
            Builds the uri.
            </summary>
        </member>
        <member name="M:DisCatSharp.QueryUriBuilder.ToString">
            <summary>
            Returns a readable string.
            </summary>
        </member>
        <member name="T:DisCatSharp.ReadOnlyConcurrentDictionary`2">
            <summary>
            Read-only view of a given <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <remarks>
            This type exists because <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> is not an
            <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> in .NET Standard 1.1.
            </remarks>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:DisCatSharp.ReadOnlyConcurrentDictionary`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Creates a new read-only view of the given dictionary.
            </summary>
            <param name="underlyingDict">Dictionary to create a view over.</param>
        </member>
        <member name="M:DisCatSharp.ReadOnlyConcurrentDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:DisCatSharp.ReadOnlyConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="P:DisCatSharp.ReadOnlyConcurrentDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:DisCatSharp.ReadOnlyConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            Contains the key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:DisCatSharp.ReadOnlyConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:DisCatSharp.ReadOnlyConcurrentDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:DisCatSharp.ReadOnlyConcurrentDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:DisCatSharp.ReadOnlySet`1">
            <summary>
            Read-only view of a given <see cref="T:System.Collections.Generic.ISet`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the set.</typeparam>
        </member>
        <member name="M:DisCatSharp.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Creates a new read-only view of the given set.
            </summary>
            <param name="sourceSet">Set to create a view over.</param>
        </member>
        <member name="P:DisCatSharp.ReadOnlySet`1.Count">
            <summary>
            Gets the number of items in the underlying set.
            </summary>
        </member>
        <member name="M:DisCatSharp.ReadOnlySet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this set view.
            </summary>
            <returns>Enumerator for the underlying set.</returns>
        </member>
        <member name="M:DisCatSharp.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this set view.
            </summary>
            <returns>Enumerator for the underlying set.</returns>
        </member>
        <member name="T:DisCatSharp.RingBuffer`1">
            <summary>
            A circular buffer collection.
            </summary>
            <typeparam name="T">Type of elements within this ring buffer.</typeparam>
        </member>
        <member name="P:DisCatSharp.RingBuffer`1.CurrentIndex">
            <summary>
            Gets the current index of the buffer items.
            </summary>
        </member>
        <member name="P:DisCatSharp.RingBuffer`1.Capacity">
            <summary>
            Gets the capacity of this ring buffer.
            </summary>
        </member>
        <member name="P:DisCatSharp.RingBuffer`1.Count">
            <summary>
            Gets the number of items in this ring buffer.
            </summary>
        </member>
        <member name="P:DisCatSharp.RingBuffer`1.IsReadOnly">
            <summary>
            Gets whether this ring buffer is read-only.
            </summary>
        </member>
        <member name="P:DisCatSharp.RingBuffer`1.InternalBuffer">
            <summary>
            Gets or sets the internal collection of items.
            </summary>
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.#ctor(System.Int32)">
            <summary>
            Creates a new ring buffer with specified size.
            </summary>
            <param name="size">Size of the buffer to create.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new ring buffer, filled with specified elements.
            </summary>
            <param name="elements">Elements to fill the buffer with.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates a new ring buffer, filled with specified elements, and starting at specified index.
            </summary>
            <param name="elements">Elements to fill the buffer with.</param>
            <param name="index">Starting element index.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.Add(`0)">
            <summary>
            Inserts an item into this ring buffer.
            </summary>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.TryGet(System.Func{`0,System.Boolean},`0@)">
            <summary>
            Gets first item from the buffer that matches the predicate.
            </summary>
            <param name="predicate">Predicate used to find the item.</param>
            <param name="item">Item that matches the predicate, or default value for the type of the items in this ring buffer, if one is not found.</param>
            <returns>Whether an item that matches the predicate was found or not.</returns>
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.Clear">
            <summary>
            Clears this ring buffer and resets the current item index.
            </summary>
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.Contains(`0)">
            <summary>
            Checks whether given item is present in the buffer. This method is not implemented. Use <see cref="M:DisCatSharp.RingBuffer`1.Contains(System.Func{`0,System.Boolean})"/> instead.
            </summary>
            <param name="item">Item to check for.</param>
            <returns>Whether the buffer contains the item.</returns>
            <exception cref="T:System.NotImplementedException" />
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.Contains(System.Func{`0,System.Boolean})">
            <summary>
            Checks whether given item is present in the buffer using given predicate to find it.
            </summary>
            <param name="predicate">Predicate used to check for the item.</param>
            <returns>Whether the buffer contains the item.</returns>
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies this ring buffer to target array, attempting to maintain the order of items within.
            </summary>
            <param name="array">Target array.</param>
            <param name="index">Index starting at which to copy the items to.</param>
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.Remove(`0)">
            <summary>
            Removes an item from the buffer. This method is not implemented. Use <see cref="M:DisCatSharp.RingBuffer`1.Remove(System.Func{`0,System.Boolean})"/> instead.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether an item was removed or not.</returns>
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            Removes an item from the buffer using given predicate to find it.
            </summary>
            <param name="predicate">Predicate used to find the item.</param>
            <returns>Whether an item was removed or not.</returns>
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator for this ring buffer.
            </summary>
            <returns>Enumerator for this ring buffer.</returns>
        </member>
        <member name="M:DisCatSharp.RingBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for this ring buffer.
            </summary>
            <returns>Enumerator for this ring buffer.</returns>
        </member>
        <member name="T:DisCatSharp.Utilities">
            <summary>
            Various Discord-related utilities.
            </summary>
        </member>
        <member name="P:DisCatSharp.Utilities.VersionHeader">
            <summary>
            Gets the version of the library
            </summary>
        </member>
        <member name="P:DisCatSharp.Utilities.PermissionStrings">
            <summary>
            Gets or sets the permission strings.
            </summary>
        </member>
        <member name="P:DisCatSharp.Utilities.UTF8">
            <summary>
            Gets the utf8 encoding
            </summary>
        </member>
        <member name="M:DisCatSharp.Utilities.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Utilities"/> class.
            </summary>
        </member>
        <member name="M:DisCatSharp.Utilities.GetApiBaseUri(DisCatSharp.DiscordConfiguration)">
            <summary>
            Gets the api base uri.
            </summary>
            <param name="config">The config</param>
            <returns>A string.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetApiUriFor(System.String,DisCatSharp.DiscordConfiguration)">
            <summary>
            Gets the api uri for.
            </summary>
            <param name="path">The path.</param>
            <param name="config">The config</param>
            <returns>An Uri.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetApiUriFor(System.String,System.String,DisCatSharp.DiscordConfiguration)">
            <summary>
            Gets the api uri for.
            </summary>
            <param name="path">The path.</param>
            <param name="queryString">The query string.</param>
            <param name="config">The config</param>
            <returns>An Uri.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetApiUriBuilderFor(System.String,DisCatSharp.DiscordConfiguration)">
            <summary>
            Gets the api uri builder for.
            </summary>
            <param name="path">The path.</param>
            <param name="config">The config</param>
            <returns>A QueryUriBuilder.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetFormattedToken(DisCatSharp.BaseDiscordClient)">
            <summary>
            Gets the formatted token.
            </summary>
            <param name="client">The client.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetFormattedToken(DisCatSharp.DiscordConfiguration)">
            <summary>
            Gets the formatted token.
            </summary>
            <param name="config">The config.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetBaseHeaders">
            <summary>
            Gets the base headers.
            </summary>
            <returns>A Dictionary.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetUserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.ContainsUserMentions(System.String)">
            <summary>
            Contains the user mentions.
            </summary>
            <param name="message">The message.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.ContainsNicknameMentions(System.String)">
            <summary>
            Contains the nickname mentions.
            </summary>
            <param name="message">The message.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.ContainsChannelMentions(System.String)">
            <summary>
            Contains the channel mentions.
            </summary>
            <param name="message">The message.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.ContainsRoleMentions(System.String)">
            <summary>
            Contains the role mentions.
            </summary>
            <param name="message">The message.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.ContainsEmojis(System.String)">
            <summary>
            Contains the emojis.
            </summary>
            <param name="message">The message.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetUserMentions(DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Gets the user mentions.
            </summary>
            <param name="message">The message.</param>
            <returns>A list of ulong.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetRoleMentions(DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Gets the role mentions.
            </summary>
            <param name="message">The message.</param>
            <returns>A list of ulong.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetChannelMentions(DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Gets the channel mentions.
            </summary>
            <param name="message">The message.</param>
            <returns>A list of ulong.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetEmojis(DisCatSharp.Entities.DiscordMessage)">
            <summary>
            Gets the emojis.
            </summary>
            <param name="message">The message.</param>
            <returns>A list of ulong.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.IsValidSlashCommandName(System.String)">
            <summary>
            Are the valid slash command name.
            </summary>
            <param name="name">The name.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.CheckThreadAutoArchiveDurationFeature(DisCatSharp.Entities.DiscordGuild,DisCatSharp.ThreadAutoArchiveDuration)">
            <summary>
            Checks the thread auto archive duration feature.
            </summary>
            <param name="guild">The guild.</param>
            <param name="taad">The taad.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.CheckThreadPrivateFeature(DisCatSharp.Entities.DiscordGuild)">
            <summary>
            Checks the thread private feature.
            </summary>
            <param name="guild">The guild.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.HasMessageIntents(DisCatSharp.DiscordIntents)">
            <summary>
            Have the message intents.
            </summary>
            <param name="intents">The intents.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.HasReactionIntents(DisCatSharp.DiscordIntents)">
            <summary>
            Have the reaction intents.
            </summary>
            <param name="intents">The intents.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.HasTypingIntents(DisCatSharp.DiscordIntents)">
            <summary>
            Have the typing intents.
            </summary>
            <param name="intents">The intents.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetShardId(System.UInt64,System.Int32)">
            <summary>
            Gets a shard id from a guild id and total shard count.
            </summary>
            <param name="guildId">The guild id the shard is on.</param>
            <param name="shardCount">The total amount of shards.</param>
            <returns>The shard id.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetDateTimeOffset(System.Int64,System.Boolean)">
            <summary>
            Helper method to create a <see cref="T:System.DateTimeOffset"/> from Unix time seconds for targets that do not support this natively.
            </summary>
            <param name="unixTime">Unix time seconds to convert.</param>
            <param name="shouldThrow">Whether the method should throw on failure. Defaults to true.</param>
            <returns>Calculated <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetDateTimeOffsetFromMilliseconds(System.Int64,System.Boolean)">
            <summary>
            Helper method to create a <see cref="T:System.DateTimeOffset"/> from Unix time milliseconds for targets that do not support this natively.
            </summary>
            <param name="unixTime">Unix time milliseconds to convert.</param>
            <param name="shouldThrow">Whether the method should throw on failure. Defaults to true.</param>
            <returns>Calculated <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetUnixTime(System.DateTimeOffset)">
            <summary>
            Helper method to calculate Unix time seconds from a <see cref="T:System.DateTimeOffset"/> for targets that do not support this natively.
            </summary>
            <param name="dto"><see cref="T:System.DateTimeOffset"/> to calculate Unix time for.</param>
            <returns>Calculated Unix time.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.GetSnowflakeTime(System.UInt64)">
            <summary>
            Computes a timestamp from a given snowflake.
            </summary>
            <param name="snowflake">Snowflake to compute a timestamp from.</param>
            <returns>Computed timestamp.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.ToPermissionString(DisCatSharp.Permissions)">
            <summary>
            Converts this <see cref="T:DisCatSharp.Permissions"/> into human-readable format.
            </summary>
            <param name="perm">Permissions enumeration to convert.</param>
            <returns>Human-readable permissions.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.Contains(System.String,System.Char[])">
            <summary>
            Checks whether this string contains given characters.
            </summary>
            <param name="str">String to check.</param>
            <param name="characters">Characters to check for.</param>
            <returns>Whether the string contained these characters.</returns>
        </member>
        <member name="M:DisCatSharp.Utilities.LogTaskFault(System.Threading.Tasks.Task,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)">
            <summary>
            Logs the task fault.
            </summary>
            <param name="task">The task.</param>
            <param name="logger">The logger.</param>
            <param name="level">The level.</param>
            <param name="eventId">The event id.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:DisCatSharp.Utilities.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs the.
            </summary>
            <param name="kvp">The kvp.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
    </members>
</doc>
