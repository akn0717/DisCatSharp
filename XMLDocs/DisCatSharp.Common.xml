<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DisCatSharp.Common</name>
    </assembly>
    <members>
        <member name="T:DisCatSharp.Common.Serialization.DateTimeFormatAttribute">
            <summary>
            Defines the format for string-serialized <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> objects.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatAttribute.FORMAT_ISO_8601">
            <summary>
            Gets the ISO 8601 format string of "yyyy-MM-ddTHH:mm:ss.fffzzz".
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatAttribute.FORMAT_RFC_1123">
            <summary>
            Gets the RFC 1123 format string of "R".
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatAttribute.FORMAT_LONG">
            <summary>
            Gets the general long format.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatAttribute.FORMAT_SHORT">
            <summary>
            Gets the general short format.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.DateTimeFormatAttribute.Format">
            <summary>
            Gets the custom datetime format string to use.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.DateTimeFormatAttribute.Kind">
            <summary>
            Gets the predefined datetime format kind.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.DateTimeFormatAttribute.#ctor(DisCatSharp.Common.Serialization.DateTimeFormatKind)">
            <summary>
            Specifies a predefined format to use.
            </summary>
            <param name="kind">Predefined format kind to use.</param>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.DateTimeFormatAttribute.#ctor(System.String)">
            <summary>
            <para>Specifies a custom format to use.</para>
            <para>See https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings for more details.</para>
            </summary>
            <param name="format">Custom format string to use.</param>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.DateTimeFormatKind">
            <summary>
            <para>Defines which built-in format to use for for <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> serialization.</para>
            <para>See https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings and https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings for more details.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatKind.ISO8601">
            <summary>
            Specifies ISO 8601 format, which is equivalent to .NET format string of "yyyy-MM-ddTHH:mm:ss.fffzzz".
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatKind.RFC1123">
            <summary>
            Specifies RFC 1123 format, which is equivalent to .NET format string of "R".
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatKind.CurrentLocaleLong">
            <summary>
            Specifies a format defined by <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>, with a format string of "G". This format is not recommended for portability reasons.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatKind.CurrentLocaleShort">
            <summary>
            Specifies a format defined by <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>, with a format string of "g". This format is not recommended for portability reasons.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatKind.InvariantLocaleLong">
            <summary>
            Specifies a format defined by <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>, with a format string of "G".
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatKind.InvariantLocaleShort">
            <summary>
            Specifies a format defined by <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>, with a format string of "g".
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.DateTimeFormatKind.Custom">
            <summary>
            Specifies a custom format. This value is not usable directly.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.DecomposerAttribute">
            <summary>
            Specifies a decomposer for a given type or property.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.DecomposerAttribute.DecomposerType">
            <summary>
            Gets the type of the decomposer.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.DecomposerAttribute.#ctor(System.Type)">
            <summary>
            Specifies a decomposer for given type or property.
            </summary>
            <param name="type">Type of decomposer to use.</param>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.NumericEnumAttribute">
            <summary>
            <para>Specifies that this enum should be serialized and deserialized as its underlying numeric type.</para>
            <para>This is used to change the behaviour of enum serialization.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.StringEnumAttribute">
            <summary>
            <para>Specifies that this enum should be serialized and deserialized as its string representation.</para>
            <para>This is used to change the behaviour of enum serialization.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.IncludeNullAttribute">
            <summary>
            <para>Specifies that if the value of the field or property is null, it should be included in the serialized data.</para>
            <para>This alters the default behaviour of ignoring nulls.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.Int53Attribute">
            <summary>
            <para>Specifies that this 64-bit integer uses no more than 53 bits to represent its value.</para>
            <para>This is used to indicate that large numbers are safe for direct serialization into formats which do support 64-bit integers natively (such as JSON).</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.Int53Attribute.MAX_VALUE">
            <summary>
            <para>Gets the maximum safe value representable as an integer by a IEEE754 64-bit binary floating point value.</para>
            <para>This value equals to 9007199254740991.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.Int53Attribute.MIN_VALUE">
            <summary>
            <para>Gets the minimum safe value representable as an integer by a IEEE754 64-bit binary floating point value.</para>
            <para>This value equals to -9007199254740991.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.SerializationAttribute">
            <summary>
            ABC for serialization attributes.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.SerializedNameAttribute">
            <summary>
            Declares name of a property in serialized data. This is used for mapping serialized data to object properties and fields.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.SerializedNameAttribute.Name">
            <summary>
            Gets the serialized name of the field or property.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.SerializedNameAttribute.#ctor(System.String)">
            <summary>
            Declares name of a property in serialized data. This is used for mapping serialized data to object properties and fields.
            </summary>
            <param name="name">Name of the field or property in serialized data.</param>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.TimeSpanSecondsAttribute">
            <summary>
            <para>Specifies that this <see cref="T:System.TimeSpan"/> will be serialized as a number of whole seconds.</para>
            <para>This value will always be serialized as a number.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.TimeSpanMillisecondsAttribute">
            <summary>
            <para>Specifies that this <see cref="T:System.TimeSpan"/> will be serialized as a number of whole milliseconds.</para>
            <para>This value will always be serialized as a number.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.TimeSpanFormatAttribute">
            <summary>
            Defines the format for string-serialized <see cref="T:System.TimeSpan"/> objects.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatAttribute.FORMAT_ISO_8601">
            <summary>
            Gets the ISO 8601 format string of @"ddThh\:mm\:ss\.fff".
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatAttribute.FORMAT_CONSTANT">
            <summary>
            Gets the constant format.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatAttribute.FORMAT_LONG">
            <summary>
            Gets the general long format.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatAttribute.FORMAT_SHORT">
            <summary>
            Gets the general short format.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.TimeSpanFormatAttribute.Format">
            <summary>
            Gets the custom datetime format string to use.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.TimeSpanFormatAttribute.Kind">
            <summary>
            Gets the predefined datetime format kind.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.TimeSpanFormatAttribute.#ctor(DisCatSharp.Common.Serialization.TimeSpanFormatKind)">
            <summary>
            Specifies a predefined format to use.
            </summary>
            <param name="kind">Predefined format kind to use.</param>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.TimeSpanFormatAttribute.#ctor(System.String)">
            <summary>
            <para>Specifies a custom format to use.</para>
            <para>See https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings for more details.</para>
            </summary>
            <param name="format">Custom format string to use.</param>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.TimeSpanFormatKind">
            <summary>
            <para>Defines which built-in format to use for <see cref="T:System.TimeSpan"/> serialization.</para>
            <para>See https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings and https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings for more details.</para>
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatKind.ISO8601">
            <summary>
            Specifies ISO 8601-like time format, which is equivalent to .NET format string of @"ddThh\:mm\:ss\.fff".
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatKind.InvariantConstant">
            <summary>
            Specifies a format defined by <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>, with a format string of "c".
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatKind.CurrentLocaleLong">
            <summary>
            Specifies a format defined by <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>, with a format string of "G". This format is not recommended for portability reasons.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatKind.CurrentLocaleShort">
            <summary>
            Specifies a format defined by <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>, with a format string of "g". This format is not recommended for portability reasons.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatKind.InvariantLocaleLong">
            <summary>
            Specifies a format defined by <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>, with a format string of "G". This format is not recommended for portability reasons.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatKind.InvariantLocaleShort">
            <summary>
            Specifies a format defined by <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>, with a format string of "g". This format is not recommended for portability reasons.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Serialization.TimeSpanFormatKind.Custom">
            <summary>
            Specifies a custom format. This value is not usable directly.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.UnixSecondsAttribute">
            <summary>
            <para>Specifies that this <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/> will be serialized as Unix timestamp seconds.</para>
            <para>This value will always be serialized as a number.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.UnixMillisecondsAttribute">
            <summary>
            <para>Specifies that this <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/> will be serialized as Unix timestamp milliseconds.</para>
            <para>This value will always be serialized as a number.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Serialization.ComplexDecomposer">
            <summary>
            Decomposes <see cref="T:System.Numerics.Complex"/> numbers into tuples (arrays of 2).
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.ComplexDecomposer.s_complex">
            <summary>
            Gets the t complex.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.ComplexDecomposer.s_doubleArray">
            <summary>
            Gets the t double array.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.ComplexDecomposer.s_doubleEnumerable">
            <summary>
            Gets the t double enumerable.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.ComplexDecomposer.s_objectArray">
            <summary>
            Gets the t object array.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Serialization.ComplexDecomposer.s_objectEnumerable">
            <summary>
            Gets the t object enumerable.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.ComplexDecomposer.CanDecompose(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Serialization.ComplexDecomposer.CanRecompose(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Serialization.ComplexDecomposer.TryDecompose(System.Object,System.Type,System.Object@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Serialization.ComplexDecomposer.TryRecompose(System.Object,System.Type,System.Type,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:DisCatSharp.Common.Serialization.IDecomposer">
            <summary>
            Provides an interface to decompose an object into another object or combination of objects.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.IDecomposer.CanDecompose(System.Type)">
            <summary>
            Checks whether the decomposer can decompose a specific type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>Whether the decomposer can decompose a given type.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.IDecomposer.CanRecompose(System.Type)">
            <summary>
            <para>Checks whether the decomposer can recompose a specific decomposed type.</para>
            <para>Note that while a type might be considered recomposable, other factors might prevent recomposing operation from being successful.</para>
            </summary>
            <param name="t">Decomposed type to check.</param>
            <returns>Whether the decomposer can decompose a given type.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.IDecomposer.TryDecompose(System.Object,System.Type,System.Object@,System.Type@)">
            <summary>
            Attempts to decompose a given object of specified source type. The operation produces the decomposed object and the type it got decomposed into.
            </summary>
            <param name="obj">Object to decompose.</param>
            <param name="tobj">Type to decompose.</param>
            <param name="decomposed">Decomposition result.</param>
            <param name="tdecomposed">Type of the result.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Serialization.IDecomposer.TryRecompose(System.Object,System.Type,System.Type,System.Object@)">
            <summary>
            Attempts to recompose given object of specified source type, into specified target type. The operation produces the recomposed object.
            </summary>
            <param name="obj">Object to recompose from.</param>
            <param name="tobj">Type of data to recompose.</param>
            <param name="trecomposed">Type to recompose into.</param>
            <param name="recomposed">Recomposition result.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="T:DisCatSharp.Common.RegularExpressions.CommonRegEx">
            <summary>
            Provides common regex.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.RegularExpressions.CommonRegEx.HexColorString">
            <summary>
            Represents a hex color string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.RegularExpressions.CommonRegEx.RgbColorString">
            <summary>
            Represents a rgb color string.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.RegularExpressions.CommonRegEx.TimeSpan">
            <summary>
            Represents a timespan.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.RegularExpressions.CommonRegEx.AdvancedYoutubeRegex">
            <summary>
            Represents a advanced youtube regex.
            Named groups: 
            <list type="table">
              <listheader>
                 <term>group</term>
                 <description>description</description>
              </listheader>
              <item>
                 <term>id</term>
                 <description>Video ID</description>
              </item>
              <item>
                 <term>list</term>
                 <description>List ID</description>
              </item>
              <item>
                 <term>index</term>
                 <description>List index</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.RegularExpressions.DiscordRegEx">
            <summary>
            Provides common regex for discord related things.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.Invite">
            <summary>
            Represents a invite.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.MessageLink">
            <summary>
            Represents a message link.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.Emoji">
            <summary>
            Represents a emoji.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.AnimatedEmoji">
            <summary>
            Represents a animated emoji.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.StaticEmoji">
            <summary>
            Represents a non-animated emoji.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.Timestamp">
            <summary>
            Represents a timestamp.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.DefaultStyledTimestamp">
            <summary>
            Represents a default styled timestamp.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.StyledTimestamp">
            <summary>
            Represents a styled timestamp.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.Role">
            <summary>
            Represents a role.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.Channel">
            <summary>
            Represents a channel.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.User">
            <summary>
            Represents a user.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.UserWithNickname">
            <summary>
            Represents a user with nickname.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.UserWithOptionalNickname">
            <summary>
            Represents a user with optional nickname.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.UserWithoutNickname">
            <summary>
            Represents a user without nickname.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.RegularExpressions.DiscordRegEx.Event">
            <summary>
            Represents a event.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.CharSpanLookupDictionary`1">
            <summary>
            Represents collection of string keys and <typeparamref name="TValue"/> values, allowing the use of <see cref="T:System.ReadOnlySpan`1"/> for dictionary operations.
            </summary>
            <typeparam name="TValue">Type of items in this dictionary.</typeparam>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Keys">
            <summary>
            Gets the collection of all keys present in this dictionary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#Generic#IDictionary{System#String,TValue}#Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#IDictionary#Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Values">
            <summary>
            Gets the collection of all values present in this dictionary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#Generic#IDictionary{System#String,TValue}#Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#IDictionary#Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Count">
            <summary>
            Gets the total number of items in this dictionary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.IsReadOnly">
            <summary>
            Gets whether this dictionary is read-only.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.IsFixedSize">
            <summary>
            Gets whether this dictionary has a fixed size.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.IsSynchronized">
            <summary>
            Gets whether this dictionary is considered thread-safe.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.SyncRoot">
            <summary>
            Gets the object which allows synchronizing access to this dictionary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Item(System.String)">
            <summary>
            Gets or sets a value corresponding to given key in this dictionary.
            </summary>
            <param name="key">Key to get or set the value for.</param>
            <returns>Value matching the supplied key, if applicable.</returns>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Item(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets or sets a value corresponding to given key in this dictionary.
            </summary>
            <param name="key">Key to get or set the value for.</param>
            <returns>Value matching the supplied key, if applicable.</returns>
        </member>
        <member name="F:DisCatSharp.Common.CharSpanLookupDictionary`1._internalBuckets">
            <summary>
            Gets the internal buckets.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.#ctor">
            <summary>
            Creates a new, empty <see cref="T:DisCatSharp.Common.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.#ctor(System.Int32)">
            <summary>
            Creates a new, empty <see cref="T:DisCatSharp.Common.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and sets its initial capacity to specified value.
            </summary>
            <param name="initialCapacity">Initial capacity of the dictionary.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Common.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied dictionary.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,`0})">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Common.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied dictionary.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Common.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied key-value collection.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.Add(System.String,`0)">
            <summary>
            Inserts a specific key and corresponding value into this dictionary.
            </summary>
            <param name="key">Key to insert.</param>
            <param name="value">Value corresponding to this key.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.Add(System.ReadOnlySpan{System.Char},`0)">
            <summary>
            Inserts a specific key and corresponding value into this dictionary.
            </summary>
            <param name="key">Key to insert.</param>
            <param name="value">Value corresponding to this key.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.TryAdd(System.String,`0)">
            <summary>
            Attempts to insert a specific key and corresponding value into this dictionary.
            </summary>
            <param name="key">Key to insert.</param>
            <param name="value">Value corresponding to this key.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.TryAdd(System.ReadOnlySpan{System.Char},`0)">
            <summary>
            Attempts to insert a specific key and corresponding value into this dictionary.
            </summary>
            <param name="key">Key to insert.</param>
            <param name="value">Value corresponding to this key.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.TryGetValue(System.String,`0@)">
            <summary>
            Attempts to retrieve a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to retrieve the value for.</param>
            <param name="value">Retrieved value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.TryGetValue(System.ReadOnlySpan{System.Char},`0@)">
            <summary>
            Attempts to retrieve a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to retrieve the value for.</param>
            <param name="value">Retrieved value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.TryRemove(System.String,`0@)">
            <summary>
            Attempts to remove a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to remove the value for.</param>
            <param name="value">Removed value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.TryRemove(System.ReadOnlySpan{System.Char},`0@)">
            <summary>
            Attempts to remove a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to remove the value for.</param>
            <param name="value">Removed value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.ContainsKey(System.String)">
            <summary>
            Checks whether this dictionary contains the specified key.
            </summary>
            <param name="key">Key to check for in this dictionary.</param>
            <returns>Whether the key was present in the dictionary.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.ContainsKey(System.ReadOnlySpan{System.Char})">
            <summary>
            Checks whether this dictionary contains the specified key.
            </summary>
            <param name="key">Key to check for in this dictionary.</param>
            <returns>Whether the key was present in the dictionary.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.Clear">
            <summary>
            Removes all items from this dictionary.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.GetEnumerator">
            <summary>
            Gets an enumerator over key-value pairs in this dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#Generic#IDictionary{System#String,TValue}#Remove(System.String)">
            <summary>
            Removes the.
            </summary>
            <param name="key">The key.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds the.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Contains the.
            </summary>
            <param name="key">The key.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>An IDictionaryEnumerator.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,TValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Adds the.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,TValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Removes the.
            </summary>
            <param name="item">The item.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,TValue}}#Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Contains the.
            </summary>
            <param name="item">The item.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
            <summary>
            Copies the to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>An IEnumerator.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.TryInsertInternal(System.String,`0,System.Boolean)">
            <summary>
            Tries the insert internal.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="replace">If true, replace.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.TryRetrieveInternal(System.ReadOnlySpan{System.Char},`0@)">
            <summary>
            Tries the retrieve internal.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.TryRemoveInternal(System.ReadOnlySpan{System.Char},`0@)">
            <summary>
            Tries the remove internal.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.ContainsKeyInternal(System.ReadOnlySpan{System.Char})">
            <summary>
            Contains the key internal.
            </summary>
            <param name="key">The key.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.GetKeysInternal">
            <summary>
            Gets the keys internal.
            </summary>
            <returns>An ImmutableArray.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.GetValuesInternal">
            <summary>
            Gets the values internal.
            </summary>
            <returns>An ImmutableArray.</returns>
        </member>
        <member name="T:DisCatSharp.Common.CharSpanLookupDictionary`1.KeyedValue">
            <summary>
            The keyed value.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.KeyedValue.KeyHash">
            <summary>
            Gets the key hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.KeyedValue.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.KeyedValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.KeyedValue.Next">
            <summary>
            Gets or sets the next.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.KeyedValue.#ctor(System.String,System.UInt64,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Common.CharSpanLookupDictionary`1.KeyedValue"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="keyHash">The key hash.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator.System#Collections#IDictionaryEnumerator#Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator.System#Collections#IDictionaryEnumerator#Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            Gets the entry.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator._internalDictionary">
            <summary>
            Gets the internal dictionary.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator._internalEnumerator">
            <summary>
            Gets the internal enumerator.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator._currentValue">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator.#ctor(DisCatSharp.Common.CharSpanLookupDictionary{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator"/> class.
            </summary>
            <param name="spDict">The sp dict.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator.MoveNext">
            <summary>
            Moves the next.
            </summary>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator.Reset">
            <summary>
            Resets the.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupDictionary`1.Enumerator.Dispose">
            <summary>
            Disposes the.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1">
            <summary>
            Represents collection of string keys and <typeparamref name="TValue"/> values, allowing the use of <see cref="T:System.ReadOnlySpan`1"/> for dictionary operations.
            </summary>
            <typeparam name="TValue">Type of items in this dictionary.</typeparam>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Keys">
            <summary>
            Gets the collection of all keys present in this dictionary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Values">
            <summary>
            Gets the collection of all values present in this dictionary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Count">
            <summary>
            Gets the total number of items in this dictionary.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Item(System.String)">
            <summary>
            Gets a value corresponding to given key in this dictionary.
            </summary>
            <param name="key">Key to get or set the value for.</param>
            <returns>Value matching the supplied key, if applicable.</returns>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Item(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets a value corresponding to given key in this dictionary.
            </summary>
            <param name="key">Key to get or set the value for.</param>
            <returns>Value matching the supplied key, if applicable.</returns>
        </member>
        <member name="F:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1._internalBuckets">
            <summary>
            Gets the internal buckets.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied dictionary.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,`0})">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied dictionary.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
            Creates a new <see cref="T:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied key-value collection.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.TryGetValue(System.String,`0@)">
            <summary>
            Attempts to retrieve a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to retrieve the value for.</param>
            <param name="value">Retrieved value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.TryGetValue(System.ReadOnlySpan{System.Char},`0@)">
            <summary>
            Attempts to retrieve a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to retrieve the value for.</param>
            <param name="value">Retrieved value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.ContainsKey(System.String)">
            <summary>
            Checks whether this dictionary contains the specified key.
            </summary>
            <param name="key">Key to check for in this dictionary.</param>
            <returns>Whether the key was present in the dictionary.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.ContainsKey(System.ReadOnlySpan{System.Char})">
            <summary>
            Checks whether this dictionary contains the specified key.
            </summary>
            <param name="key">Key to check for in this dictionary.</param>
            <returns>Whether the key was present in the dictionary.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.GetEnumerator">
            <summary>
            Gets an enumerator over key-value pairs in this dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>An IEnumerator.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.TryRetrieveInternal(System.ReadOnlySpan{System.Char},`0@)">
            <summary>
            Tries the retrieve internal.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.ContainsKeyInternal(System.ReadOnlySpan{System.Char})">
            <summary>
            Contains the key internal.
            </summary>
            <param name="key">The key.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.GetKeysInternal">
            <summary>
            Gets the keys internal.
            </summary>
            <returns>An ImmutableArray.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.GetValuesInternal">
            <summary>
            Gets the values internal.
            </summary>
            <returns>An ImmutableArray.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.PrepareItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},System.Int32@)">
            <summary>
            Prepares the items.
            </summary>
            <param name="items">The items.</param>
            <param name="count">The count.</param>
            <returns>An IReadOnlyDictionary.</returns>
        </member>
        <member name="T:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.KeyedValue">
            <summary>
            The keyed value.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.KeyedValue.KeyHash">
            <summary>
            Gets the key hash.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.KeyedValue.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.KeyedValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.KeyedValue.Next">
            <summary>
            Gets or sets the next.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.KeyedValue.#ctor(System.String,System.UInt64,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.KeyedValue"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="keyHash">The key hash.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator._internalDictionary">
            <summary>
            Gets the internal dictionary.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator._internalEnumerator">
            <summary>
            Gets the internal enumerator.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator._currentValue">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator.#ctor(DisCatSharp.Common.CharSpanLookupReadOnlyDictionary{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator"/> class.
            </summary>
            <param name="spDict">The sp dict.</param>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator.MoveNext">
            <summary>
            Moves the next.
            </summary>
            <returns>A bool.</returns>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator.Reset">
            <summary>
            Resets the.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.CharSpanLookupReadOnlyDictionary`1.Enumerator.Dispose">
            <summary>
            Disposes the.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1">
            <summary>
            Provides a resizable memory buffer analogous to <see cref="T:DisCatSharp.Common.Types.MemoryBuffer`1"/>, using a single continuous memory region instead.
            </summary>
            <typeparam name="T">Type of item to hold in the buffer.</typeparam>
        </member>
        <member name="P:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Capacity">
            <inheritdoc />
        </member>
        <member name="P:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Length">
            <inheritdoc />
        </member>
        <member name="P:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Count">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.#ctor(System.Int32,System.Buffers.MemoryPool{System.Byte},System.Boolean)">
            <summary>
            Creates a new buffer with a specified segment size, specified number of initially-allocated segments, and supplied memory pool.
            </summary>
            <param name="initialSize">Initial size of the buffer in bytes. Defaults to 64KiB.</param>
            <param name="memPool">Memory pool to use for renting buffers. Defaults to <see cref="P:System.Buffers.MemoryPool`1.Shared"/>.</param>
            <param name="clearOnDispose">Determines whether the underlying buffers should be cleared on exit. If dealing with sensitive data, it might be a good idea to set this option to true.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Write(System.ReadOnlySpan{`0})">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Write(`0[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Write(System.ArraySegment{`0})">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Write(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.WriteStreamSeekable(System.IO.Stream)">
            <summary>
            Writes the stream seekable.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.WriteStreamUnseekable(System.IO.Stream)">
            <summary>
            Writes the stream unseekable.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Read(System.Span{`0},System.UInt64,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Read(`0[],System.Int32,System.Int32,System.UInt64,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Read(System.ArraySegment{`0},System.UInt64,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.ToArray">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.CopyTo(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.Dispose">
            <summary>
            Disposes of any resources claimed by this buffer.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1.EnsureSize(System.Int32)">
            <summary>
            Ensures the size.
            </summary>
            <param name="newCapacity">The new capacity.</param>
        </member>
        <member name="T:DisCatSharp.Common.Types.IMemoryBuffer`1">
            <summary>
            An interface describing the API of resizable memory buffers, such as <see cref="T:DisCatSharp.Common.Types.MemoryBuffer`1"/> and <see cref="T:DisCatSharp.Common.Types.ContinuousMemoryBuffer`1"/>.
            </summary>
            <typeparam name="T">Type of item to hold in the buffer.</typeparam>
        </member>
        <member name="P:DisCatSharp.Common.Types.IMemoryBuffer`1.Capacity">
            <summary>
            Gets the total capacity of this buffer. The capacity is the number of segments allocated, multiplied by size of individual segment.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Types.IMemoryBuffer`1.Length">
            <summary>
            Gets the amount of bytes currently written to the buffer. This number is never greater than <see cref="P:DisCatSharp.Common.Types.IMemoryBuffer`1.Capacity"/>.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Types.IMemoryBuffer`1.Count">
            <summary>
            Gets the number of items currently written to the buffer. This number is equal to <see cref="P:DisCatSharp.Common.Types.IMemoryBuffer`1.Count"/> divided by size of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.Write(System.ReadOnlySpan{`0})">
            <summary>
            Appends data from a supplied buffer to this buffer, growing it if necessary.
            </summary>
            <param name="data">Buffer containing data to write.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.Write(`0[],System.Int32,System.Int32)">
            <summary>
            Appends data from a supplied array to this buffer, growing it if necessary.
            </summary>
            <param name="data">Array containing data to write.</param>
            <param name="start">Index from which to start reading the data.</param>
            <param name="count">Number of bytes to read from the source.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.Write(System.ArraySegment{`0})">
            <summary>
            Appends data from a supplied array slice to this buffer, growing it if necessary.
            </summary>
            <param name="data">Array slice containing data to write.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.Write(System.IO.Stream)">
            <summary>
            Appends data from a supplied stream to this buffer, growing it if necessary.
            </summary>
            <param name="stream">Stream to copy data from.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.Read(System.Span{`0},System.UInt64,System.Int32@)">
            <summary>
            Reads data from this buffer to the specified destination buffer. This method will write either as many 
            bytes as there are in the destination buffer, or however many bytes are available in this buffer, 
            whichever is less.
            </summary>
            <param name="destination">Buffer to read the data from this buffer into.</param>
            <param name="source">Starting position in this buffer to read from.</param>
            <param name="itemsWritten">Number of items written to the destination buffer.</param>
            <returns>Whether more data is available in this buffer.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.Read(`0[],System.Int32,System.Int32,System.UInt64,System.Int32@)">
            <summary>
            Reads data from this buffer to specified destination array. This method will write either as many bytes 
            as specified for the destination array, or however many bytes are available in this buffer, whichever is 
            less.
            </summary>
            <param name="data">Array to read the data from this buffer into.</param>
            <param name="start">Starting position in the target array to write to.</param>
            <param name="count">Maximum number of bytes to write to target array.</param>
            <param name="source">Starting position in this buffer to read from.</param>
            <param name="itemsWritten">Number of items written to the destination buffer.</param>
            <returns>Whether more data is available in this buffer.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.Read(System.ArraySegment{`0},System.UInt64,System.Int32@)">
            <summary>
            Reads data from this buffer to specified destination array slice. This method will write either as many 
            bytes as specified in the target slice, or however many bytes are available in this buffer, whichever is 
            less.
            </summary>
            <param name="data"></param>
            <param name="source"></param>
            <param name="itemsWritten">Number of items written to the destination buffer.</param>
            <returns>Whether more data is available in this buffer.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.ToArray">
            <summary>
            Converts this buffer into a single continuous byte array.
            </summary>
            <returns>Converted byte array.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.CopyTo(System.IO.Stream)">
            <summary>
            Copies all the data from this buffer to a stream.
            </summary>
            <param name="destination">Stream to copy this buffer's data to.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.IMemoryBuffer`1.Clear">
            <summary>
            Resets the buffer's pointer to the beginning, allowing for reuse.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Types.MemoryBuffer`1">
            <summary>
            Provides a resizable memory buffer, which can be read from and written to. It will automatically resize whenever required.
            </summary>
            <typeparam name="T">Type of item to hold in the buffer.</typeparam>
        </member>
        <member name="P:DisCatSharp.Common.Types.MemoryBuffer`1.Capacity">
            <inheritdoc />
        </member>
        <member name="P:DisCatSharp.Common.Types.MemoryBuffer`1.Length">
            <inheritdoc />
        </member>
        <member name="P:DisCatSharp.Common.Types.MemoryBuffer`1.Count">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.#ctor(System.Int32,System.Int32,System.Buffers.MemoryPool{System.Byte},System.Boolean)">
            <summary>
            Creates a new buffer with a specified segment size, specified number of initially-allocated segments, and supplied memory pool.
            </summary>
            <param name="segmentSize">Byte size of an individual segment. Defaults to 64KiB.</param>
            <param name="initialSegmentCount">Number of segments to allocate. Defaults to 0.</param>
            <param name="memPool">Memory pool to use for renting buffers. Defaults to <see cref="P:System.Buffers.MemoryPool`1.Shared"/>.</param>
            <param name="clearOnDispose">Determines whether the underlying buffers should be cleared on exit. If dealing with sensitive data, it might be a good idea to set this option to true.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Write(System.ReadOnlySpan{`0})">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Write(`0[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Write(System.ArraySegment{`0})">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Write(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.WriteStreamSeekable(System.IO.Stream)">
            <summary>
            Writes the stream seekable.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.WriteStreamUnseekable(System.IO.Stream)">
            <summary>
            Writes the stream unseekable.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Read(System.Span{`0},System.UInt64,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Read(`0[],System.Int32,System.Int32,System.UInt64,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Read(System.ArraySegment{`0},System.UInt64,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.ToArray">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.CopyTo(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Dispose">
            <summary>
            Disposes of any resources claimed by this buffer.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Types.MemoryBuffer`1.Grow(System.Int32)">
            <summary>
            Grows the.
            </summary>
            <param name="minAmount">The min amount.</param>
        </member>
        <member name="T:DisCatSharp.Common.LinqMethods">
            <summary>
            Various Methods for Linq
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.LinqMethods.GetFirstValueWhere``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            Safely tries to get the first match out of a list.
            </summary>
            <typeparam name="TSource">Value type of list.</typeparam>
            <param name="list">The list to use.</param>
            <param name="predicate">The predicate.</param>
            <param name="value">The value to get if succeeded</param>
            <returns>Whether a value was found.</returns>
        </member>
        <member name="M:DisCatSharp.Common.LinqMethods.GetFirstValueByKey``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            Safely tries to extract the value of the first match where target key is found, otherwise null.
            </summary>
            <typeparam name="TKey">Key type of dictionary.</typeparam>
            <typeparam name="TValue">Value type of dictionary.</typeparam>
            <param name="dict">The dictionary to use.</param>
            <param name="key">The key to search for.</param>
            <param name="value">The value to get if succeeded.</param>
            <returns>Whether a value was found through the key.</returns>
        </member>
        <member name="T:DisCatSharp.Common.SecureRandom">
            <summary>
            Provides a cryptographically-secure pseudorandom number generator (CSPRNG) implementation compatible with <see cref="T:System.Random"/>.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.SecureRandom._rng">
            <summary>
            Gets the r n g.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.#ctor">
            <summary>
            Creates a new instance of <see cref="T:DisCatSharp.Common.SecureRandom"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.Finalize">
            <summary>
            Finalizes this <see cref="T:DisCatSharp.Common.SecureRandom"/> instance by disposing it.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetBytes(System.Byte[])">
            <summary>
            Fills a supplied buffer with random bytes.
            </summary>
            <param name="buffer">Buffer to fill with random bytes.</param>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetNonZeroBytes(System.Byte[])">
            <summary>
            Fills a supplied buffer with random nonzero bytes.
            </summary>
            <param name="buffer">Buffer to fill with random nonzero bytes.</param>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetBytes(System.Span{System.Byte})">
            <summary>
            Fills a supplied memory region with random bytes.
            </summary>
            <param name="buffer">Memory region to fill with random bytes.</param>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetNonZeroBytes(System.Span{System.Byte})">
            <summary>
            Fills a supplied memory region with random nonzero bytes.
            </summary>
            <param name="buffer">Memory region to fill with random nonzero bytes.</param>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetInt8(System.SByte,System.SByte)">
            <summary>
            Generates a signed 8-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.SByte.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetUInt8(System.Byte,System.Byte)">
            <summary>
            Generates a unsigned 8-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.Byte.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetInt16(System.Int16,System.Int16)">
            <summary>
            Generates a signed 16-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.Int16.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetUInt16(System.UInt16,System.UInt16)">
            <summary>
            Generates a unsigned 16-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.UInt16.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetInt32(System.Int32,System.Int32)">
            <summary>
            Generates a signed 32-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.Int32.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetUInt32(System.UInt32,System.UInt32)">
            <summary>
            Generates a unsigned 32-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.UInt32.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetInt64(System.Int64,System.Int64)">
            <summary>
            Generates a signed 64-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.Int64.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetUInt64(System.UInt64,System.UInt64)">
            <summary>
            Generates a unsigned 64-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.UInt64.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetSingle">
            <summary>
            Generates a 32-bit floating-point number between 0.0 and 1.0.
            </summary>
            <returns>Generated 32-bit floating-point number.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.GetDouble">
            <summary>
            Generates a 64-bit floating-point number between 0.0 and 1.0.
            </summary>
            <returns>Generated 64-bit floating-point number.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.Next">
            <summary>
            Generates a 32-bit integer between 0 and <see cref="F:System.Int32.MaxValue"/>. Upper end exclusive.
            </summary>
            <returns>Generated 32-bit integer.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.Next(System.Int32)">
            <summary>
            Generates a 32-bit integer between 0 and <paramref name="maxValue"/>. Upper end exclusive.
            </summary>
            <param name="maxValue">Maximum value of the generated integer.</param>
            <returns>Generated 32-bit integer.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.Next(System.Int32,System.Int32)">
            <summary>
            Generates a 32-bit integer between <paramref name="minValue"/> and <paramref name="maxValue"/>. Upper end exclusive.
            </summary>
            <param name="minValue">Minimum value of the generate integer.</param>
            <param name="maxValue">Maximum value of the generated integer.</param>
            <returns>Generated 32-bit integer.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.NextDouble">
            <summary>
            Generates a 64-bit floating-point number between 0.0 and 1.0. Upper end exclusive.
            </summary>
            <returns>Generated 64-bit floating-point number.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.NextBytes(System.Byte[])">
            <summary>
            Fills specified buffer with random bytes.
            </summary>
            <param name="buffer">Buffer to fill with bytes.</param>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.NextBytes(System.Span{System.Byte})">
            <summary>
            Fills specified memory region with random bytes.
            </summary>
            <param name="buffer">Memory region to fill with bytes.</param>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.Dispose">
            <summary>
            Disposes this <see cref="T:DisCatSharp.Common.SecureRandom"/> instance and its resources.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.Sample">
            <summary>
            Generates a random 64-bit floating-point number between 0.0 and 1.0. Upper end exclusive.
            </summary>
            <returns>Generated 64-bit floating-point number.</returns>
        </member>
        <member name="M:DisCatSharp.Common.SecureRandom.Generate``1">
            <summary>
            Generates the.
            </summary>
            <returns>A T.</returns>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncEvent">
            <summary>
            ABC for <see cref="T:DisCatSharp.Common.Utilities.AsyncEvent`2"/>, allowing for using instances thereof without knowing the underlying instance's type parameters.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncEvent.Name">
            <summary>
            Gets the name of this event.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncEvent.#ctor(System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:DisCatSharp.Common.Utilities.AsyncEvent"/> class from being created.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncEvent`2">
            <summary>
            Implementation of asynchronous event. The handlers of such events are executed asynchronously, but sequentially.
            </summary>
            <typeparam name="TSender">Type of the object that dispatches this event.</typeparam>
            <typeparam name="TArgs">Type of event argument object passed to this event's handlers.</typeparam>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncEvent`2.MaximumExecutionTime">
            <summary>
            Gets the maximum allotted execution time for all handlers. Any event which causes the handler to time out 
            will raise a non-fatal <see cref="T:DisCatSharp.Common.Utilities.AsyncEventTimeoutException`2"/>.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncEvent`2.#ctor(System.String,System.TimeSpan,DisCatSharp.Common.Utilities.AsyncEventExceptionHandler{`0,`1})">
            <summary>
            Creates a new asynchronous event with specified name and exception handler.
            </summary>
            <param name="name">Name of this event.</param>
            <param name="maxExecutionTime">Maximum handler execution time. A value of <see cref="F:System.TimeSpan.Zero"/> means infinite.</param>
            <param name="exceptionHandler">Delegate which handles exceptions caused by this event.</param>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncEvent`2.Register(DisCatSharp.Common.Utilities.AsyncEventHandler{`0,`1})">
            <summary>
            Registers a new handler for this event.
            </summary>
            <param name="handler">Handler to register for this event.</param>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncEvent`2.Unregister(DisCatSharp.Common.Utilities.AsyncEventHandler{`0,`1})">
            <summary>
            Unregisters an existing handler from this event.
            </summary>
            <param name="handler">Handler to unregister from the event.</param>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncEvent`2.UnregisterAll">
            <summary>
            Unregisters all existing handlers from this event.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncEvent`2.InvokeAsync(`0,`1,DisCatSharp.Common.Utilities.AsyncEventExceptionMode)">
            <summary>
            <para>Raises this event by invoking all of its registered handlers, in order of registration.</para>
            <para>All exceptions throw during invocation will be handled by the event's registered exception handler.</para>
            </summary>
            <param name="sender">Object which raised this event.</param>
            <param name="e">Arguments for this event.</param>
            <param name="exceptionMode">Defines what to do with exceptions caught from handlers.</param>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncEvent`2.HandleException(System.Exception,DisCatSharp.Common.Utilities.AsyncEventHandler{`0,`1},`0,`1)">
            <summary>
            Handles the exception.
            </summary>
            <param name="ex">The ex.</param>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncEventArgs">
            <summary>
            Contains arguments passed to an asynchronous event.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncEventArgs.Handled">
            <summary>
            <para>Gets or sets whether this event was handled.</para>
            <para>Setting this to true will prevent other handlers from running.</para>
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncEventExceptionHandler`2">
            <summary>
            Handles any exception raised by an <see cref="T:DisCatSharp.Common.Utilities.AsyncEvent`2"/> or its handlers.
            </summary>
            <typeparam name="TSender">Type of the object that dispatches this event.</typeparam>
            <typeparam name="TArgs">Type of the object which holds arguments for this event.</typeparam>
            <param name="asyncEvent">Asynchronous event which threw the exception.</param>
            <param name="exception">Exception that was thrown</param>
            <param name="handler">Handler which threw the exception.</param>
            <param name="sender">Object which dispatched the event.</param>
            <param name="eventArgs">Arguments with which the event was dispatched.</param>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncEventExceptionMode">
            <summary>
            Defines the behaviour for throwing exceptions from <see cref="M:DisCatSharp.Common.Utilities.AsyncEvent`2.InvokeAsync(`0,`1,DisCatSharp.Common.Utilities.AsyncEventExceptionMode)"/>.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.IgnoreAll">
            <summary>
            Defines that no exceptions should be thrown. Only exception handlers will be used.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.ThrowFatal">
            <summary>
            Defines that only fatal (i.e. non-<see cref="T:DisCatSharp.Common.Utilities.AsyncEventTimeoutException`2"/>) exceptions 
            should be thrown.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.ThrowNonFatal">
            <summary>
            Defines that only non-fatal (i.e. <see cref="T:DisCatSharp.Common.Utilities.AsyncEventTimeoutException`2"/>) exceptions 
            should be thrown.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.ThrowAll">
            <summary>
            Defines that all exceptions should be thrown. This is equivalent to combining <see cref="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.ThrowFatal"/> and 
            <see cref="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.ThrowNonFatal"/> flags.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.HandleFatal">
            <summary>
            Defines that only fatal (i.e. non-<see cref="T:DisCatSharp.Common.Utilities.AsyncEventTimeoutException`2"/>) exceptions 
            should be handled by the specified exception handler.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.HandleNonFatal">
            <summary>
            Defines that only non-fatal (i.e. <see cref="T:DisCatSharp.Common.Utilities.AsyncEventTimeoutException`2"/>) exceptions 
            should be handled by the specified exception handler.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.HandleAll">
            <summary>
            Defines that all exceptions should be handled by the specified exception handler. This is equivalent to 
            combining <see cref="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.HandleFatal"/> and <see cref="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.HandleNonFatal"/> flags.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.ThrowAllHandleAll">
            <summary>
            Defines that all exceptions should be thrown and handled by the specified exception handler. This is 
            equivalent to combining <see cref="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.HandleAll"/> and <see cref="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.ThrowAll"/> flags.
            </summary>
        </member>
        <member name="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.Default">
            <summary>
            Default mode, equivalent to <see cref="F:DisCatSharp.Common.Utilities.AsyncEventExceptionMode.HandleAll"/>.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncEventHandler`2">
            <summary>
            Handles an asynchronous event of type <see cref="T:DisCatSharp.Common.Utilities.AsyncEvent`2"/>. The handler will take an instance of <typeparamref name="TArgs"/> as its arguments.
            </summary>
            <typeparam name="TSender">Type of the object that dispatches this event.</typeparam>
            <typeparam name="TArgs">Type of the object which holds arguments for this event.</typeparam>
            <param name="sender">Object which raised this event.</param>
            <param name="e">Arguments for this event.</param>
            <returns></returns>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncEventTimeoutException">
            <summary>
            ABC for <see cref="T:DisCatSharp.Common.Utilities.AsyncEventHandler`2"/>, allowing for using instances thereof without knowing the underlying instance's type parameters.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncEventTimeoutException.Event">
            <summary>
            Gets the event the invocation of which caused the timeout.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncEventTimeoutException.Handler">
            <summary>
            Gets the handler which caused the timeout.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncEventTimeoutException.#ctor(DisCatSharp.Common.Utilities.AsyncEvent,DisCatSharp.Common.Utilities.AsyncEventHandler{System.Object,DisCatSharp.Common.Utilities.AsyncEventArgs},System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:DisCatSharp.Common.Utilities.AsyncEventTimeoutException"/> class from being created.
            </summary>
            <param name="asyncEvent">The async event.</param>
            <param name="eventHandler">The event handler.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncEventTimeoutException`2">
            <summary>
            <para>Thrown whenever execution of an <see cref="T:DisCatSharp.Common.Utilities.AsyncEventHandler`2"/> exceeds maximum time allowed.</para>
            <para>This is a non-fatal exception, used primarily to inform users that their code is taking too long to execute.</para>
            </summary>
            <typeparam name="TSender">Type of sender that dispatched this asynchronous event.</typeparam>
            <typeparam name="TArgs">Type of event arguments for the asynchronous event.</typeparam>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncEventTimeoutException`2.Event">
            <summary>
            Gets the event the invocation of which caused the timeout.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncEventTimeoutException`2.Handler">
            <summary>
            Gets the handler which caused the timeout.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncEventTimeoutException`2.#ctor(DisCatSharp.Common.Utilities.AsyncEvent{`0,`1},DisCatSharp.Common.Utilities.AsyncEventHandler{`0,`1})">
            <summary>
            Creates a new timeout exception for specified event and handler.
            </summary>
            <param name="asyncEvent">Event the execution of which timed out.</param>
            <param name="eventHandler">Handler which timed out.</param>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncExecutor">
            <summary>
            Provides a simplified way of executing asynchronous code synchronously.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncExecutor.#ctor">
            <summary>
            Creates a new instance of asynchronous executor.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncExecutor.Execute(System.Threading.Tasks.Task)">
            <summary>
            Executes a specified task in an asynchronous manner, waiting for its completion.
            </summary>
            <param name="task">Task to execute.</param>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncExecutor.Execute``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Executes a specified task in an asynchronous manner, waiting for its completion, and returning the result.
            </summary>
            <typeparam name="T">Type of the Task's return value.</typeparam>
            <param name="task">Task to execute.</param>
            <returns>Task's result.</returns>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncExecutor.StateRef`1">
            <summary>
            The state ref.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncExecutor.StateRef`1.Lock">
            <summary>
            Gets the lock used to wait for task's completion.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncExecutor.StateRef`1.Exception">
            <summary>
            Gets the exception that occurred during task's execution, if any.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncExecutor.StateRef`1.Result">
            <summary>
            Gets the result returned by the task.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncExecutor.StateRef`1.HasResult">
            <summary>
            Gets whether the task returned a result.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncExecutor.StateRef`1.#ctor(System.Threading.AutoResetEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Common.Utilities.AsyncExecutor.StateRef`1"/> class.
            </summary>
            <param name="lock">The lock.</param>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.AsyncManualResetEvent">
            <summary>
            Represents a thread synchronization event that, when signaled, must be reset manually. Unlike <see cref="T:System.Threading.ManualResetEventSlim"/>, this event is asynchronous.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.AsyncManualResetEvent.IsSet">
            <summary>
            Gets whether this event has been signaled.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncManualResetEvent.#ctor(System.Boolean)">
            <summary>
            Creates a new asynchronous synchronization event with initial state.
            </summary>
            <param name="initialState">Initial state of this event.</param>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncManualResetEvent.SetAsync">
            <summary>
            Asynchronously signal this event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncManualResetEvent.WaitAsync">
            <summary>
            Asynchronously wait for this event to be signaled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.AsyncManualResetEvent.Reset">
            <summary>
            Reset this event's signal state to unsignaled.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.ReflectionUtilities">
            <summary>
            Contains various utilities for use with .NET's reflection.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.ReflectionUtilities.CreateEmpty(System.Type)">
            <summary>
            <para>Creates an empty, uninitialized instance of specified type.</para>
            <para>This method will not call the constructor for the specified type. As such, the object might not be properly initialized.</para>
            </summary>
            <remarks>
            This method is intended for reflection use only.
            </remarks>
            <param name="t">Type of the object to instantiate.</param>
            <returns>Empty, uninitialized object of specified type.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.ReflectionUtilities.CreateEmpty``1">
            <summary>
            <para>Creates an empty, uninitialized instance of type <typeparamref name="T"/>.</para>
            <para>This method will not call the constructor for type <typeparamref name="T"/>. As such, the object might not be properly initialized.</para>
            </summary>
            <remarks>
            This method is intended for reflection use only.
            </remarks>
            <typeparam name="T">Type of the object to instantiate.</typeparam>
            <returns>Empty, uninitialized object of specified type.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.ReflectionUtilities.ToDictionary``1(``0)">
            <summary>
            Converts a given object into a dictionary of property name to property value mappings.
            </summary>
            <typeparam name="T">Type of object to convert.</typeparam>
            <param name="obj">Object to convert.</param>
            <returns>Converted dictionary.</returns>
        </member>
        <member name="T:DisCatSharp.Common.Utilities.RuntimeInformation">
            <summary>
            Gets information about current runtime.
            </summary>
        </member>
        <member name="P:DisCatSharp.Common.Utilities.RuntimeInformation.Version">
            <summary>
            Gets the current runtime's version.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Utilities.RuntimeInformation.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:DisCatSharp.Common.Utilities.RuntimeInformation"/> class.
            </summary>
        </member>
        <member name="T:DisCatSharp.Common.EnsureObjectStates">
            <summary>
            Ensures that certain objects have the target state.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.EnsureObjectStates.EmptyOrNull``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Checks whether the dictionary is null or empty.
            </summary>
            <typeparam name="T1">Any key type.</typeparam>
            <typeparam name="T2">Any value type.</typeparam>
            <param name="dictionary">The dictionary to check on.</param>
            <returns>True if satisfied, false otherwise.</returns>
        </member>
        <member name="M:DisCatSharp.Common.EnsureObjectStates.NotEmptyAndNotNull``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Checks whether the dictionary is not null and not empty.
            </summary>
            <typeparam name="T1">Any key type.</typeparam>
            <typeparam name="T2">Any value type.</typeparam>
            <param name="dictionary">The dictionary to check on.</param>
            <returns>True if satisfied, false otherwise.</returns>
        </member>
        <member name="M:DisCatSharp.Common.EnsureObjectStates.EmptyOrNull``1(System.Collections.Generic.List{``0})">
            <summary>
            Checks whether the list is null or empty.
            </summary>
            <typeparam name="T">Any value type.</typeparam>
            <param name="list">The list to check on.</param>
            <returns>True if satisfied, false otherwise.</returns>
        </member>
        <member name="M:DisCatSharp.Common.EnsureObjectStates.NotEmptyAndNotNull``1(System.Collections.Generic.List{``0})">
            <summary>
            Checks whether the list is not null and not empty.
            </summary>
            <typeparam name="T">Any value type.</typeparam>
            <param name="list">The list to check on.</param>
            <returns>True if satisfied, false otherwise.</returns>
        </member>
        <member name="T:DisCatSharp.Common.Extensions">
            <summary>
            Assortment of various extension and utility methods, designed to make working with various types a little easier.
            </summary>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            <para>Deconstructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> key-value pair item (<see cref="T:System.Collections.Generic.KeyValuePair`2"/>) into 2 separate variables.</para>
            <para>This allows for enumerating over dictionaries in foreach blocks by using a (k, v) tuple as the enumerator variable, instead of having to use a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> directly.</para>
            </summary>
            <typeparam name="TKey">Type of dictionary item key.</typeparam>
            <typeparam name="TValue">Type of dictionary item value.</typeparam>
            <param name="kvp">Key-value pair to deconstruct.</param>
            <param name="key">Deconstructed key.</param>
            <param name="value">Deconstructed value.</param>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateLength(System.SByte)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateLength(System.Byte)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateLength(System.Int16)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateLength(System.UInt16)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateLength(System.Int32)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateLength(System.UInt32)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateLength(System.Int64)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateLength(System.UInt64)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.SByte,System.SByte,System.SByte,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsInRange(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Tests whether given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsBasicAlphanumeric(System.Char)">
            <summary>
            Returns whether supplied character is in any of the following ranges: a-z, A-Z, 0-9.
            </summary>
            <param name="c">Character to test.</param>
            <returns>Whether the character is in basic alphanumeric character range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsBasicDigit(System.Char)">
            <summary>
            Returns whether supplied character is in the 0-9 range.
            </summary>
            <param name="c">Character to test.</param>
            <returns>Whether the character is in basic numeric digit character range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.IsBasicLetter(System.Char)">
            <summary>
            Returns whether supplied character is in the a-z or A-Z range.
            </summary>
            <param name="c">Character to test.</param>
            <returns>Whether the character is in basic letter character range.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.EndsWithCharacter(System.String,System.Char)">
            <summary>
            Tests whether given string ends with given character.
            </summary>
            <param name="s">String to test.</param>
            <param name="c">Character to test for.</param>
            <returns>Whether the supplied string ends with supplied character.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.StartsWithCharacter(System.String,System.Char)">
            <summary>
            Tests whether given string starts with given character.
            </summary>
            <param name="s">String to test.</param>
            <param name="c">Character to test for.</param>
            <returns>Whether the supplied string starts with supplied character.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateKnuthHash(System.ReadOnlySpan{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateKnuthHash(System.Span{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateKnuthHash(System.ReadOnlyMemory{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateKnuthHash(System.Memory{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateKnuthHash(System.ArraySegment{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateKnuthHash(System.Char[])">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateKnuthHash(System.Char[],System.Int32,System.Int32)">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <param name="start">Offset in the array to start calculating from.</param>
            <param name="count">Number of characters to compute the hash from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateKnuthHash(System.String)">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.CalculateKnuthHash(System.String,System.Int32,System.Int32)">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <param name="start">Offset in the array to start calculating from.</param>
            <param name="count">Number of characters to compute the hash from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.TryFirstTwo``1(System.Collections.Generic.IEnumerable{``0},System.ValueTuple{``0,``0}@)">
            <summary>
            Gets the two first elements of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if they exist.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="values">The output values. Undefined if <code>false</code> is returned.</param>
            <returns>Whether the <see cref="T:System.Collections.Generic.IEnumerable`1"/> contained enough elements.</returns>
        </member>
        <member name="M:DisCatSharp.Common.Extensions.Knuth(System.ReadOnlySpan{System.Char})">
            <summary>
            Knuths the.
            </summary>
            <param name="chars">The chars.</param>
            <returns>An ulong.</returns>
        </member>
    </members>
</doc>
